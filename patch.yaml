commit_message: "feat(calendar): Implementa la Calendar View dinamica con navigazione settimanale"
rationale: |
  In linea con il piano d'azione approvato, questo commit implementa la prima funzionalità principale: la vista Calendario.

  - È stato creato il modulo `src/views/CalendarView.js`, che ora gestisce il rendering e la logica della vista.
  - Lo store (`store.js`) è stato esteso per includere `focusedDate` e le azioni `PREV_WEEK` e `NEXT_WEEK` per la navigazione.
  - Il file `main.js` è stato aggiornato per inizializzare la nuova vista.
  - Sono stati aggiunti nuovi stili CSS per la griglia del calendario e i suoi componenti, seguendo un approccio mobile-first.
  - Il flusso di dati rimane strettamente unidirezionale: `View -> dispatch(action) -> Store -> notify() -> View.render()`.
patches:
  - file: index.html
    content: |
      <!DOCTYPE html>
      <html lang="it">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Mio Trainer Personale</title>
          <link rel="stylesheet" href="assets/css/style.css">
      </head>
      <body>

          <div id="app-container">
              <div id="calendar-view" class="view view--active">
                  </div>
              <div id="trainer-view" class="view">
                  <h1>Trainer View</h1>
              </div>
              <div id="debriefing-view" class="view">
                  <h1>Debriefing View</h1>
              </div>
          </div>

          <script src="src/main.js" type="module"></script>
      </body>
      </html>
  - file: assets/css/style.css
    content: |
      /* --- GLOBAL STYLES & MOBILE FIRST --- */

      :root {
          --bg-color: #1a1a1d;
          --card-color: #2c2c34;
          --primary-color: #9575cd;
          --secondary-color: #4db6ac;
          --text-color: #f4f4f9;
          --text-color-muted: #aaa;
          --border-color: #40404a;
      }

      * {
          box-sizing: border-box;
          margin: 0;
          padding: 0;
      }

      body {
          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          background-color: var(--bg-color);
          color: var(--text-color);
      }

      #app-container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 1rem;
      }

      .view {
          display: none;
          width: 100%;
      }

      .view--active {
          display: block;
      }

      /* --- CALENDAR VIEW STYLES --- */

      .calendar-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 1.5rem;
      }

      .calendar-header h2 {
          font-size: 1.25rem;
          text-align: center;
      }

      .calendar-header button {
          background-color: var(--card-color);
          color: var(--text-color);
          border: 1px solid var(--border-color);
          padding: 0.5rem 1rem;
          border-radius: 6px;
          cursor: pointer;
          transition: background-color 0.2s;
      }

      .calendar-header button:hover {
          background-color: var(--primary-color);
      }

      .calendar-grid {
          display: grid;
          grid-template-columns: 1fr; /* Mobile: una colonna */
          gap: 0.5rem;
      }

      .day-cell {
          background-color: var(--card-color);
          border: 1px solid var(--border-color);
          border-radius: 8px;
          padding: 1rem;
          min-height: 120px;
          display: flex;
          flex-direction: column;
      }

      .day-cell__header {
          display: flex;
          justify-content: space-between;
          font-weight: bold;
          color: var(--text-color-muted);
          text-transform: uppercase;
          font-size: 0.8rem;
      }

      .day-cell__body {
          margin-top: 0.5rem;
      }


      /* --- TABLET/DESKTOP OVERRIDES --- */
      @media (min-width: 768px) {
          #app-container {
              padding: 2rem;
          }

          .calendar-grid {
              grid-template-columns: repeat(7, 1fr); /* Desktop: 7 colonne */
              gap: 1rem;
          }

          .calendar-header h2 {
            font-size: 1.5rem;
          }
      }
  - file: src/main.js
    content: |
      import store from './modules/store.js';
      import { init as initCalendarView } from './views/CalendarView.js';

      // Cache delle viste per performance
      const views = {
          calendar: document.getElementById('calendar-view'),
          trainer: document.getElementById('trainer-view'),
          debriefing: document.getElementById('debriefing-view'),
      };

      // --- Inizializzazione Viste ---
      // Per ora, inizializziamo solo la vista calendario
      initCalendarView(views.calendar);


      // --- Logica di Cambio Vista (semplificata per ora) ---
      let currentActiveView = views.calendar; // Impostiamo la vista iniziale

      function handleViewChange() {
          const state = store.getState();
          const newActiveViewEl = views[state.currentView];

          if (currentActiveView !== newActiveViewEl) {
              currentActiveView.classList.remove('view--active');
              newActiveViewEl.classList.add('view--active');
              currentActiveView = newActiveViewEl;
          }
      }

      store.subscribe(handleViewChange);

      console.log('App "Mio Trainer Personale" inizializzata.');
  - file: src/modules/store.js
    content: |
      // --- Centralized State Store (Single Source of Truth) ---

      function createStore() {
          let state = {
              currentView: 'calendar', // 'calendar', 'trainer', 'debriefing'
              focusedDate: new Date(), // Traccia la data per la navigazione del calendario
              workouts: {},
          };

          const subscribers = new Set();

          function notify() {
              subscribers.forEach(callback => callback());
          }

          function dispatch(action) {
              const oldState = state;
              switch (action.type) {
                  case 'CHANGE_VIEW':
                      if (state.currentView !== action.payload) {
                          state = { ...state, currentView: action.payload };
                      }
                      break;

                  case 'PREV_WEEK': {
                      const newDate = new Date(state.focusedDate);
                      newDate.setDate(newDate.getDate() - 7);
                      state = { ...state, focusedDate: newDate };
                      break;
                  }

                  case 'NEXT_WEEK': {
                      const newDate = new Date(state.focusedDate);
                      newDate.setDate(newDate.getDate() + 7);
                      state = { ...state, focusedDate: newDate };
                      break;
                  }

                  default:
                      console.warn(`Azione non riconosciuta: ${action.type}`);
                      return; // Nessuna notifica se l'azione non è valida
              }
              // Notifica solo se lo stato è effettivamente cambiato
              if (state !== oldState) {
                  console.log(`Action: ${action.type}`, state);
                  notify();
              }
          }

          return {
              getState: () => ({ ...state }),
              subscribe: (callback) => {
                  subscribers.add(callback);
                  return () => subscribers.delete(callback);
              },
              dispatch,
          };
      }

      const store = createStore();
      export default store;
  - file: src/views/CalendarView.js
    content: |
      import store from '../modules/store.js';

      // --- UTILITIES ---
      /**
       * Calcola la data del lunedì della stessa settimana di una data data.
       * @param {Date} date - La data di riferimento.
       * @returns {Date} La data del lunedì.
       */
      function getWeekStartDate(date) {
          const d = new Date(date);
          const day = d.getDay(); // Domenica = 0, Lunedì = 1, ...
          const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adegua per la domenica
          return new Date(d.setDate(diff));
      }

      /**
       * Formatta una data nel formato "DD MMMM". Es: "30 Giugno"
       * @param {Date} date
       * @returns {string}
       */
      function formatShortDate(date) {
        return date.toLocaleDateString('it-IT', { day: 'numeric', month: 'long' });
      }


      // --- MODULE ---
      export function init(element) {
          // Creazione della struttura interna della vista
          element.innerHTML = `
              <header class="calendar-header">
                  <button id="prev-week-btn">&lt; Prev</button>
                  <h2 id="week-title"></h2>
                  <button id="next-week-btn">Next &gt;</button>
              </header>
              <div class="calendar-grid" id="calendar-grid-container"></div>
          `;

          // Cache degli elementi del DOM
          const prevBtn = element.querySelector('#prev-week-btn');
          const nextBtn = element.querySelector('#next-week-btn');
          const weekTitle = element.querySelector('#week-title');
          const gridContainer = element.querySelector('#calendar-grid-container');

          // Aggiunta Event Listeners
          prevBtn.addEventListener('click', () => store.dispatch({ type: 'PREV_WEEK' }));
          nextBtn.addEventListener('click', () => store.dispatch({ type: 'NEXT_WEEK' }));

          // Funzione di rendering principale
          function render() {
              const { focusedDate } = store.getState();
              const weekStart = getWeekStartDate(focusedDate);
              const weekEnd = new Date(weekStart);
              weekEnd.setDate(weekEnd.getDate() + 6);

              weekTitle.textContent = `${formatShortDate(weekStart)} - ${formatShortDate(weekEnd)}`;
              gridContainer.innerHTML = ''; // Pulisce la griglia prima di ridisegnare

              for (let i = 0; i < 7; i++) {
                  const dayDate = new Date(weekStart);
                  dayDate.setDate(dayDate.getDate() + i);

                  const dayCell = document.createElement('div');
                  dayCell.className = 'day-cell';
                  dayCell.innerHTML = `
                      <div class="day-cell__header">
                          <span>${dayDate.toLocaleDateString('it-IT', { weekday: 'long' })}</span>
                          <span>${dayDate.getDate()}</span>
                      </div>
                      <div class="day-cell__body">
                          </div>
                  `;
                  gridContainer.appendChild(dayCell);
              }
          }

          // Sottoscrizione allo store e rendering iniziale
          store.subscribe(render);
          render();
      }
commands: []