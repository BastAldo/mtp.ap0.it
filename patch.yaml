commit_message: "docs: Definire contratto API e state machine del frontend"
rationale: |
  Questo commit implementa la prima fase della nostra riprogettazione strategica.
  Aderendo al Principio della Massima Granularità e all'approccio "Documentation-Driven", abbiamo:
  1. Creato `docs/api_contract.md`: un documento che definisce il contratto dati (mock data) tra il frontend e il futuro backend. Questo sblocca lo sviluppo parallelo e garantisce una fonte di verità unica per le strutture dati.
  2. Creato `docs/flowcharts/frontend_trainer_statemachine.md`: un flowchart Mermaid che mappa la macchina a stati del `TrainerView`. Questo serve come specifica visuale per prevenire by-design i bug di stato riscontrati nella versione precedente.
  3. Rimosso tutto il codice sorgente JavaScript legacy. Questa azione trasforma il repository nel "cervello" del progetto, dedicato esclusivamente alla documentazione e all'architettura, come da piano.
patches:
  - file: "docs/api_contract.md"
    actions:
      - type: "CREATE"
        content: |
          # Contratto API e Dati Mock

          Questo documento definisce il contratto dati tra il frontend e il backend. Il frontend svilupperà basandosi su queste strutture. Il backend dovrà implementare API che restituiscano dati conformi a questo contratto.

          ## 1. Oggetto Workout

          Rappresenta un allenamento assegnato a una data specifica.

          ```json
          {
            "id": "workout-uuid-001",
            "date": "2025-07-21",
            "name": "Spinta A - Petto e Tricipiti",
            "items": [
              {
                "exerciseId": "ex-001",
                "exerciseName": "Panca Piana Bilanciere",
                "sets": 3,
                "reps": 8
              },
              {
                "exerciseId": "ex-002",
                "exerciseName": "Dip alle Parallele",
                "sets": 3,
                "reps": 10
              },
              {
                "exerciseId": "ex-003",
                "exerciseName": "Plank",
                "sets": 2,
                "durationSeconds": 60
              }
            ]
          }
          ```

          ## 2. Oggetto ExecutionPlan

          Rappresenta la sequenza di passi pre-calcolata che il `TrainerView` eseguirà. Viene generato dal backend a partire da un `Workout`.

          ```json
          [
            { "type": "PREPARE", "durationSeconds": 5 },
            { "type": "ANNOUNCE", "exerciseName": "Panca Piana Bilanciere" },
            { "type": "EXERCISE", "set": 1, "reps": 8 },
            { "type": "REST", "durationSeconds": 90 },
            { "type": "EXERCISE", "set": 2, "reps": 8 },
            { "type": "REST", "durationSeconds": 90 },
            { "type": "EXERCISE", "set": 3, "reps": 8 },
            { "type": "ANNOUNCE", "exerciseName": "Dip alle Parallele" },
            { "type": "EXERCISE", "set": 1, "reps": 10 },
            { "type": "REST", "durationSeconds": 60 },
            { "type": "EXERCISE", "set": 2, "reps": 10 },
            { "type": "REST", "durationSeconds": 60 },
            { "type": "EXERCISE", "set": 3, "reps": 10 },
            { "type": "ANNOUNCE", "exerciseName": "Plank" },
            { "type": "EXERCISE_TIMED", "set": 1, "durationSeconds": 60 },
            { "type": "REST", "durationSeconds": 45 },
            { "type": "EXERCISE_TIMED", "set": 2, "durationSeconds": 60 },
            { "type": "FINISHED" }
          ]
          ```
  - file: "docs/flowcharts/frontend_trainer_statemachine.md"
    actions:
      - type: "CREATE"
        content: |
          # Flowchart: Macchina a Stati del TrainerView

          Questo flowchart descrive la logica di stato del componente `TrainerView`. È la specifica visuale per garantire un comportamento robusto e prevedibile.

          ```mermaid
          graph TD
              subgraph Inizio
                  A[Idle] -->|Avvia Allenamento| B(Inizializzazione)
              end

              subgraph Ciclo di Esecuzione
                  B --> C{Step Corrente?}
                  C -->|PREPARE| D[Stato: Preparazione<br/>Avvia countdown(5s)]
                  D --> C

                  C -->|ANNOUNCE| E[Stato: Annuncio<br/>Mostra nome esercizio]
                  E --> C

                  C -->|EXERCISE / EXERCISE_TIMED| F[Stato: Esecuzione<br/>Mostra reps/timer]
                  F --> C

                  C -->|REST| G[Stato: Riposo<br/>Avvia countdown riposo]
                  G --> C
              end

              subgraph Fine
                  C -->|FINISHED| H[Stato: Completato<br/>Mostra riepilogo]
                  H -->|Torna al Calendario| I(Reset Stato)
                  I --> A
              end
          ```
  - file: "index.html"
    actions:
      - type: "DELETE"
  - file: "workouts.js"
    actions:
      - type: "DELETE"
  - file: "src/data/_staticExercises.js"
    actions:
      - type: "DELETE"
  - file: "src/main.js"
    actions:
      - type: "DELETE"
  - file: "src/modules/exerciseRepository.js"
    actions:
      - type: "DELETE"
  - file: "src/modules/planGenerator.js"
    actions:
      - type: "DELETE"
  - file: "src/modules/storage.js"
    actions:
      - type: "DELETE"
  - file: "src/modules/store.js"
    actions:
      - type: "DELETE"
  - file: "src/modules/timer.js"
    actions:
      - type: "DELETE"
  - file: "src/ui/Modal.js"
    actions:
      - type: "DELETE"
  - file: "src/ui/Notice.js"
    actions:
      - type: "DELETE"
  - file: "src/views/CalendarView.js"
    actions:
      - type: "DELETE"
  - file: "src/views/DebriefingView.js"
    actions:
      - type: "DELETE"
  - file: "src/views/ExerciseLibraryView.js"
    actions:
      - type: "DELETE"
  - file: "src/views/TrainerView.js"
    actions:
      - type: "DELETE"
  - file: "src/views/WorkoutEditorView.js"
    actions:
      - type: "DELETE"