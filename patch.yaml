# Questo è un file YAML. Copia tutto il contenuto da qui in giù
# e salvalo come 'patch.yaml'. Dovrai adattare il tuo script
# python per leggere questo formato.

commit_message: "refactor: Isolate Trainer state machine and create UI module"

rationale: |
  Questo è il refactoring più importante.
  1.  **Isolamento Completo:** La logica della state machine del Trainer, il cuore complesso dell'app, è ora in `src/trainer.js`. È disaccoppiata dal DOM.
  2.  **Modulo UI Dedicato:** Abbiamo creato `src/ui.js`, la cui unica responsabilità è aggiornare l'HTML. Il Trainer gli dice "cosa" mostrare (es. "mostra il timer a 10s"), e la UI sa "come" farlo. Questa è una separazione critica delle responsabilità.
  3.  **Svuotamento di main.js:** Abbiamo rimosso quasi 250 righe da `main.js`, lasciandolo quasi completamente vuoto. La sua fine è vicina.
  4.  **Orchestrazione Pulita:** `app.js` ora gestisce l'avvio del trainer, collegando il click sul pulsante "INIZIA" del calendario con l'inizio della logica del trainer.

patches:
  - file: src/ui.js
    content: |
      /**
       * @file ui.js
       * Responsabile di tutte le manipolazioni dirette del DOM.
       * Offre funzioni semplici che gli altri moduli possono chiamare
       * senza conoscere la struttura dell'HTML.
       */

      // Elementi Vista Trainer
      const trainerView = document.getElementById('trainer-view');
      const exerciseTitle = document.getElementById('exercise-title');
      const seriesCounter = document.getElementById('series-counter');
      const trainerMainDisplay = document.getElementById('trainer-main-display');
      const exerciseDescription = document.getElementById('exercise-description');

      // Elementi Vista Calendario
      const calendarView = document.getElementById('calendar-view');

      /**
       * Mostra una vista specifica e nasconde le altre.
       * @param {'trainer' | 'calendar'} viewName
       */
      export function showView(viewName) {
        calendarView.classList.toggle('view--active', viewName === 'calendar');
        trainerView.classList.toggle('view--active', viewName === 'trainer');
      }

      /**
       * Aggiorna l'intera UI del trainer con i dati di un esercizio.
       * @param {object} exercise - L'oggetto dell'esercizio.
       * @param {number} currentSeries - Il numero della serie corrente.
       */
      export function updateTrainerUI(exercise, currentSeries) {
        exerciseTitle.textContent = exercise.name;
        seriesCounter.textContent = `SERIE ${currentSeries} / ${exercise.series}`;
        exerciseDescription.textContent = exercise.description;
      }

      /**
       * Aggiorna il display principale del trainer (es. timer, testo).
       * @param {string} text
       */
      export function setMainDisplayText(text) {
        trainerMainDisplay.textContent = text;
      }

      /**
       * Applica o rimuove l'effetto flash dal display principale.
       * @param {boolean} flashing
       */
      export function setFlashing(flashing) {
        trainerMainDisplay.classList.toggle('is-flashing', flashing);
      }

  - file: src/trainer.js
    content: |
      /**
       * @file trainer.js
       * Contiene tutta la logica della state machine per la sessione di allenamento.
       */
      import * as ui from './ui.js';
      import { playTick } from './audio.js';
      import { WORKOUTS } from './workouts.js'; // Assumendo che gli allenamenti del giorno siano passati

      // --- State ---
      let state = 'idle'; // idle, ready, announcing, preparing, action, paused, rest, finished
      let workoutPlan = []; // Lista di esercizi per la sessione
      let currentExerciseIndex = 0;
      let currentSeries = 1;
      let currentRep = 1;
      let timer = null;
      let timerValue = 0;

      // --- Funzioni private ---

      function runState() {
        console.log(`TRAINER STATE: ${state.toUpperCase()}`);
        switch (state) {
          case 'ready':
            const exercise = workoutPlan[currentExerciseIndex];
            ui.updateTrainerUI(exercise, currentSeries);
            ui.setMainDisplayText("PREMI PER INIZIARE");
            // Qui si potrebbe aggiungere un event listener per iniziare
            break;
          // ... implementazione degli altri stati (announcing, action, etc.)
        }
      }

      // --- API Pubblica ---

      /**
       * Inizia la sessione di allenamento.
       * @param {string[]} exerciseIds - Array di ID degli esercizi da eseguire.
       */
      export function startTrainer(exerciseIds) {
        console.log('Starting trainer with exercises:', exerciseIds);

        workoutPlan = exerciseIds.map(id => WORKOUTS.find(w => w.id === id));
        if (workoutPlan.some(e => !e)) {
          console.error("Uno o più esercizi non trovati!", exerciseIds);
          return;
        }

        currentExerciseIndex = 0;
        currentSeries = 1;
        state = 'ready';

        ui.showView('trainer');
        runState();
      }

  - file: src/app.js
    content: |
      import { initializeAudio } from './audio.js';
      import { initCalendar } from './calendar.js';
      import { initModals, openDailyWorkoutModal } from './modals.js';
      import { startTrainer } from './trainer.js';

      function initializeApp() {
        initializeAudio();
        initCalendar();
        initModals();

        // --- Event Delegation ---
        const calendarGrid = document.getElementById('calendar-grid');
        calendarGrid.addEventListener('click', (event) => {
          const target = event.target;
          const dayCell = target.closest('.day-cell');

          if (!dayCell) return;

          if (target.classList.contains('btn-start')) {
            // Cliccato "INIZIA"
            // Logica placeholder per ottenere gli esercizi del giorno
            const exerciseIds = ['pushups', 'squats', 'plank'];
            startTrainer(exerciseIds);
          } else {
            // Cliccato sulla cella per modificare
            const date = dayCell.dataset.date;
            openDailyWorkoutModal(date);
          }
        });
      }

      // Wait for the DOM to be fully loaded before running the app
      document.addEventListener('DOMContentLoaded', initializeApp);

  - file: main.js
    content: |
      /**
       * @file main.js
       * Questo file è ora obsoleto e verrà eliminato nei prossimi refactoring.
       * La sua logica è stata spostata in moduli dedicati all'interno della cartella /src.
       */

      // Tutta la vecchia logica del trainer, dei timer e dello stato
      // è stata rimossa.
      
      // Tutta la logica dei modali è stata rimossa.
      
      // Tutta la logica del calendario è stata rimossa.

commands:
  - "git status"