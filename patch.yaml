commit_message: "docs: Evolve architecture with state management and roadmap"
rationale: |
  This commit introduces a significant evolution of the project's architecture based on a strategic review.

  1.  **State Management:** A new "State Management" section has been added to the architecture document (`02_ARCHITECTURE.md`), formalizing the use of a centralized store. This is the most critical enhancement to ensure the application remains robust and maintainable as it grows.
  2.  **Data Integrity:** The concept of Data Schemas and Validation has been added to the persistence strategy to protect the app from corrupted data in `localStorage`.
  3.  **Responsive Design:** The style guide (`03_STYLE_GUIDE.md`) now includes a formal requirement for responsive design, outlining a mobile-first approach and a primary breakpoint.
  4.  **Project Roadmap:** A new `04_ROADMAP.md` file has been created to track future feature ideas, providing a clear vision for the project's evolution without cluttering the core architectural documents.
patches:
  - file: docs/02_ARCHITECTURE.md
    content: |
      # Application Architecture

      This document outlines the high-level architecture for the "Mio Trainer Personale" SPA.

      ## 1. Core Principles

      -   **Modularity:** The application is broken down into distinct, single-responsibility modules.
      -   **State-Driven UI:** The user interface reacts to changes in the application's state.

      ## 2. Directory Structure

      -   `docs/`: Contains all project documentation.
      -   `index.html`: The single HTML entry point.
      -   `src/`: Contains all application source code.
          -   `src/modules/store.js`: The centralized application state store.
          -   ... and other modules.

      ## 3. View Management

      The application uses a simple view manager controlled by `main.js`. Only one view is active (`.view--active`) at any given time. This is driven by the state in the central store.

      ## 4. Data Persistence

      All user data is persisted in `localStorage`. The `storage.js` module provides a clean API for this.

      ### 4.1. Data Schemas and Validation
      To ensure data integrity, all data read from `localStorage` MUST be validated against a defined schema before being used by the application. This prevents errors from corrupted or outdated data structures.

      - **Daily Workout Schema:** An array of "workout item" objects.
        - `item`: `{ id: string, type: 'exercise' | 'rest', ...rest }`
      - **Exercise Schema:** An object defining an exercise's properties.
        - `exercise`: `{ id: string, name: string, tempo: object, ...rest }`

      ### 4.2. Workout Item Structure
      The data structure for a daily workout is an array of "workout items". Each item is an object with a `type` key:
      -   `{ type: 'exercise', id: 'squat', ... }`
      -   `{ type: 'rest', duration: 60, ... }`

      ## 5. State Management

      The application MUST use a centralized state store (`src/modules/store.js`) as the Single Source of Truth (SSoT) for all application state.
      -   **State:** A single, read-only JavaScript object containing all shared application data (e.g., `currentView`, `workouts`, `trainerState`).
      -   **Actions:** State can only be modified by dispatching predefined, synchronous "actions" (functions within the store). These actions are the only place where state mutations can occur.
      -   **Subscriptions:** UI modules can "subscribe" to the store. Whenever the state is updated via an action, all subscribers are notified so they can re-render themselves with the new data. This creates a predictable, one-way data flow.

      ## 6. Architectural Decision Records (ADRs)

      ### ADR 001: No Native Pop-ups
      -   **Status**: Accepted
      -   **Decision**: All forms of pop-up dialogs MUST be implemented as "pop-ins" or modals rendered within the application's own DOM.
  - file: docs/03_STYLE_GUIDE.md
    content: |
      # UI Design and Visual System

      This document describes the UI, color palette, and visual language of the "Mio Trainer Personale" application.

      ## 1. General Philosophy

      The UI has a **dark theme**, is minimal and functional, prioritizing clarity.

      ## 2. Color Palette

      * `--bg-color: #1a1a1d`
      * `--card-color: #2c2c34`
      * `--primary-color: #9575cd`
      * `--secondary-color: #4db6ac`
      * `--text-color: #f4f4f9`
      * ...and others

      ## 3. Layout and Structure

      * **Main Container (`#app-container`):** Centered container with a max-width.
      * **Views (`.view`):** Class-based system for showing/hiding main sections.
      * **Grids and Flexbox:** Used for robust and responsive layouts.

      ## 4. Key Components and Effects

      (Sections for Cards, Buttons, Modals, etc.)

      ## 5. Responsive Design

      -   **Principle:** The application MUST follow a **mobile-first** design approach. Styles should be written for mobile screens by default, and then expanded for larger screens using media queries.
      -   **Primary Breakpoint:** A primary breakpoint at `768px` should be used to distinguish between "mobile" and "desktop" layouts.
          ```css
          /* Mobile styles first */
          .container {
              padding: 1rem;
          }

          /* Tablet/Desktop overrides */
          @media (min-width: 768px) {
              .container {
                  padding: 2rem;
              }
          }
          ```
      -   **Flexibility:** Layouts should be fluid and adapt to screen sizes rather than targeting specific device widths.
  - file: docs/04_ROADMAP.md
    content: |
      # Project Roadmap

      This document lists potential future features and major improvements for "Mio Trainer Personale". It serves as a high-level guide for the project's evolution. Items are not strictly prioritized unless specified.

      ## Proposed Features

      ### 1. Workout Templates
      - **Concept:** Allow users to save a complete daily workout routine (exercises and rests) as a named template.
      - **Benefit:** Users can quickly apply these templates to any day in the calendar, significantly speeding up the scheduling of recurring workouts.

      ### 2. Statistics & History Page
      - **Concept:** A new dedicated view that provides insights into the user's workout history.
      - **Benefit:** Allows users to track their progress over time. Could include metrics like:
        - Total workouts completed.
        - Frequency of specific exercises.
        - Personal records (e.g., heaviest lift - future feature).
commands:
  - "echo 'Architecture and documentation evolved successfully.'"