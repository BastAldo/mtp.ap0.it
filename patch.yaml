commit_message: "feat: Establish modular project structure and data persistence module"
rationale: |
  Questo è il primo e più critico passo del refactoring.

  1.  **Risposta alla Strategia:** Mantenere due architetture parallele (monolite + moduli) è una cattiva pratica che porta a complessità e bug. Adottiamo invece un refactoring per estrazione: il monolite verrà smantellato pezzo per pezzo.

  2.  **Fondamenta Modulari:** Viene creata una directory `src/`. Tutto il codice JavaScript risiederà qui, favorendo un'organizzazione pulita e scalabile fin dall'inizio. L'entry point dell'applicazione viene spostato da `app.js` a `src/main.js`.

  3.  **Isolamento della Persistenza:** Viene creato il primo modulo, `src/storage.js`. Questo modulo ha la responsabilità UNICA di gestire la lettura e la scrittura su `localStorage`. Qualsiasi altra parte dell'applicazione che necessita di interagire con i dati persistiti dovrà importare e utilizzare questo modulo, eliminando l'accesso diretto e sparpagliato al `localStorage`.

  4.  **Abilitazione ES Modules:** `index.html` viene aggiornato per caricare `src/main.js` usando `type="module"`. Questo ci permette di usare la sintassi `import/export` di ES6, che è il pilastro della nostra nuova architettura.

  5.  **Pulizia:** Viene aggiunto un file `.gitignore` standard per mantenere il repository pulito.
patches:
  - file: index.html
    content: |
      <!DOCTYPE html>
      <html lang="it">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Mio Trainer Personale</title>
          <link rel="stylesheet" href="style.css" />
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link
            href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:ital,wght@0,400;0,700;1,400&family=Teko:wght@400;600;700&display=swap"
            rel="stylesheet"
          />
        </head>
        <body>
          <div id="app-container">
            <div id="calendar-view" class="view view--active">
              <header id="calendar-header">
                <button id="prev-week-btn" class="btn">&lt;</button>
                <h1 id="current-month-year"></h1>
                <button id="next-week-btn" class="btn">&gt;</button>
              </header>
              <div id="calendar-grid"></div>
            </div>

            <div id="trainer-view" class="view">
              <h1 id="trainer-exercise-title"></h1>
              <div id="trainer-series-counter"></div>
              <div id="trainer-main-display" class="display-ring">
                <span id="trainer-main-text"></span>
              </div>
              <div id="trainer-description"></div>
              <div id="trainer-controls">
                <button id="pause-resume-btn" class="btn"></button>
                <button id="terminate-btn" class="btn btn-danger"></button>
              </div>
            </div>

            <div id="debriefing-view" class="view">
              <h1>Workout Completato!</h1>
              <div id="debriefing-summary"></div>
              <div id="debriefing-report-container">
                <h2>Copia per il tuo coach:</h2>
                <textarea id="debriefing-text-report" readonly></textarea>
                <button id="copy-report-btn" class="btn btn-primary">
                  Copia Report
                </button>
              </div>
              <button id="return-to-calendar-btn" class="btn btn-secondary">
                Torna al Calendario
              </button>
            </div>
          </div>

          <div id="day-modal" class="modal-overlay" style="display: none">
            <div class="modal-content">
              <h2 id="modal-date-title"></h2>
              <ul id="modal-exercise-list"></ul>
              <div class="modal-actions">
                <button id="add-exercise-btn" class="btn btn-secondary">
                  Aggiungi Esercizio
                </button>
                <button id="close-day-modal-btn" class="btn">Chiudi</button>
              </div>
            </div>
          </div>

          <div id="library-modal" class="modal-overlay" style="display: none">
            <div class="modal-content">
              <h2>Libreria Esercizi</h2>
              <ul id="library-exercise-list"></ul>
              <div class="modal-actions">
                <button id="close-library-modal-btn" class="btn">Chiudi</button>
              </div>
            </div>
          </div>

          <script type="module" src="src/main.js"></script>
        </body>
      </html>
  - file: app.js
    content: "" # Svuotiamo il vecchio file, la sua logica verrà migrata
  - file: src/main.js
    content: |
      /**
       * @file main.js
       * The main entry point for the application.
       * Orchestrates all other modules.
       */
      import * as storage from './storage.js';

      /**
       * The main function to initialize the application.
       */
      function main() {
        console.log('Application Initialized.');
        console.log('Fetching all workouts from storage:', storage.getWorkouts());
        // Qui inizieremo a orchestrare gli altri moduli (UI, Calendar, etc.)
      }

      // Initialize the app once the DOM is fully loaded.
      document.addEventListener('DOMContentLoaded', main);
  - file: src/storage.js
    content: |
      /**
       * @file storage.js
       * Handles all interactions with the browser's localStorage.
       * This is the single source of truth for data persistence.
       */

      const WORKOUTS_KEY = 'mio_trainer_workouts';

      /**
       * Retrieves the entire workouts object from localStorage.
       * @returns {Object} The workouts object, or an empty object if none exists.
       */
      export function getWorkouts() {
        try {
          const workouts = localStorage.getItem(WORKOUTS_KEY);
          return workouts ? JSON.parse(workouts) : {};
        } catch (error) {
          console.error("Error reading from localStorage:", error);
          return {};
        }
      }

      /**
       * Saves the entire workouts object to localStorage.
       * @param {Object} workouts - The workouts object to save.
       */
      export function saveWorkouts(workouts) {
        try {
          localStorage.setItem(WORKOUTS_KEY, JSON.stringify(workouts));
        } catch (error) {
          console.error("Error writing to localStorage:", error);
        }
      }

      /**
       * Retrieves the list of exercises for a specific date key.
       * @param {string} dateKey - The date in 'YYYY-MM-DD' format.
       * @returns {Array} An array of exercise IDs for the given date, or an empty array.
       */
      export function getWorkoutsForDate(dateKey) {
        const workouts = getWorkouts();
        return workouts[dateKey] || [];
      }

      /**
       * Saves a list of exercises for a specific date key.
       * @param {string} dateKey - The date in 'YYYY-MM-DD' format.
       * @param {Array} exercises - An array of exercise objects to save for the given date.
       */
      export function saveWorkoutsForDate(dateKey, exercises) {
        const workouts = getWorkouts();
        workouts[dateKey] = exercises;
        saveWorkouts(workouts);
      }
  - file: .gitignore
    content: |
      # Dependencies
      /node_modules

      # Build artifacts
      /dist
      /build

      # IDE / Editor specific
      .vscode/
      .idea/
      *.suo
      *.ntvs*
      *.njsproj
      *.sln
      *.swp

      # OS specific
      .DS_Store
      Thumbs.db
commands:
  - "echo 'Vecchio app.js svuotato. Creati i nuovi file src/main.js e src/storage.js.'"
  - "echo 'Verifica la nuova struttura dei file con il comando: ls -R'"
  - "echo 'IMPORTANTE: A causa dell''uso di moduli ES6 (import/export), non puoi aprire index.html direttamente.'"
  - "echo 'Devi servirlo tramite un server locale. Se hai Python 3, usa: python3 -m http.server'"
  - "echo 'Apri il browser su http://localhost:8000 e controlla la console per il messaggio di inizializzazione.'"