commit_message: "feat(calendar): Collega la vista al layer dati e mostra sommari workout"
rationale: |
  Questo commit rende la Calendar View "data-driven" come specificato nei documenti di funzionalità e architettura.

  - È stato implementato il modulo `storage.js` per una reale persistenza dei dati su `localStorage`.
  - È stato aggiunto un file di dati fittizi (`_mockData.js`) per popolare l'applicazione al primo avvio, facilitando lo sviluppo.
  - La logica di inizializzazione in `main.js` ora orchestra il caricamento dei dati da `localStorage` e li popola nello store centrale.
  - La `CalendarView.js` è stata aggiornata per leggere lo stato degli allenamenti e renderizzare dinamicamente il conteggio degli esercizi e il pulsante "START" nelle celle corrispondenti.
patches:
  - file: src/modules/_mockData.js
    content: |
      // --- Dati di Sviluppo Fittizi ---
      // Questi dati vengono usati per popolare localStorage al primo avvio.

      // Nota: la data corrente è 30 Giugno 2025.
      // Questo allenamento è per Martedì 1 Luglio 2025.
      const MOCK_DATE_KEY = 'workout-2025-07-01';

      export const mockWorkouts = {
        [MOCK_DATE_KEY]: [
          {
            id: 'squat-1',
            type: 'exercise',
            exerciseId: 'squat',
            name: 'Squat',
            series: 3,
            reps: 10
          },
          {
            id: 'rest-1',
            type: 'rest',
            duration: 90 // secondi
          },
          {
            id: 'pushups-1',
            type: 'exercise',
            exerciseId: 'pushups',
            name: 'Push-ups',
            series: 3,
            reps: 12
          }
        ]
      };
  - file: src/modules/storage.js
    content: |
      // --- Modulo di Persistenza Dati per localStorage ---

      /**
       * Carica i dati dal localStorage e li valida.
       * @param {string} key La chiave da cui caricare.
       * @returns {object | null} I dati validati o null se non validi/presenti.
       */
      export function loadFromStorage(key) {
        try {
          const serializedData = localStorage.getItem(key);
          if (serializedData === null) {
            return null;
          }
          // Futuro: Aggiungere qui la validazione dello schema.
          return JSON.parse(serializedData);
        } catch (error) {
          console.error(`Errore nel caricare dati da localStorage per la chiave "${key}":`, error);
          return null;
        }
      }

      /**
       * Salva i dati nel localStorage.
       * @param {string} key La chiave con cui salvare.
       * @param {object} data I dati da salvare.
       */
      export function saveToStorage(key, data) {
        try {
          const serializedData = JSON.stringify(data);
          localStorage.setItem(key, serializedData);
        } catch (error) {
          console.error(`Errore nel salvare dati in localStorage per la chiave "${key}":`, error);
        }
      }
  - file: src/modules/store.js
    content: |
      // --- Centralized State Store (Single Source of Truth) ---

      function createStore() {
          let state = {
              currentView: 'calendar',
              focusedDate: new Date(),
              workouts: {}, // Qui verranno memorizzati tutti gli allenamenti caricati
          };

          const subscribers = new Set();

          function notify() {
              subscribers.forEach(callback => callback());
          }

          function dispatch(action) {
              const oldState = state;
              switch (action.type) {
                  case 'CHANGE_VIEW':
                      state = { ...state, currentView: action.payload };
                      break;

                  case 'PREV_WEEK': {
                      const newDate = new Date(state.focusedDate);
                      newDate.setDate(newDate.getDate() - 7);
                      state = { ...state, focusedDate: newDate };
                      break;
                  }

                  case 'NEXT_WEEK': {
                      const newDate = new Date(state.focusedDate);
                      newDate.setDate(newDate.getDate() + 7);
                      state = { ...state, focusedDate: newDate };
                      break;
                  }

                  case 'SET_WORKOUTS':
                      state = { ...state, workouts: action.payload };
                      break;

                  default:
                      console.warn(`Azione non riconosciuta: ${action.type}`);
                      return;
              }

              if (state !== oldState) {
                  console.log(`Action: ${action.type}`, action.payload);
                  notify();
              }
          }

          return {
              getState: () => ({ ...state }),
              subscribe: (callback) => {
                  subscribers.add(callback);
                  return () => subscribers.delete(callback);
              },
              dispatch,
          };
      }

      const store = createStore();
      export default store;
  - file: src/main.js
    content: |
      import store from './modules/store.js';
      import { init as initCalendarView } from './views/CalendarView.js';
      import { loadFromStorage, saveToStorage } from './modules/storage.js';
      import { mockWorkouts } from './modules/_mockData.js';

      const WORKOUTS_STORAGE_KEY = 'workouts';

      // Cache delle viste per performance
      const views = {
          calendar: document.getElementById('calendar-view'),
          trainer: document.getElementById('trainer-view'),
          debriefing: document.getElementById('debriefing-view'),
      };

      // --- Funzione di Inizializzazione App ---
      function initializeApp() {
        let workouts = loadFromStorage(WORKOUTS_STORAGE_KEY);

        // Se non ci sono dati in localStorage, popola con i dati mock
        if (!workouts) {
          console.log('Nessun dato trovato in localStorage. Popolamento con dati mock.');
          saveToStorage(WORKOUTS_STORAGE_KEY, mockWorkouts);
          workouts = mockWorkouts;
        }

        // Invia i dati allo store
        store.dispatch({ type: 'SET_WORKOUTS', payload: workouts });

        // Inizializza le viste
        initCalendarView(views.calendar);

        // Aggiungere qui l'inizializzazione di altre viste...
      }

      // --- Logica di Cambio Vista ---
      let currentActiveView = views.calendar;
      function handleViewChange() {
          const state = store.getState();
          const newActiveViewEl = views[state.currentView];

          if (currentActiveView !== newActiveViewEl) {
              currentActiveView.classList.remove('view--active');
              newActiveViewEl.classList.add('view--active');
              currentActiveView = newActiveViewEl;
          }
      }

      store.subscribe(handleViewChange);
      initializeApp();
      console.log('App "Mio Trainer Personale" inizializzata e dati caricati.');
  - file: src/views/CalendarView.js
    content: |
      import store from '../modules/store.js';

      // --- UTILITIES ---
      function getWeekStartDate(date) {
        const d = new Date(date);
        const day = d.getDay();
        const diff = d.getDate() - day + (day === 0 ? -6 : 1);
        return new Date(d.setDate(diff));
      }

      function formatShortDate(date) {
        return date.toLocaleDateString('it-IT', { day: 'numeric', month: 'long' });
      }

      /**
       * Formatta una data in una stringa YYYY-MM-DD.
       * @param {Date} date
       * @returns {string}
       */
      function toISODateString(date) {
          return date.getFullYear() + '-' +
                 ('0' + (date.getMonth() + 1)).slice(-2) + '-' +
                 ('0' + date.getDate()).slice(-2);
      }

      // --- MODULE ---
      export function init(element) {
        element.innerHTML = `
          <header class="calendar-header">
            <button id="prev-week-btn">&lt; Prev</button>
            <h2 id="week-title"></h2>
            <button id="next-week-btn">Next &gt;</button>
          </header>
          <div class="calendar-grid" id="calendar-grid-container"></div>
        `;

        const prevBtn = element.querySelector('#prev-week-btn');
        const nextBtn = element.querySelector('#next-week-btn');
        const weekTitle = element.querySelector('#week-title');
        const gridContainer = element.querySelector('#calendar-grid-container');

        prevBtn.addEventListener('click', () => store.dispatch({ type: 'PREV_WEEK' }));
        nextBtn.addEventListener('click', () => store.dispatch({ type: 'NEXT_WEEK' }));

        function render() {
          const { focusedDate, workouts } = store.getState();
          const weekStart = getWeekStartDate(focusedDate);
          const weekEnd = new Date(weekStart);
          weekEnd.setDate(weekEnd.getDate() + 6);

          weekTitle.textContent = `${formatShortDate(weekStart)} - ${formatShortDate(weekEnd)}`;
          gridContainer.innerHTML = '';

          for (let i = 0; i < 7; i++) {
            const dayDate = new Date(weekStart);
            dayDate.setDate(dayDate.getDate() + i);
            const dateKey = `workout-${toISODateString(dayDate)}`;
            const workoutForDay = workouts[dateKey];

            const dayCell = document.createElement('div');
            dayCell.className = 'day-cell';

            let bodyContent = '';
            if (workoutForDay && workoutForDay.length > 0) {
              const exerciseCount = workoutForDay.filter(item => item.type === 'exercise').length;
              bodyContent = `
                <div class="exercise-count">${exerciseCount} esercizi</div>
                <button class="start-btn">START</button>
              `;
            }

            dayCell.innerHTML = `
              <div class="day-cell__header">
                <span>${dayDate.toLocaleDateString('it-IT', { weekday: 'long' })}</span>
                <span>${dayDate.getDate()}</span>
              </div>
              <div class="day-cell__body">
                ${bodyContent}
              </div>
            `;
            gridContainer.appendChild(dayCell);
          }
        }
        store.subscribe(render);
        render();
      }
  - file: assets/css/style.css
    content: |
      /* --- GLOBAL STYLES & MOBILE FIRST --- */

      :root {
          --bg-color: #1a1a1d;
          --card-color: #2c2c34;
          --primary-color: #9575cd;
          --secondary-color: #4db6ac;
          --text-color: #f4f4f9;
          --text-color-muted: #aaa;
          --border-color: #40404a;
      }

      * {
          box-sizing: border-box;
          margin: 0;
          padding: 0;
      }

      body {
          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          background-color: var(--bg-color);
          color: var(--text-color);
      }

      #app-container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 1rem;
      }

      .view {
          display: none;
          width: 100%;
      }

      .view--active {
          display: block;
      }

      /* --- CALENDAR VIEW STYLES --- */

      .calendar-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 1.5rem;
      }

      .calendar-header h2 {
          font-size: 1.25rem;
          text-align: center;
      }

      .calendar-header button {
          background-color: var(--card-color);
          color: var(--text-color);
          border: 1px solid var(--border-color);
          padding: 0.5rem 1rem;
          border-radius: 6px;
          cursor: pointer;
          transition: background-color 0.2s;
      }

      .calendar-header button:hover {
          background-color: var(--primary-color);
      }

      .calendar-grid {
          display: grid;
          grid-template-columns: 1fr;
          gap: 0.5rem;
      }

      .day-cell {
          background-color: var(--card-color);
          border: 1px solid var(--border-color);
          border-radius: 8px;
          padding: 1rem;
          min-height: 150px;
          display: flex;
          flex-direction: column;
      }

      .day-cell__header {
          display: flex;
          justify-content: space-between;
          font-weight: bold;
          color: var(--text-color-muted);
          text-transform: uppercase;
          font-size: 0.8rem;
      }

      .day-cell__body {
          margin-top: 0.5rem;
          flex-grow: 1;
          display: flex;
          flex-direction: column;
          justify-content: space-between;
          align-items: flex-start;
      }

      .exercise-count {
        font-size: 0.9rem;
        color: var(--secondary-color);
      }

      .start-btn {
        background-color: var(--secondary-color);
        color: var(--bg-color);
        border: none;
        padding: 0.6rem;
        border-radius: 6px;
        cursor: pointer;
        font-weight: bold;
        text-transform: uppercase;
        width: 100%;
        margin-top: 1rem; /* Spazio tra count e bottone */
        transition: opacity 0.2s;
      }

      .start-btn:hover {
        opacity: 0.85;
      }


      /* --- TABLET/DESKTOP OVERRIDES --- */
      @media (min-width: 768px) {
          #app-container {
              padding: 2rem;
          }

          .calendar-grid {
              grid-template-columns: repeat(7, 1fr);
              gap: 1rem;
          }

          .calendar-header h2 {
            font-size: 1.5rem;
          }
      }
commands: []