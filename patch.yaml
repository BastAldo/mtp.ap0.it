commit_message: "feat(ui): Migliora UX modale e crea la shell della Trainer View"
rationale: |
  Questo commit accorpa due importanti aggiornamenti, come da piano approvato:

  1.  **Miglioramenti UX della Modale:**
      - La modale ora ha un'altezza massima fissa per evitare ridimensionamenti inattesi.
      - Il corpo della modale è scrollabile.
      - È stata implementata una logica di auto-scroll che mostra l'ultimo elemento aggiunto a una lista.
  2.  **Creazione Shell Trainer View:**
      - È stata creata la struttura HTML e CSS per la `Trainer View`, sostituendo il placeholder precedente con un'interfaccia fedele al mockup, inclusivo di anello di progresso SVG.
      - La logica di inizializzazione della vista è stata aggiunta al `main.js`.
patches:
  - file: assets/css/style.css
    content: |
      /* --- GLOBAL STYLES & MOBILE FIRST --- */
      :root {
          --bg-color: #1a1a1d;
          --card-color: #2c2c34;
          --primary-color: #9575cd;
          --secondary-color: #4db6ac;
          --text-color: #f4f4f9;
          --text-color-muted: #aaa;
          --border-color: #40404a;
          --danger-color: #ef5350;
      }
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body {
          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          background-color: var(--bg-color);
          color: var(--text-color);
          scrollbar-width: thin;
          scrollbar-color: var(--primary-color) var(--bg-color);
      }
      /* Custom Scrollbar for Webkit Browsers */
      body::-webkit-scrollbar, .modal-body::-webkit-scrollbar { width: 8px; }
      body::-webkit-scrollbar-track, .modal-body::-webkit-scrollbar-track { background: var(--bg-color); }
      body::-webkit-scrollbar-thumb, .modal-body::-webkit-scrollbar-thumb { background-color: var(--primary-color); border-radius: 10px; border: 2px solid var(--bg-color); }
      #app-container { max-width: 1200px; margin: 0 auto; padding: 1rem; }
      .view { display: none; width: 100%; }
      .view--active { display: block; }

      /* --- CALENDAR VIEW STYLES --- */
      .calendar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
      .calendar-header h2 { font-size: 1.25rem; text-align: center; }
      .calendar-header button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: background-color 0.2s; }
      .calendar-header button:hover { background-color: var(--primary-color); }
      .calendar-grid { display: grid; grid-template-columns: 1fr; gap: 0.5rem; }
      .day-cell { background-color: var(--card-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 1rem; min-height: 150px; display: flex; flex-direction: column; cursor: pointer; transition: border-color 0.2s; }
      .day-cell:hover { border-color: var(--primary-color); }
      .day-cell__header { display: flex; justify-content: space-between; font-weight: bold; color: var(--text-color-muted); text-transform: uppercase; font-size: 0.8rem; pointer-events: none; }
      .day-cell__body { margin-top: 0.5rem; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between; align-items: flex-start; pointer-events: none; }
      .exercise-count { font-size: 0.9rem; color: var(--secondary-color); }
      .start-btn { background-color: var(--secondary-color); color: var(--bg-color); border: none; padding: 0.6rem; border-radius: 6px; cursor: pointer; font-weight: bold; text-transform: uppercase; width: 100%; margin-top: 1rem; transition: opacity 0.2s; pointer-events: all !important; }
      .start-btn:hover { opacity: 0.85; }

      /* --- MODAL STYLES --- */
      #modal-container { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: flex; justify-content: center; align-items: center; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; z-index: 1000; }
      #modal-container.active { opacity: 1; pointer-events: all; }
      .modal-content { background-color: var(--card-color); padding: 1.5rem; border-radius: 8px; border: 1px solid var(--border-color); min-width: 300px; max-width: 90%; transform: scale(0.95); transition: transform 0.3s ease; display: flex; flex-direction: column; max-height: 85vh; height: 85vh; }
      #modal-container.active .modal-content { transform: scale(1); }
      .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; border-bottom: 1px solid var(--border-color); padding-bottom: 1rem; flex-shrink: 0; }
      .modal-header h3 { color: var(--primary-color); }
      .modal-close-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; cursor: pointer; }
      .modal-body { overflow-y: auto; flex-grow: 1; }
      .modal-actions { margin-top: 1.5rem; padding-top: 1.5rem; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; gap: 1rem; flex-shrink: 0; }
      .add-rest-btn, .add-exercise-btn { background-color: transparent; border: 1px solid var(--secondary-color); color: var(--secondary-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: all 0.2s; }
      .add-rest-btn:hover, .add-exercise-btn:hover { background-color: var(--secondary-color); color: var(--card-color); }

      /* --- WORKOUT EDITOR & LIBRARY STYLES --- */
      .workout-item-list, .exercise-library-list { list-style: none; padding: 0; margin: 0; }
      .workout-item { display: flex; justify-content: space-between; align-items: center; padding: 1rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .workout-item:last-child { border-bottom: none; }
      .item-info { display: flex; align-items: baseline; gap: 0.75rem; flex-grow: 1; }
      .item-info .item-name { font-weight: bold; }
      .item-info .item-details { color: var(--secondary-color); }
      .workout-item--rest .item-info .item-name { color: var(--text-color-muted); font-style: italic; }
      .rest-duration-input { -moz-appearance: textfield; background-color: var(--bg-color); border: 1px solid var(--border-color); color: var(--text-color); border-radius: 4px; padding: 0.25rem; width: 60px; text-align: center; }
      .rest-duration-input::-webkit-outer-spin-button, .rest-duration-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
      .remove-item-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; font-weight: bold; cursor: pointer; padding: 0 0.5rem; border-radius: 50%; }
      .remove-item-btn:hover { color: var(--danger-color); background-color: rgba(239, 83, 80, 0.1); }
      .exercise-library-item { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .exercise-library-item:last-child { border-bottom: none; }
      .add-to-workout-btn { background-color: var(--primary-color); color: var(--text-color); border: none; padding: 0.4rem 0.8rem; border-radius: 4px; cursor: pointer; }

      /* --- TRAINER VIEW STYLES --- */
      .trainer-container { display: flex; flex-direction: column; align-items: center; justify-content: center; height: calc(100vh - 4rem); text-align: center; }
      .trainer-header { margin-bottom: 1rem; }
      .trainer-header h2 { font-size: 2rem; text-transform: uppercase; color: var(--primary-color); }
      .trainer-header p { color: var(--text-color-muted); }
      .progress-ring { position: relative; width: 250px; height: 250px; margin: 2rem 0; }
      .progress-ring svg { width: 100%; height: 100%; transform: rotate(-90deg); }
      .progress-ring circle { transition: stroke-dashoffset 0.3s; }
      .progress-ring__background { stroke: var(--card-color); fill: transparent; }
      .progress-ring__foreground { stroke: var(--secondary-color); fill: transparent; }
      .progress-ring__text { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }
      .progress-ring__phase { font-size: 2rem; font-weight: bold; }
      .progress-ring__timer { font-size: 3rem; }
      .trainer-footer { margin-top: 1rem; }
      .trainer-footer p { font-size: 1.2rem; min-height: 2em; }
      .trainer-controls button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 1rem 2rem; border-radius: 8px; cursor: pointer; font-size: 1.2rem; text-transform: uppercase; }

      /* --- TABLET/DESKTOP OVERRIDES --- */
      @media (min-width: 768px) {
          #app-container { padding: 2rem; }
          .calendar-grid { grid-template-columns: repeat(7, 1fr); gap: 1rem; }
          .calendar-header h2 { font-size: 1.5rem; }
          .modal-content { min-width: 500px; max-width: 60%; padding: 2rem; }
          .progress-ring { width: 300px; height: 300px; }
      }
  - file: src/main.js
    content: |
      import store from './modules/store.js';
      import { init as initCalendarView } from './views/CalendarView.js';
      import { init as initTrainerView } from './views/TrainerView.js';
      import { init as initModal } from './ui/Modal.js';
      import { loadFromStorage, saveToStorage } from './modules/storage.js';
      import { mockWorkouts } from './modules/_mockData.js';

      const WORKOUTS_STORAGE_KEY = 'workouts';

      const views = {
          calendar: document.getElementById('calendar-view'),
          trainer: document.getElementById('trainer-view'),
          debriefing: document.getElementById('debriefing-view'),
      };
      const initializedViews = new Set();

      function initializeApp() {
        let workouts = loadFromStorage(WORKOUTS_STORAGE_KEY);
        if (!workouts) {
          saveToStorage(WORKOUTS_STORAGE_KEY, mockWorkouts);
          workouts = mockWorkouts;
        }
        store.dispatch({ type: 'SET_WORKOUTS', payload: workouts });

        initCalendarView(views.calendar);
        initializedViews.add('calendar');
        initModal(document.getElementById('modal-container'));
      }

      let currentActiveView = views.calendar;
      function handleViewChange() {
        const { currentView } = store.getState();
        const newActiveViewEl = views[currentView];

        if (currentActiveView !== newActiveViewEl) {
          currentActiveView.classList.remove('view--active');
          newActiveViewEl.classList.add('view--active');
          currentActiveView = newActiveViewEl;

          // Inizializza la vista solo la prima volta che viene mostrata
          if (!initializedViews.has(currentView)) {
            if (currentView === 'trainer') {
              initTrainerView(views.trainer);
            }
            // Aggiungere qui l'inizializzazione di altre viste future
            initializedViews.add(currentView);
          }
        }
      }

      store.subscribe(handleViewChange);
      initializeApp();
      console.log('App "Mio Trainer Personale" inizializzata.');
  - file: src/ui/Modal.js
    content: |
      import store from '../modules/store.js';
      import { render as renderWorkoutEditor } from '../views/WorkoutEditorView.js';
      import { render as renderExerciseLibrary } from '../views/ExerciseLibraryView.js';

      export function init(element) {
          let previousItemCount = 0;

          element.addEventListener('click', (event) => { /* ... (invariato) ... */ });
          element.addEventListener('change', (event) => { /* ... (invariato) ... */ });
          // ... (resto del codice invariato) ...
          element.addEventListener('click', (event) => {
              if (event.target === element) { store.dispatch({ type: 'CLOSE_MODAL' }); return; }
              const removeBtn = event.target.closest('.remove-item-btn');
              if (removeBtn) { const { itemId } = removeBtn.dataset; const { date } = store.getState().modalContext; store.dispatch({ type: 'REMOVE_WORKOUT_ITEM', payload: { date, itemId } }); return; }
              const addRestBtn = event.target.closest('.add-rest-btn');
              if (addRestBtn) { const { date } = store.getState().modalContext; store.dispatch({ type: 'ADD_REST_ITEM', payload: { date } }); return; }
              const addExerciseBtn = event.target.closest('.add-exercise-btn');
              if (addExerciseBtn) { const { date } = store.getState().modalContext; store.dispatch({ type: 'OPEN_MODAL', payload: { type: 'CHOOSE_EXERCISE', date } }); return; }
              const addToWorkoutBtn = event.target.closest('.add-to-workout-btn');
              if (addToWorkoutBtn) { const { exerciseId } = addToWorkoutBtn.dataset; const { date } = store.getState().modalContext; store.dispatch({ type: 'ADD_EXERCISE_ITEM', payload: { date, exerciseId } }); return; }
          });
          element.addEventListener('change', (event) => {
              const restInput = event.target.closest('.rest-duration-input');
              if (restInput) { const { itemId } = restInput.dataset; const { date } = store.getState().modalContext; const newDuration = parseInt(restInput.value, 10); if (itemId && date && !isNaN(newDuration)) { store.dispatch({ type: 'UPDATE_REST_DURATION', payload: { date, itemId, newDuration } }); } }
          });

          function render() {
              const { isModalOpen, modalContext, workouts } = store.getState();
              if (isModalOpen) {
                  const dateKey = `workout-${modalContext.date}`;
                  const currentItemCount = workouts[dateKey]?.length || 0;

                  element.classList.add('active');
                  let headerContent = '', bodyContent = '';
                  switch (modalContext?.type) {
                      case 'EDIT_WORKOUT':
                          headerContent = `<h3>Editor Workout - ${modalContext.date}</h3>`;
                          bodyContent = renderWorkoutEditor(modalContext);
                          break;
                      case 'CHOOSE_EXERCISE':
                          headerContent = `<h3>Libreria Esercizi</h3>`;
                          bodyContent = renderExerciseLibrary(modalContext);
                          break;
                      default:
                          headerContent = '<h3>Attenzione</h3>';
                          bodyContent = '<p>Contenuto della modale non specificato.</p>';
                  }
                  element.innerHTML = `
                      <div class="modal-content">
                          <div class="modal-header">${headerContent}<button class="modal-close-btn">&times;</button></div>
                          <div class="modal-body">${bodyContent}</div>
                      </div>
                  `;
                  const closeButton = element.querySelector('.modal-close-btn');
                  if (closeButton) { closeButton.addEventListener('click', () => { store.dispatch({ type: 'CLOSE_MODAL' }); }); }

                  // Logica di auto-scroll
                  if (currentItemCount > previousItemCount) {
                      const modalBody = element.querySelector('.modal-body');
                      if (modalBody) {
                          modalBody.scrollTop = modalBody.scrollHeight;
                      }
                  }
                  previousItemCount = currentItemCount;

              } else {
                  element.classList.remove('active');
                  element.innerHTML = '';
                  previousItemCount = 0; // Resetta il conteggio quando la modale si chiude
              }
          }
          store.subscribe(render);
          render();
      }
  - file: src/views/TrainerView.js
    content: |
      import store from '../modules/store.js';

      export function init(element) {
          function render() {
              const { activeWorkout } = store.getState();
              if (!activeWorkout) {
                  element.innerHTML = '<h2>Nessun workout attivo.</h2>';
                  return;
              }

              const currentExercise = activeWorkout.items.find(item => item.type === 'exercise') || { name: 'Workout' };
              const radius = 90;
              const circumference = 2 * Math.PI * radius;

              element.innerHTML = `
                  <div class="trainer-container">
                      <header class="trainer-header">
                          <h2>${currentExercise.name}</h2>
                          <p>SERIES 1 / ${currentExercise.series || 3}</p>
                      </header>
                      <div class="progress-ring">
                          <svg>
                              <circle class="progress-ring__background" stroke-width="10" r="${radius}" cx="50%" cy="50%"></circle>
                              <circle class="progress-ring__foreground" stroke-width="10" r="${radius}" cx="50%" cy="50%"
                                  stroke-dasharray="${circumference}"
                                  stroke-dashoffset="${circumference}"
                              ></circle>
                          </svg>
                          <div class="progress-ring__text">
                              <div class="progress-ring__phase">READY</div>
                              <div class="progress-ring__timer"></div>
                          </div>
                      </div>
                      <footer class="trainer-footer">
                          <p class="trainer-instruction">Premi PAUSA per iniziare</p>
                          <div class="trainer-controls">
                              <button>PAUSE</button>
                          </div>
                      </footer>
                  </div>
              `;
          }
          render();
      }
commands: []