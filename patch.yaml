commit_message: "fix(trainer): Centralizzare la logica del timer nello store per risolvere i bug critici"
rationale: |
  Questo commit risolve due bug critici documentati in `docs/05_STATUS.md` attraverso un refactoring architetturale, in linea con ADR 003.

  1.  **Risolto il Loop Infinito**: La logica del timer (`setInterval`) è stata spostata da `TrainerView.js` e centralizzata completamente all'interno di `store.js`. La view ora è "stupida": si limita a renderizzare lo stato fornito dallo store e a inviare azioni utente, eliminando il loop ricorsivo che causava il crash "Maximum call stack size exceeded".

  2.  **Risolto il Bug di Terminazione**: L'azione di click sul pulsante "Termina" ora invia correttamente un'azione `PAUSE_TRAINER` prima di aprire il modale di conferma, garantendo che il timer si fermi come previsto.

  Questo refactoring rende il flusso del trainer più robusto, prevedibile e allineato ai principi architetturali del progetto.
patches:
  - file: src/modules/store.js
    content: |
      import { saveToStorage } from './storage.js';
      import { getExerciseById } from './exerciseRepository.js';

      const WORKOUTS_STORAGE_KEY = 'workouts';
      const TICK_INTERVAL = 100; // ms

      const cloneWorkouts = (workouts) => JSON.parse(JSON.stringify(workouts));

      function createStore() {
        let timerInterval = null;

        let state = {
          currentView: 'calendar',
          focusedDate: new Date(),
          workouts: {},
          isModalOpen: false,
          modalContext: null,
          notice: null,
          activeWorkout: null,
          completedWorkout: null,
          trainerState: 'idle',
          trainerContext: {},
        };

        const subscribers = new Set();
        function notify() { subscribers.forEach(callback => callback()); }

        function logState(actionType, state) {
            if (actionType.startsWith('@@')) return;
            const { activeWorkout, trainerState, trainerContext } = state;
            if (!activeWorkout) return;
            const currentItem = activeWorkout.items[trainerContext.itemIndex];
            const exerciseName = currentItem?.name || 'Riposo';
            const series = `${trainerContext.currentSeries || '-'}/${currentItem?.series || '-'}`;
            const reps = `${trainerContext.currentRep || '-'}/${currentItem?.reps || '-'}`;
            let status = trainerState.toUpperCase();
            if (trainerState === 'announcing' || trainerState === 'action') { status += ` (${trainerContext.currentPhase || 'N/A'})`; }
            const logString = `Esercizio: ${exerciseName} | Serie: ${series} | Rep: ${reps} | Stato: ${status}`;
            console.log(`%c[${actionType}]`, 'color: #88aaff; font-weight: bold;', logString);
        }

        // --- Timer Logic ---
        const stopTimer = () => {
          if (timerInterval) {
            clearInterval(timerInterval);
            timerInterval = null;
          }
        };

        const startTimer = () => {
          stopTimer();
          timerInterval = setInterval(() => {
            dispatch({ type: 'TIMER_TICK' });
          }, TICK_INTERVAL);
        };

        const dispatch = (action) => {
          const oldState = { ...state };
          let newState = { ...state };
          let shouldNotify = true;

          switch (action.type) {
            case 'CHANGE_VIEW': newState = { ...state, currentView: action.payload }; break;
            case 'PREV_WEEK': { const d=new Date(state.focusedDate); d.setDate(d.getDate()-7); newState={...state, focusedDate:d}; break; }
            case 'NEXT_WEEK': { const d=new Date(state.focusedDate); d.setDate(d.getDate()+7); newState={...state, focusedDate:d}; break; }
            case 'SET_WORKOUTS': newState = { ...state, workouts: action.payload }; break;
            case 'OPEN_MODAL': newState = { ...state, isModalOpen: true, modalContext: action.payload }; break;
            case 'CLOSE_MODAL': newState = { ...state, isModalOpen: false, modalContext: null }; break;
            case 'SHOW_NOTICE': newState = { ...state, notice: { message: action.payload.message, id: Date.now() } }; break;
            case 'ADD_EXERCISE_ITEM': {
                const { date, exerciseId } = action.payload;
                const dateKey = `workout-${date}`;
                const exercise = getExerciseById(exerciseId);
                if (!exercise) break;
                const newItem = { ...exercise, id: `item-${Date.now()}`, type: exercise.type || 'exercise', exerciseId: exercise.id };
                const newWorkouts = cloneWorkouts(state.workouts);
                const dayWorkout = newWorkouts[dateKey] || [];
                dayWorkout.push(newItem);
                newWorkouts[dateKey] = dayWorkout;
                newState = { ...state, workouts: newWorkouts, modalContext: { type: 'EDIT_WORKOUT', date } };
                break;
            }
            case 'ADD_REST_ITEM': {
                const { date } = action.payload;
                const dateKey = `workout-${date}`;
                const newItem = { id: `item-${Date.now()}`, type: 'rest', duration: 60 };
                const newWorkouts = cloneWorkouts(state.workouts);
                const dayWorkout = newWorkouts[dateKey] || [];
                dayWorkout.push(newItem);
                newWorkouts[dateKey] = dayWorkout;
                newState = { ...state, workouts: newWorkouts };
                break;
            }
            case 'REMOVE_WORKOUT_ITEM': {
                const { date, itemId } = action.payload;
                const dateKey = `workout-${date}`;
                const newWorkouts = cloneWorkouts(state.workouts);
                newWorkouts[dateKey] = (newWorkouts[dateKey] || []).filter(item => item.id !== itemId);
                newState = { ...state, workouts: newWorkouts };
                break;
            }
            case 'UPDATE_REST_DURATION': {
                const { date, itemId, newDuration } = action.payload;
                const dateKey = `workout-${date}`;
                const newWorkouts = cloneWorkouts(state.workouts);
                const dayWorkout = newWorkouts[dateKey] || [];
                const itemIndex = dayWorkout.findIndex(item => item.id === itemId);
                if (itemIndex > -1 && dayWorkout[itemIndex].type === 'rest') {
                    dayWorkout[itemIndex].duration = newDuration;
                    newWorkouts[dateKey] = dayWorkout;
                    newState = { ...state, workouts: newWorkouts };
                }
                break;
            }
            case 'REORDER_WORKOUT_ITEMS': {
                const { date, draggedItemId, targetItemId } = action.payload;
                const dateKey = `workout-${date}`;
                const newWorkouts = cloneWorkouts(state.workouts);
                const items = newWorkouts[dateKey] || [];
                const draggedIndex = items.findIndex(item => item.id === draggedItemId);
                const targetIndex = items.findIndex(item => item.id === targetItemId);
                if (draggedIndex > -1 && targetIndex > -1) {
                    const [draggedItem] = items.splice(draggedIndex, 1);
                    items.splice(targetIndex, 0, draggedItem);
                    newWorkouts[dateKey] = items;
                    newState = { ...state, workouts: newWorkouts };
                }
                break;
            }
            case 'START_WORKOUT': {
              const { date } = action.payload;
              const dateKey = `workout-${date}`;
              const workoutItems = state.workouts[dateKey];
              if (!workoutItems || workoutItems.length === 0) break;
              newState = {
                ...state,
                currentView: 'trainer',
                activeWorkout: { date, items: workoutItems, completed: false, fullPlan: workoutItems },
                completedWorkout: null,
                trainerState: 'ready',
                trainerContext: { itemIndex: 0, currentSeries: 1, currentRep: 1, currentPhaseIndex: 0, duration: 0, remaining: 0 }
              };
              break;
            }
            case 'FINISH_WORKOUT': {
              stopTimer();
              newState = { ...state, currentView: 'debriefing', completedWorkout: { ...state.activeWorkout, completed: true }, activeWorkout: null, trainerState: 'idle', trainerContext: {} };
              break;
            }
            case 'TERMINATE_WORKOUT': {
              stopTimer();
              const { activeWorkout, trainerContext } = state;
              const partialWorkout = { date: activeWorkout.date, fullPlan: activeWorkout.fullPlan, completed: false, terminationPoint: trainerContext };
              newState = { ...state, currentView: 'debriefing', completedWorkout: partialWorkout, activeWorkout: null, trainerState: 'idle', trainerContext: {} };
              break;
            }
            case 'SET_TRAINER_STATE': {
                const nextTrainerState = action.payload;
                const { activeWorkout, trainerContext } = state;
                const currentItem = activeWorkout.items[trainerContext.itemIndex];
                let duration = 0;

                switch(nextTrainerState) {
                    case 'preparing': duration = 3000; break;
                    case 'announcing': duration = 750; break;
                    case 'action':
                        if (currentItem.type === 'time') { duration = (currentItem.duration || 10) * 1000; }
                        else { const tempo = currentItem.tempo || {}; duration = (tempo[trainerContext.currentPhase] || 1) * 1000; }
                        break;
                    case 'rest':
                        duration = (currentItem.duration || 60) * 1000;
                        break;
                }
                newState = { ...state, trainerState: nextTrainerState, trainerContext: { ...state.trainerContext, duration, remaining: duration, stateBeforePause: null } };
                if (duration > 0) startTimer();
                break;
            }
            case 'PAUSE_TRAINER': {
              if (['paused', 'ready', 'finished'].includes(state.trainerState)) break;
              stopTimer();
              newState = { ...state, trainerState: 'paused', trainerContext: { ...state.trainerContext, stateBeforePause: state.trainerState } };
              break;
            }
            case 'RESUME_TRAINER': {
              if (state.trainerState !== 'paused') break;
              newState = { ...state, trainerState: state.trainerContext.stateBeforePause };
              startTimer();
              break;
            }
            case 'TIMER_TICK': {
              if (state.trainerState === 'paused') { shouldNotify = false; break; }
              const newRemaining = state.trainerContext.remaining - TICK_INTERVAL;
              if (newRemaining <= 0) {
                stopTimer();
                dispatch({ type: 'TIMER_COMPLETE' });
              } else {
                newState = { ...state, trainerContext: { ...state.trainerContext, remaining: newRemaining } };
              }
              break;
            }
            case 'TIMER_COMPLETE': {
              if (!state.activeWorkout) return;
              const { trainerState, activeWorkout, trainerContext } = state;
              const currentItem = activeWorkout.items[trainerContext.itemIndex];

              const advanceToNextItem = () => {
                if (trainerContext.itemIndex < activeWorkout.items.length - 1) {
                  const nextItemIndex = trainerContext.itemIndex + 1;
                  const nextItem = activeWorkout.items[nextItemIndex];
                  const newContext = { itemIndex: nextItemIndex, currentSeries: 1, currentRep: 1, currentPhaseIndex: 0 };
                  const newState = nextItem.type === 'rest' ? 'rest' : 'announcing';
                  if (nextItem.type !== 'rest') {
                      newContext.currentPhase = nextItem.type === 'time' ? 'Esegui' : (Object.keys(nextItem.tempo || {})[0] || 'up');
                  }
                  return { newState, newContext };
                }
                return null;
              };

              let nextState = trainerState;
              let nextContext = { ...trainerContext };

              switch (trainerState) {
                case 'preparing': {
                  const firstItem = activeWorkout.items[0];
                  if (firstItem.type === 'rest') { nextState = 'rest'; }
                  else {
                      nextState = 'announcing';
                      if (firstItem.type === 'time') { nextContext.currentPhase = 'Esegui'; }
                      else { const tempo = firstItem.tempo || {}; nextContext.currentPhase = Object.keys(tempo)[0] || 'up'; }
                  }
                  break;
                }
                case 'announcing': nextState = 'action'; break;
                case 'action': {
                  if (currentItem.type === 'exercise') {
                    const tempo = currentItem.tempo || {};
                    const phases = Object.keys(tempo);
                    const nextPhaseIndex = trainerContext.currentPhaseIndex + 1;
                    if (nextPhaseIndex < phases.length) {
                      nextState = 'announcing';
                      nextContext.currentPhaseIndex = nextPhaseIndex;
                      nextContext.currentPhase = phases[nextPhaseIndex];
                    } else {
                      nextContext.currentPhaseIndex = 0;
                      if (trainerContext.currentRep < currentItem.reps) {
                        nextContext.currentRep++;
                        nextState = 'announcing';
                        nextContext.currentPhase = phases[0] || 'up';
                      } else if (trainerContext.currentSeries < currentItem.series) {
                        nextContext.currentSeries++;
                        nextContext.currentRep = 1;
                        nextState = 'announcing';
                        nextContext.currentPhase = phases[0] || 'up';
                      } else {
                        const advance = advanceToNextItem();
                        if (advance) { nextState = advance.newState; nextContext = { ...nextContext, ...advance.newContext }; }
                        else { nextState = 'finished'; }
                      }
                    }
                  } else if (currentItem.type === 'time') {
                      if (trainerContext.currentSeries < currentItem.series) {
                          nextContext.currentSeries++;
                          nextState = 'announcing';
                          nextContext.currentPhase = 'Esegui';
                      } else {
                          const advance = advanceToNextItem();
                          if (advance) { nextState = advance.newState; nextContext = { ...nextContext, ...advance.newContext }; }
                          else { nextState = 'finished'; }
                      }
                  }
                  break;
                }
                case 'rest': {
                  const advance = advanceToNextItem();
                  if (advance) { nextState = advance.newState; nextContext = { ...nextContext, ...advance.newContext }; }
                  else { nextState = 'finished'; }
                  break;
                }
              }
              // Immediately dispatch the next state change
              dispatch({ type: 'SET_TRAINER_STATE', payload: nextState });
              newState = { ...state, trainerContext: nextContext };
              break;
            }
            default:
              action.type = '@@UNKNOWN';
              shouldNotify = false;
              break;
          }

          state = newState;
          if (shouldNotify && state !== oldState) {
            logState(action.type, state);
            if (state.workouts !== oldState.workouts) {
              saveToStorage(WORKOUTS_STORAGE_KEY, state.workouts);
            }
            notify();
          }
        };

        return {
          getState: () => ({ ...state }),
          subscribe: (callback) => { subscribers.add(callback); return () => subscribers.delete(callback); },
          dispatch,
        };
      }
      const store = createStore();
      export default store;
  - file: src/views/TrainerView.js
    content: |
      import store from '../modules/store.js';

      function render(element) {
          const { activeWorkout, trainerState, trainerContext } = store.getState();
          if (!activeWorkout) {
              element.innerHTML = '<h2>Nessun workout attivo.</h2>';
              return;
          }

          const currentItem = activeWorkout.items[trainerContext.itemIndex];
          const radius = 90;
          const circumference = 2 * Math.PI * radius;

          let phaseText = '', instructionText = '', buttonText = '', timerText = '', phaseClass = '';
          let ringOffset = circumference;
          const isExercise = currentItem.type === 'exercise' || currentItem.type === 'time';
          let terminateButtonHidden = trainerState === 'finished' || trainerState === 'ready';

          const { duration, remaining } = trainerContext;
          if (duration > 0) {
              const progress = (duration - remaining) / duration;
              ringOffset = circumference * (1 - progress);
          }

          switch (trainerState) {
              case 'ready':
                  phaseText = 'PRONTO'; instructionText = `Premi INIZIA per cominciare`; buttonText = 'INIZIA';
                  break;
              case 'preparing':
                  phaseText = 'PREPARATI'; instructionText = 'Inizia il movimento...'; buttonText = 'PAUSA'; timerText = Math.ceil(remaining / 1000);
                  break;
              case 'rest':
                  phaseText = 'RIPOSO'; instructionText = 'Recupera'; buttonText = 'PAUSA'; timerText = Math.ceil(remaining / 1000);
                  break;
              case 'announcing':
                  phaseText = trainerContext.currentPhase?.toUpperCase() || ''; instructionText = `Prossima fase: ${phaseText}`; buttonText = 'PAUSA'; phaseClass = 'is-flashing';
                  break;
              case 'action':
                  phaseText = trainerContext.currentPhase?.toUpperCase() || ''; instructionText = 'Esegui il movimento'; buttonText = 'PAUSA'; timerText = Math.ceil(remaining / 1000);
                  break;
              case 'paused':
                  const prevState = trainerContext.stateBeforePause;
                  if(prevState === 'preparing') { phaseText = 'PREPARATI'; }
                  else if(prevState === 'rest') { phaseText = 'RIPOSO'; }
                  else if(prevState === 'announcing' || prevState === 'action') {
                      phaseText = trainerContext.currentPhase?.toUpperCase() || '';
                      if (prevState === 'announcing') { phaseClass = 'is-flashing'; }
                  }
                  instructionText = 'Pausa'; buttonText = 'RIPRENDI';
                  if(prevState !== 'announcing') { timerText = Math.ceil(remaining / 1000); }
                  break;
              case 'finished':
                  phaseText = 'FINE'; instructionText = 'Workout completato!'; buttonText = 'DEBRIEFING';
                  break;
              default:
                  phaseText = 'IDLE'; instructionText = 'Stato non riconosciuto'; buttonText = 'RESET';
          }

          const headerTitle = currentItem.name || 'Riposo';
          const seriesText = isExercise ? `SERIE ${trainerContext.currentSeries} / ${currentItem.series || 1}` : '';
          const repsText = currentItem.type === 'exercise' ? `REP ${trainerContext.currentRep} / ${currentItem.reps || 1}` : '';

          element.innerHTML = `
              <div class="trainer-container">
                  <header class="trainer-header">
                      <h2>${headerTitle}</h2>
                      <p>${seriesText} ${repsText ? `| ${repsText}` : ''}</p>
                  </header>
                  <div class="progress-ring">
                      <svg>
                          <circle class="progress-ring__background" stroke-width="10" r="${radius}" cx="50%" cy="50%"></circle>
                          <circle class="progress-ring__foreground" style="stroke-dashoffset: ${ringOffset};" stroke-width="10" r="${radius}" cx="50%" cy="50%" stroke-dasharray="${circumference}"></circle>
                      </svg>
                      <div class="progress-ring__text">
                          <div class="progress-ring__phase ${phaseClass}">${phaseText}</div>
                          <div class="progress-ring__timer">${timerText}</div>
                      </div>
                  </div>
                  <footer class="trainer-footer">
                      <p class="trainer-instruction">${instructionText}</p>
                      <div class="trainer-controls">
                          <button class="trainer-main-btn">${buttonText}</button>
                          <button class="trainer-terminate-btn" ${terminateButtonHidden ? 'hidden' : ''}>Termina</button>
                      </div>
                  </footer>
              </div>
          `;
      }

      export function init(element) {
          element.addEventListener('click', (event) => {
              const mainButton = event.target.closest('.trainer-main-btn');
              const terminateButton = event.target.closest('.trainer-terminate-btn');

              if (terminateButton) {
                  store.dispatch({ type: 'PAUSE_TRAINER' });
                  store.dispatch({ type: 'OPEN_MODAL', payload: { type: 'CONFIRM_TERMINATION' } });
                  return;
              }

              if (!mainButton) return;

              const { trainerState } = store.getState();
              switch (trainerState) {
                  case 'ready':
                      store.dispatch({ type: 'SET_TRAINER_STATE', payload: 'preparing' });
                      break;
                  case 'paused':
                      store.dispatch({ type: 'RESUME_TRAINER' });
                      break;
                  case 'finished':
                      store.dispatch({ type: 'FINISH_WORKOUT' });
                      break;
                  case 'preparing':
                  case 'action':
                  case 'rest':
                  case 'announcing':
                      store.dispatch({ type: 'PAUSE_TRAINER' });
                      break;
              }
          });

          store.subscribe(() => {
              if(element.classList.contains('view--active')) {
                  render(element);
              }
          });

          render(element);
      }
commands:
  - "echo 'Bug critici risolti. La logica del trainer è ora centralizzata e stabile.'"