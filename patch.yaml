commit_message: "feat(core): Attiva il pulsante START e personalizza le scrollbar"
rationale: |
  Questo commit accorpa due modifiche per migliorare l'efficienza:

  1.  **Stile Scrollbar:** È stata aggiunta una scrollbar personalizzata per le liste lunghe, migliorando la coerenza estetica dell'interfaccia.
  2.  **Attivazione Pulsante START:** Il pulsante "START" nella vista Calendario è ora funzionale. Invia una nuova azione (`START_WORKOUT`) che cambia la vista a `Trainer` e imposta il workout attivo nello store, preparando il terreno per l'implementazione della logica del trainer.
patches:
  - file: assets/css/style.css
    content: |
      /* --- GLOBAL STYLES & MOBILE FIRST --- */
      :root {
          --bg-color: #1a1a1d;
          --card-color: #2c2c34;
          --primary-color: #9575cd;
          --secondary-color: #4db6ac;
          --text-color: #f4f4f9;
          --text-color-muted: #aaa;
          --border-color: #40404a;
          --danger-color: #ef5350;
      }
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body {
          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          background-color: var(--bg-color);
          color: var(--text-color);
          scrollbar-width: thin;
          scrollbar-color: var(--primary-color) var(--bg-color);
      }
      /* Custom Scrollbar for Webkit Browsers */
      body::-webkit-scrollbar { width: 8px; }
      body::-webkit-scrollbar-track { background: var(--bg-color); }
      body::-webkit-scrollbar-thumb { background-color: var(--primary-color); border-radius: 10px; border: 2px solid var(--bg-color); }
      #app-container { max-width: 1200px; margin: 0 auto; padding: 1rem; }
      .view { display: none; width: 100%; }
      .view--active { display: block; }

      /* --- CALENDAR VIEW STYLES --- */
      .calendar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
      .calendar-header h2 { font-size: 1.25rem; text-align: center; }
      .calendar-header button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: background-color 0.2s; }
      .calendar-header button:hover { background-color: var(--primary-color); }
      .calendar-grid { display: grid; grid-template-columns: 1fr; gap: 0.5rem; }
      .day-cell { background-color: var(--card-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 1rem; min-height: 150px; display: flex; flex-direction: column; cursor: pointer; transition: border-color 0.2s; }
      .day-cell:hover { border-color: var(--primary-color); }
      .day-cell__header { display: flex; justify-content: space-between; font-weight: bold; color: var(--text-color-muted); text-transform: uppercase; font-size: 0.8rem; pointer-events: none; }
      .day-cell__body { margin-top: 0.5rem; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between; align-items: flex-start; pointer-events: none; }
      .exercise-count { font-size: 0.9rem; color: var(--secondary-color); }
      .start-btn { background-color: var(--secondary-color); color: var(--bg-color); border: none; padding: 0.6rem; border-radius: 6px; cursor: pointer; font-weight: bold; text-transform: uppercase; width: 100%; margin-top: 1rem; transition: opacity 0.2s; pointer-events: all !important; }
      .start-btn:hover { opacity: 0.85; }

      /* --- MODAL STYLES --- */
      #modal-container { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: flex; justify-content: center; align-items: center; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; z-index: 1000; }
      #modal-container.active { opacity: 1; pointer-events: all; }
      .modal-content { background-color: var(--card-color); padding: 1.5rem; border-radius: 8px; border: 1px solid var(--border-color); min-width: 300px; max-width: 90%; transform: scale(0.95); transition: transform 0.3s ease; display: flex; flex-direction: column; max-height: 80vh; }
      #modal-container.active .modal-content { transform: scale(1); }
      .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; border-bottom: 1px solid var(--border-color); padding-bottom: 1rem; }
      .modal-header h3 { color: var(--primary-color); }
      .modal-close-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; cursor: pointer; }
      .modal-body { overflow-y: auto; }
      .modal-actions { margin-top: 1.5rem; padding-top: 1.5rem; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; gap: 1rem; }
      .add-rest-btn, .add-exercise-btn { background-color: transparent; border: 1px solid var(--secondary-color); color: var(--secondary-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: all 0.2s; }
      .add-rest-btn:hover, .add-exercise-btn:hover { background-color: var(--secondary-color); color: var(--card-color); }

      /* --- WORKOUT EDITOR STYLES --- */
      .workout-item-list, .exercise-library-list { list-style: none; padding: 0; margin: 0; }
      .workout-item { display: flex; justify-content: space-between; align-items: center; padding: 1rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .workout-item:last-child { border-bottom: none; }
      .item-info { display: flex; align-items: baseline; gap: 0.75rem; flex-grow: 1; }
      .item-info .item-name { font-weight: bold; }
      .item-info .item-details { color: var(--secondary-color); }
      .workout-item--rest .item-info .item-name { color: var(--text-color-muted); font-style: italic; }
      .rest-duration-input { -moz-appearance: textfield; background-color: var(--bg-color); border: 1px solid var(--border-color); color: var(--text-color); border-radius: 4px; padding: 0.25rem; width: 60px; text-align: center; }
      .rest-duration-input::-webkit-outer-spin-button, .rest-duration-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
      .remove-item-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; font-weight: bold; cursor: pointer; padding: 0 0.5rem; border-radius: 50%; }
      .remove-item-btn:hover { color: var(--danger-color); background-color: rgba(239, 83, 80, 0.1); }
      .exercise-library-item { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .exercise-library-item:last-child { border-bottom: none; }
      .add-to-workout-btn { background-color: var(--primary-color); color: var(--text-color); border: none; padding: 0.4rem 0.8rem; border-radius: 4px; cursor: pointer; }

      /* --- TABLET/DESKTOP OVERRIDES --- */
      @media (min-width: 768px) {
          #app-container { padding: 2rem; }
          .calendar-grid { grid-template-columns: repeat(7, 1fr); gap: 1rem; }
          .calendar-header h2 { font-size: 1.5rem; }
          .modal-content { min-width: 500px; max-width: 60%; padding: 2rem; }
      }
  - file: src/modules/store.js
    content: |
      import { saveToStorage } from './storage.js';
      import { getExerciseById } from './exerciseRepository.js';

      const WORKOUTS_STORAGE_KEY = 'workouts';

      function createStore() {
        let state = {
          currentView: 'calendar',
          focusedDate: new Date(),
          workouts: {},
          isModalOpen: false,
          modalContext: null,
          activeWorkout: null, // Contiene i dati del workout in esecuzione
        };

        const subscribers = new Set();
        function notify() { subscribers.forEach(callback => callback()); }

        function dispatch(action) {
          const oldState = state;
          switch (action.type) {
            case 'CHANGE_VIEW': state = { ...state, currentView: action.payload }; break;
            case 'PREV_WEEK': { const d=new Date(state.focusedDate); d.setDate(d.getDate()-7); state={...state, focusedDate:d}; break; }
            case 'NEXT_WEEK': { const d=new Date(state.focusedDate); d.setDate(d.getDate()+7); state={...state, focusedDate:d}; break; }
            case 'SET_WORKOUTS': state = { ...state, workouts: action.payload }; break;
            case 'OPEN_MODAL': state = { ...state, isModalOpen: true, modalContext: action.payload }; break;
            case 'CLOSE_MODAL': state = { ...state, isModalOpen: false, modalContext: null }; break;
            case 'REMOVE_WORKOUT_ITEM': {
              const { date, itemId } = action.payload;
              const dateKey = `workout-${date}`;
              if (!state.workouts[dateKey]) break;
              const newWorkoutDay = state.workouts[dateKey].filter(item => item.id !== itemId);
              state = { ...state, workouts: { ...state.workouts, [dateKey]: newWorkoutDay } };
              break;
            }
            case 'UPDATE_REST_DURATION': {
              const { date, itemId, newDuration } = action.payload;
              const dateKey = `workout-${date}`;
              if (!state.workouts[dateKey]) break;
              const newWorkoutDay = state.workouts[dateKey].map(item => item.id === itemId ? { ...item, duration: newDuration } : item);
              state = { ...state, workouts: { ...state.workouts, [dateKey]: newWorkoutDay } };
              break;
            }
            case 'ADD_REST_ITEM': {
              const { date } = action.payload;
              const dateKey = `workout-${date}`;
              const newRestItem = { id: `rest-${Date.now()}`, type: 'rest', duration: 60 };
              const currentItems = state.workouts[dateKey] || [];
              const newWorkoutDay = [...currentItems, newRestItem];
              state = { ...state, workouts: { ...state.workouts, [dateKey]: newWorkoutDay } };
              break;
            }
            case 'ADD_EXERCISE_ITEM': {
              const { date, exerciseId } = action.payload;
              const exerciseTemplate = getExerciseById(exerciseId);
              if (!exerciseTemplate) break;
              const newExerciseItem = { ...exerciseTemplate, id: `ex-${Date.now()}`, type: exerciseTemplate.type || 'exercise', };
              const dateKey = `workout-${date}`;
              const currentItems = state.workouts[dateKey] || [];
              const newWorkoutDay = [...currentItems, newExerciseItem];
              state = { ...state, workouts: { ...state.workouts, [dateKey]: newWorkoutDay }, modalContext: { type: 'EDIT_WORKOUT', date }, };
              break;
            }
            case 'START_WORKOUT': {
              const { date } = action.payload;
              const dateKey = `workout-${date}`;
              const workoutItems = state.workouts[dateKey];
              if (!workoutItems || workoutItems.length === 0) break;
              state = { ...state, currentView: 'trainer', activeWorkout: { date, items: workoutItems } };
              break;
            }
            default:
              console.warn(`Azione non riconosciuta: ${action.type}`);
              return;
          }
          if (state !== oldState) {
            console.log(`Action: ${action.type}`, action.payload);
            if (state.workouts !== oldState.workouts) {
              saveToStorage(WORKOUTS_STORAGE_KEY, state.workouts);
              console.log('Workouts salvati in localStorage.');
            }
            notify();
          }
        }
        return {
          getState: () => ({ ...state }),
          subscribe: (callback) => { subscribers.add(callback); return () => subscribers.delete(callback); },
          dispatch,
        };
      }
      const store = createStore();
      export default store;
  - file: src/views/CalendarView.js
    content: |
      import store from '../modules/store.js';

      function toISODateString(date) {
          return date.getFullYear() + '-' +
                 ('0' + (date.getMonth() + 1)).slice(-2) + '-' +
                 ('0' + date.getDate()).slice(-2);
      }
      function getWeekStartDate(date) { const d = new Date(date); const day = d.getDay(); const diff = d.getDate() - day + (day === 0 ? -6 : 1); return new Date(d.setDate(diff)); }
      function formatShortDate(date) { return date.toLocaleDateString('it-IT', { day: 'numeric', month: 'long' }); }

      export function init(element) {
        element.innerHTML = `
          <header class="calendar-header">
            <button id="prev-week-btn">&lt; Prev</button>
            <h2 id="week-title"></h2>
            <button id="next-week-btn">Next &gt;</button>
          </header>
          <div class="calendar-grid" id="calendar-grid-container"></div>
        `;

        const prevBtn = element.querySelector('#prev-week-btn');
        const nextBtn = element.querySelector('#next-week-btn');
        const weekTitle = element.querySelector('#week-title');
        const gridContainer = element.querySelector('#calendar-grid-container');

        prevBtn.addEventListener('click', () => store.dispatch({ type: 'PREV_WEEK' }));
        nextBtn.addEventListener('click', () => store.dispatch({ type: 'NEXT_WEEK' }));

        gridContainer.addEventListener('click', (event) => {
          const dayCell = event.target.closest('.day-cell');
          if (!dayCell) return;

          const startButton = event.target.closest('.start-btn');
          if (startButton) {
            const date = dayCell.dataset.date;
            store.dispatch({ type: 'START_WORKOUT', payload: { date } });
            return;
          }

          const date = dayCell.dataset.date;
          store.dispatch({ type: 'OPEN_MODAL', payload: { type: 'EDIT_WORKOUT', date } });
        });

        function render() {
          const { focusedDate, workouts } = store.getState();
          const weekStart = getWeekStartDate(focusedDate);
          const weekEnd = new Date(weekStart); weekEnd.setDate(weekEnd.getDate() + 6);
          weekTitle.textContent = `${formatShortDate(weekStart)} - ${formatShortDate(weekEnd)}`;
          gridContainer.innerHTML = '';

          for (let i = 0; i < 7; i++) {
            const dayDate = new Date(weekStart);
            dayDate.setDate(dayDate.getDate() + i);
            const isoDate = toISODateString(dayDate);
            const dateKey = `workout-${isoDate}`;
            const workoutForDay = workouts[dateKey];

            const dayCell = document.createElement('div');
            dayCell.className = 'day-cell';
            dayCell.dataset.date = isoDate;

            let bodyContent = '';
            if (workoutForDay?.length > 0) {
              const exerciseCount = workoutForDay.filter(item => item.type === 'exercise').length;
              bodyContent = `<div class="exercise-count">${exerciseCount} esercizi</div><button class="start-btn">START</button>`;
            }
            dayCell.innerHTML = `<div class="day-cell__header"><span>${dayDate.toLocaleDateString('it-IT', { weekday: 'long' })}</span><span>${dayDate.getDate()}</span></div><div class="day-cell__body">${bodyContent}</div>`;
            gridContainer.appendChild(dayCell);
          }
        }
        store.subscribe(render);
        render();
      }
commands: []