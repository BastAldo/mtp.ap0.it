commit_message: "refactor(core): Isolate trainer state machine and create UI module"
rationale: |
  This commit executes Step 1 of the refactoring plan, addressing the core instability of the application.

  1.  **State Machine (`src/trainer.js`):** The trainer logic has been completely rewritten into a pure state machine, driven by a single `setInterval` calling a `tick()` function. This eliminates the transient "delay" state, fixing the UI flickering and pause button bugs. It now holds all session state (current exercise, series, time) and is completely decoupled from the DOM. Its only side effect is calling functions in the new UI module.

  2.  **UI Module (`src/ui.js`):** A new `src/ui.js` module has been created. It is now the *only* part of the application with the responsibility of manipulating the DOM. It exposes a clear API (`showView`, `updateTrainerUI`, `togglePause`) that other modules can call, effectively acting as the "view" layer.

  3.  **Orchestrator (`src/main.js`):** The main script now acts as an orchestrator, importing functionality from the other modules and wiring up the event listeners (e.g., clicks on Start, Pause, Resume buttons).

  4.  **HTML (`index.html`):** The HTML has been updated to use a single `type="module"` script, which is the modern standard. Static buttons for `resume` and `next-exercise` have been added and will be toggled by the UI module, which is more robust than creating/destroying elements.

  This foundational refactoring creates a clear separation of concerns, making the application stable, maintainable, and ready for future development.
patches:
  - file: index.html
    content: |
      <!DOCTYPE html>
      <html lang="it">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>MTP Advanced Programming</title>
          <link rel="stylesheet" href="style.css">
          <link rel="manifest" href="manifest.json">
      </head>
      <body>
          <div id="app">
              <div id="config-view">
                  <h1>Workout Configurator</h1>
                  <div class="exercise-list-container">
                      <ul id="exercises-list">
                          </ul>
                  </div>
                  <div class="config-actions">
                    <button id="start-training-button">Start Training</button>
                    <p>Seleziona gli esercizi da includere nell'allenamento.</p>
                  </div>
              </div>

              <div id="trainer-view" style="display: none;">
                  <div class="trainer-header">
                    <h2 id="exercise-name">Exercise Name</h2>
                    <p id="series-counter">Series 1 / 3</p>
                  </div>
                  <div class="timer-container">
                      <p id="timer">00</p>
                      <p id="status-message">Prepare</p>
                  </div>
                  <div class="trainer-controls">
                      <button id="pause-button">Pause</button>
                      <button id="resume-button" style="display: none;">Resume</button>
                      <button id="next-exercise-button" style="display: none;">Next Exercise</button>
                  </div>
              </div>
          </div>

          <script src="src/storage.js"></script>
          <script type="module" src="src/main.js"></script>
      </body>
      </html>
  - file: src/main.js
    content: |
      /**
       * @file main.js
       * This is the entry point of the application.
       * It handles the orchestration between the UI and the application logic.
       */

      import { loadExercises, getSelectedExercises } from './config.js';
      import { startTrainer, pause, resume, nextExercise } from './trainer.js';
      import { showView } from './ui.js';

      document.addEventListener('DOMContentLoaded', () => {
          // Initial setup
          showView('config');
          loadExercises();

          // Event Listeners
          const startButton = document.getElementById('start-training-button');
          const pauseButton = document.getElementById('pause-button');
          const resumeButton = document.getElementById('resume-button');
          const nextExerciseButton = document.getElementById('next-exercise-button');

          startButton.addEventListener('click', () => {
              const selectedExercises = getSelectedExercises();
              if (selectedExercises.length > 0) {
                  startTrainer(selectedExercises);
              } else {
                  alert('Please select at least one exercise.');
              }
          });

          pauseButton.addEventListener('click', () => {
              pause();
          });

          resumeButton.addEventListener('click', () => {
              resume();
          });

          nextExerciseButton.addEventListener('click', () => {
            nextExercise();
          });
      });
  - file: src/trainer.js
    content: |
      /**
       * @file trainer.js
       * Contains the entire state machine logic for the training session.
       * It is completely decoupled from the DOM.
       */
      import * as ui from './ui.js';

      const PREPARATION_TIME = 5;

      // Application states
      const State = {
          IDLE: 'IDLE',
          PREPARING: 'PREPARING',
          WORKING: 'WORKING',
          RESTING: 'RESTING',
          PAUSED: 'PAUSED',
          EXERCISE_COMPLETED: 'EXERCISE_COMPLETED',
          WORKOUT_COMPLETED: 'WORKOUT_COMPLETED',
      };

      let currentState = State.IDLE;
      let pausedState = null;

      let exercises = [];
      let currentExerciseIndex = 0;
      let currentSeries = 1;
      let countdown = 0;
      let intervalId = null;

      function getCurrentExercise() {
          return exercises[currentExerciseIndex];
      }

      function tick() {
          countdown--;
          updateUI();

          if (countdown <= 0) {
              transitionToNextState();
          }
      }

      function transitionToNextState() {
          const exercise = getCurrentExercise();
          switch (currentState) {
              case State.PREPARING:
                  currentState = State.WORKING;
                  countdown = exercise.duration;
                  break;

              case State.WORKING:
                  if (currentSeries < exercise.series) {
                      currentState = State.RESTING;
                      countdown = exercise.rest;
                      currentSeries++;
                  } else {
                      // Exercise finished
                      clearInterval(intervalId);
                      intervalId = null;
                      currentState = State.EXERCISE_COMPLETED;
                  }
                  break;

              case State.RESTING:
                  currentState = State.WORKING;
                  countdown = exercise.duration;
                  break;
          }
          updateUI();
      }

      function updateUI() {
          const exercise = getCurrentExercise();
          const isPaused = currentState === State.PAUSED;

          let statusMessage = currentState;
          if(currentState === State.PREPARING) statusMessage = `Get Ready: ${exercise.name}`;
          if(currentState === State.WORKING) statusMessage = 'Work!';
          if(currentState === State.RESTING) statusMessage = 'Rest';
          if(currentState === State.PAUSED) statusMessage = 'Paused';
          if(currentState === State.EXERCISE_COMPLETED) statusMessage = `Exercise '${exercise.name}' Complete!`;
          if(currentState === State.WORKOUT_COMPLETED) statusMessage = `Workout Complete!`;


          ui.updateTrainerUI({
              exerciseName: exercise.name,
              currentSeries: currentSeries,
              totalSeries: exercise.series,
              time: countdown,
              statusMessage: statusMessage,
              isLastExercise: currentExerciseIndex >= exercises.length - 1,
              isExerciseCompleted: currentState === State.EXERCISE_COMPLETED,
              isWorkoutCompleted: currentState === State.WORKOUT_COMPLETED,
          });
          ui.togglePause(isPaused);
      }

      function startInterval() {
          if (intervalId) clearInterval(intervalId);
          intervalId = setInterval(tick, 1000);
      }

      // --- Public API ---

      export function startTrainer(exerciseConfigs) {
          exercises = exerciseConfigs;
          currentExerciseIndex = 0;
          currentSeries = 1;
          currentState = State.PREPARING;
          countdown = PREPARATION_TIME;

          ui.showView('trainer');
          updateUI();
          startInterval();
      }

      export function pause() {
          if (currentState !== State.WORKING && currentState !== State.RESTING && currentState !== State.PREPARING) return;
          clearInterval(intervalId);
          pausedState = currentState;
          currentState = State.PAUSED;
          updateUI();
      }

      export function resume() {
          if (currentState !== State.PAUSED) return;
          currentState = pausedState;
          pausedState = null;
          updateUI();
          startInterval();
      }

      export function nextExercise() {
        if (currentState !== State.EXERCISE_COMPLETED) return;

        if (currentExerciseIndex < exercises.length - 1) {
            currentExerciseIndex++;
            currentSeries = 1;
            currentState = State.PREPARING;
            countdown = PREPARATION_TIME;
            updateUI();
            startInterval();
        } else {
            currentState = State.WORKOUT_COMPLETED;
            updateUI();
        }
      }
  - file: src/ui.js
    content: |
      /**
       * @file ui.js
       * Responsible for all direct DOM manipulations.
       * It acts as the "view" layer of the application.
       */

      // Views
      const configView = document.getElementById('config-view');
      const trainerView = document.getElementById('trainer-view');

      // Trainer elements
      const exerciseNameEl = document.getElementById('exercise-name');
      const seriesCounterEl = document.getElementById('series-counter');
      const timerEl = document.getElementById('timer');
      const statusMessageEl = document.getElementById('status-message');
      const pauseButton = document.getElementById('pause-button');
      const resumeButton = document.getElementById('resume-button');
      const nextExerciseButton = document.getElementById('next-exercise-button');


      /**
       * Shows a specific view and hides all others.
       * @param {('config'|'trainer')} viewName The name of the view to show.
       */
      export function showView(viewName) {
          configView.style.display = 'none';
          trainerView.style.display = 'none';

          if (viewName === 'config') {
              configView.style.display = 'block';
          } else if (viewName === 'trainer') {
              trainerView.style.display = 'block';
          }
      }

      /**
       * Updates the entire trainer UI based on the current state.
       * @param {object} state The state object from the trainer module.
       * @param {string} state.exerciseName
       * @param {number} state.currentSeries
       * @param {number} state.totalSeries
       * @param {number} state.time
       * @param {string} state.statusMessage
       * @param {boolean} state.isLastExercise
       * @param {boolean} state.isExerciseCompleted
       * @param {boolean} state.isWorkoutCompleted
       */
      export function updateTrainerUI(state) {
          exerciseNameEl.textContent = state.exerciseName;
          seriesCounterEl.textContent = `Series ${state.currentSeries} / ${state.totalSeries}`;
          timerEl.textContent = String(state.time).padStart(2, '0');
          statusMessageEl.textContent = state.statusMessage;

          if (state.isWorkoutCompleted) {
            nextExerciseButton.style.display = 'none';
            pauseButton.style.display = 'none';
            resumeButton.style.display = 'none';
          } else if (state.isExerciseCompleted) {
            nextExerciseButton.style.display = 'inline-block';
            pauseButton.style.display = 'none';
            resumeButton.style.display = 'none';
          } else {
            nextExerciseButton.style.display = 'none';
          }
      }

      /**
       * Toggles the visibility of the Pause and Resume buttons.
       * @param {boolean} isPaused - True if the trainer is paused.
       */
      export function togglePause(isPaused) {
          if (nextExerciseButton.style.display !== 'none') return; // Don't show pause/resume if next is visible

          pauseButton.style.display = isPaused ? 'none' : 'inline-block';
          resumeButton.style.display = isPaused ? 'inline-block' : 'none';
      }
commands:
  - echo "✅ Step 1 complete: Core refactoring finished."
  - echo "The trainer logic is now stable and separated from the UI."
  - echo "Please test the training functionality."
  - echo "When you are ready, we will proceed with 'Step 2: Application Shell and Module Integration' to finalize the module structure."