commit_message: "docs(status): Documentare fallimento critico e nuova strategia per il trainer"
rationale: |
  Questo commit aggiorna la documentazione di stato per riflettere il fallimento persistente della macchina a stati del trainer.

  La causa radice è stata identificata in un difetto di progettazione fondamentale: il reducer in `store.js` tenta di gestire sia le modifiche di stato che gli effetti collaterali (timer), portando a loop incontrollabili.

  Il documento `05_STATUS.md` viene aggiornato per formalizzare questa analisi e definire una nuova strategia obbligatoria basata sulla separazione delle responsabilità (reducer puro + controller per gli effetti collaterali), in linea con i principi architetturali del progetto (ADR 003).
patches:
  - file: docs/05_STATUS.md
    content: |
      # Stato Attuale del Progetto
      *Ultimo aggiornamento: 2025-07-02*

      ## Stato: Fallimento Critico della Macchina a Stati del Trainer

      ### Problema Attuale
      Nonostante ripetuti tentativi di correzione, il componente **Trainer Interattivo rimane criticamente instabile e non utilizzabile**. I problemi principali sono:
      1.  **Loop Infinito**: All'avvio, la macchina a stati entra in un ciclo infinito di transizioni, come evidenziato dai log.
      2.  **Funzione di Pausa Inefficace**: A causa del loop, qualsiasi tentativo di mettere in pausa il workout viene ignorato o immediatamente sovrascritto.

      ### Causa Radice (Analisi Definitiva)
      I tentativi di correzione precedenti sono falliti perché indirizzavano i sintomi invece della causa. La causa radice è un **difetto di progettazione architetturale** nel file `src/modules/store.js`.

      La logica del `reducer` viola il principio della separazione delle responsabilità tentando di gestire due compiti contemporaneamente:
      1.  **Calcolare le modifiche di stato** (es. passare da `preparing` a `announcing`).
      2.  **Gestire effetti collaterali** (avviare e fermare i `setInterval` per i timer).

      Questa mescolanza crea una catena di azioni (`dispatch` che chiamano altri `dispatch`), portando a **"race condition"** incontrollabili che sono la vera fonte dei loop.

      ### Prossima Strategia Obbligatoria: Riprogettazione Architetturale

      Qualsiasi ulteriore tentativo di "patch" sull'implementazione corrente è da considerarsi fallimentare. L'unica via per risolvere il problema è una **riscrittura della logica del trainer** che aderisca strettamente ai principi architetturali (ADR 003).

      1.  **Rendere il Reducer "Puro"**: La logica all'interno dello `switch` del `dispatch` in `store.js` deve essere modificata per avere un unico scopo: calcolare il nuovo stato e restituirlo. **Non deve più contenere alcuna chiamata a `startTimer` o `stopTimer`**.
      2.  **Introdurre un "Controller" per gli Effetti Collaterali**: Bisogna implementare un meccanismo separato (es. un "middleware" o un "controller che si iscrive allo store") il cui unico compito sia **reagire** ai cambiamenti di stato per gestire i timer.
          -   *Se vede* che lo stato è diventato `action`, *allora* avvia il timer corrispondente.
          -   *Se vede* che lo stato è diventato `paused`, *allora* ferma il timer.

      Questo disaccoppiamento è l'unico modo per garantire stabilità, prevedibilità e per risolvere definitivamente i bug.
commands:
  - "echo 'Documentazione di stato aggiornata. La strategia è definita. Pronto a procedere con la riprogettazione quando richiesto.'"