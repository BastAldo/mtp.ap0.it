commit_message: "feat(editor): Implementa la rimozione di item dal workout"
rationale: |
  Questo commit aggiunge la funzionalità di rimozione degli elementi (esercizi o riposi) dal Workout Editor, come da piano d'azione approvato.

  - È stata introdotta una nuova azione `REMOVE_WORKOUT_ITEM` nello store per gestire la logica di rimozione in modo immutabile.
  - È stato implementato un meccanismo di "autosave": dopo ogni azione che modifica i `workouts`, lo stato aggiornato viene automaticamente salvato in `localStorage`. Questo centralizza la logica di persistenza e garantisce la coerenza dei dati.
  - La vista dell'editor (`WorkoutEditorView`) ora renderizza un pulsante di rimozione per ogni item.
  - Il componente `Modal` è stato aggiornato per gestire i click su questi nuovi pulsanti, inviando l'azione corretta allo store.
patches:
  - file: src/modules/store.js
    content: |
      import { saveToStorage } from './storage.js';

      const WORKOUTS_STORAGE_KEY = 'workouts';

      function createStore() {
        let state = {
          currentView: 'calendar',
          focusedDate: new Date(),
          workouts: {},
          isModalOpen: false,
          modalContext: null,
        };

        const subscribers = new Set();
        function notify() { subscribers.forEach(callback => callback()); }

        function dispatch(action) {
          const oldState = state;
          switch (action.type) {
            case 'CHANGE_VIEW':
              state = { ...state, currentView: action.payload };
              break;
            case 'PREV_WEEK': {
              const newDate = new Date(state.focusedDate);
              newDate.setDate(newDate.getDate() - 7);
              state = { ...state, focusedDate: newDate };
              break;
            }
            case 'NEXT_WEEK': {
              const newDate = new Date(state.focusedDate);
              newDate.setDate(newDate.getDate() + 7);
              state = { ...state, focusedDate: newDate };
              break;
            }
            case 'SET_WORKOUTS':
              state = { ...state, workouts: action.payload };
              break;
            case 'OPEN_MODAL':
              state = { ...state, isModalOpen: true, modalContext: action.payload };
              break;
            case 'CLOSE_MODAL':
              state = { ...state, isModalOpen: false, modalContext: null };
              break;
            case 'REMOVE_WORKOUT_ITEM': {
              const { date, itemId } = action.payload;
              const dateKey = `workout-${date}`;
              const workoutDay = state.workouts[dateKey];
              if (!workoutDay) break;

              const newWorkoutDay = workoutDay.filter(item => item.id !== itemId);
              const newWorkouts = { ...state.workouts, [dateKey]: newWorkoutDay };
              state = { ...state, workouts: newWorkouts };
              break;
            }
            default:
              console.warn(`Azione non riconosciuta: ${action.type}`);
              return;
          }
          if (state !== oldState) {
            console.log(`Action: ${action.type}`, action.payload);
            // Autosave: se i workout sono cambiati, salvali.
            if (state.workouts !== oldState.workouts) {
              saveToStorage(WORKOUTS_STORAGE_KEY, state.workouts);
              console.log('Workouts salvati in localStorage.');
            }
            notify();
          }
        }
        return {
          getState: () => ({ ...state }),
          subscribe: (callback) => { subscribers.add(callback); return () => subscribers.delete(callback); },
          dispatch,
        };
      }
      const store = createStore();
      export default store;
  - file: src/ui/Modal.js
    content: |
      import store from '../modules/store.js';
      import { render as renderWorkoutEditor } from '../views/WorkoutEditorView.js';

      export function init(element) {
          element.addEventListener('click', (event) => {
              // Chiude se si clicca sull'overlay
              if (event.target === element) {
                  store.dispatch({ type: 'CLOSE_MODAL' });
                  return;
              }
              // Gestisce il click sul pulsante Rimuovi item
              const removeButton = event.target.closest('.remove-item-btn');
              if (removeButton) {
                  const { itemId } = removeButton.dataset;
                  const { date } = store.getState().modalContext;
                  if (itemId && date) {
                      store.dispatch({ type: 'REMOVE_WORKOUT_ITEM', payload: { date, itemId } });
                  }
              }
          });

          function render() {
              const { isModalOpen, modalContext } = store.getState();
              if (isModalOpen) {
                  element.classList.add('active');
                  let headerContent = '';
                  let bodyContent = '';

                  switch (modalContext?.type) {
                      case 'EDIT_WORKOUT':
                          headerContent = `<h3>Editor Workout - ${modalContext.date}</h3>`;
                          bodyContent = renderWorkoutEditor(modalContext);
                          break;
                      default:
                          headerContent = '<h3>Attenzione</h3>';
                          bodyContent = '<p>Contenuto della modale non specificato.</p>';
                  }

                  element.innerHTML = `
                      <div class="modal-content">
                          <div class="modal-header">
                              ${headerContent}
                              <button class="modal-close-btn">&times;</button>
                          </div>
                          <div class="modal-body">
                              ${bodyContent}
                          </div>
                      </div>
                  `;

                  const closeButton = element.querySelector('.modal-close-btn');
                  if (closeButton) {
                      closeButton.addEventListener('click', () => {
                          store.dispatch({ type: 'CLOSE_MODAL' });
                      });
                  }
              } else {
                  element.classList.remove('active');
                  element.innerHTML = '';
              }
          }
          store.subscribe(render);
          render();
      }
  - file: src/views/WorkoutEditorView.js
    content: |
      import store from '../modules/store.js';

      export function render(context) {
          const { workouts } = store.getState();
          const dateKey = `workout-${context.date}`;
          const workoutItems = workouts[dateKey];

          if (!workoutItems || workoutItems.length === 0) {
              return '<p>Nessun allenamento programmato per questo giorno.</p>';
          }

          const itemsHtml = workoutItems.map(item => {
              let content = '';
              if (item.type === 'exercise') {
                  content = `
                      <span class="item-name">${item.name}</span>
                      <span class="item-details">${item.series}x${item.reps}</span>
                  `;
              } else if (item.type === 'rest') {
                  content = `
                      <span class="item-name">Riposo</span>
                      <span class="item-details">${item.duration}s</span>
                  `;
              }
              return `
                  <li class="workout-item workout-item--${item.type}">
                      <div class="item-info">${content}</div>
                      <button class="remove-item-btn" data-item-id="${item.id}" title="Rimuovi item">&times;</button>
                  </li>
              `;
          }).join('');

          return `<ul class="workout-item-list">${itemsHtml}</ul>`;
      }
  - file: assets/css/style.css
    content: |
      /* --- GLOBAL STYLES & MOBILE FIRST --- */
      :root {
          --bg-color: #1a1a1d;
          --card-color: #2c2c34;
          --primary-color: #9575cd;
          --secondary-color: #4db6ac;
          --text-color: #f4f4f9;
          --text-color-muted: #aaa;
          --border-color: #40404a;
          --danger-color: #ef5350;
      }
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body { font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; background-color: var(--bg-color); color: var(--text-color); }
      #app-container { max-width: 1200px; margin: 0 auto; padding: 1rem; }
      .view { display: none; width: 100%; }
      .view--active { display: block; }

      /* --- CALENDAR VIEW STYLES --- */
      .calendar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
      .calendar-header h2 { font-size: 1.25rem; text-align: center; }
      .calendar-header button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: background-color 0.2s; }
      .calendar-header button:hover { background-color: var(--primary-color); }
      .calendar-grid { display: grid; grid-template-columns: 1fr; gap: 0.5rem; }
      .day-cell { background-color: var(--card-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 1rem; min-height: 150px; display: flex; flex-direction: column; cursor: pointer; transition: border-color 0.2s; }
      .day-cell:hover { border-color: var(--primary-color); }
      .day-cell__header { display: flex; justify-content: space-between; font-weight: bold; color: var(--text-color-muted); text-transform: uppercase; font-size: 0.8rem; pointer-events: none; }
      .day-cell__body { margin-top: 0.5rem; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between; align-items: flex-start; pointer-events: none; }
      .exercise-count { font-size: 0.9rem; color: var(--secondary-color); }
      .start-btn { background-color: var(--secondary-color); color: var(--bg-color); border: none; padding: 0.6rem; border-radius: 6px; cursor: pointer; font-weight: bold; text-transform: uppercase; width: 100%; margin-top: 1rem; transition: opacity 0.2s; pointer-events: all !important; }
      .start-btn:hover { opacity: 0.85; }

      /* --- MODAL STYLES --- */
      #modal-container { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: flex; justify-content: center; align-items: center; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; z-index: 1000; }
      #modal-container.active { opacity: 1; pointer-events: all; }
      .modal-content { background-color: var(--card-color); padding: 1.5rem; border-radius: 8px; border: 1px solid var(--border-color); min-width: 300px; max-width: 90%; transform: scale(0.95); transition: transform 0.3s ease; }
      #modal-container.active .modal-content { transform: scale(1); }
      .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; border-bottom: 1px solid var(--border-color); padding-bottom: 1rem; }
      .modal-header h3 { color: var(--primary-color); }
      .modal-close-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; cursor: pointer; }

      /* --- WORKOUT EDITOR STYLES --- */
      .workout-item-list { list-style: none; padding: 0; margin: 0; }
      .workout-item { display: flex; justify-content: space-between; align-items: center; padding: 1rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .workout-item:last-child { border-bottom: none; }
      .item-info { display: flex; flex-direction: column; }
      .item-info .item-name { font-weight: bold; }
      .item-info .item-details { color: var(--secondary-color); font-size: 0.9em; }
      .workout-item--rest .item-info .item-name { color: var(--text-color-muted); font-style: italic; }
      .remove-item-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; font-weight: bold; cursor: pointer; padding: 0 0.5rem; border-radius: 50%; }
      .remove-item-btn:hover { color: var(--danger-color); background-color: rgba(239, 83, 80, 0.1); }

      /* --- TABLET/DESKTOP OVERRIDES --- */
      @media (min-width: 768px) {
          #app-container { padding: 2rem; }
          .calendar-grid { grid-template-columns: repeat(7, 1fr); gap: 1rem; }
          .calendar-header h2 { font-size: 1.5rem; }
          .modal-content { min-width: 500px; max-width: 60%; padding: 2rem; }
      }
commands: []