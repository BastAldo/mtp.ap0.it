commit_message: "feat: Implement calendar rendering and navigation module"
rationale: |
  Questo patch risolve il problema della "pagina bianca" implementando la logica di rendering del calendario.

  1.  **Separazione delle Responsabilità:** Viene creato un nuovo modulo, `src/calendar.js`, che ha la responsabilità esclusiva di gestire lo stato, il rendering e l'interazione della vista calendario. Questo è un passo cruciale per smantellare il monolite.

  2.  **Orchestrazione:** Il file `src/main.js` assume il suo vero ruolo di orchestratore. Invece di contenere la logica, importa e inizializza il modulo del calendario (`calendar.initCalendar()`), delegando completamente il compito.

  3.  **Logica di Rendering:** Il modulo `calendar.js` contiene la logica per calcolare i giorni della settimana, creare dinamicamente le celle del giorno (`day-cell`), e popolarle con i dati corretti (giorno, numero, riepilogo esercizi).

  4.  **Integrazione con lo Storage:** Il modulo `calendar.js` comunica con il modulo `storage.js` (creato nel passo precedente) per recuperare il numero di esercizi per ogni giorno, decidendo se abilitare o meno il pulsante "START".

  5.  **Interattività:** La navigazione tra la settimana precedente e quella successiva è ora gestita interamente all'interno del modulo `calendar.js`, mantenendo il suo stato (`currentDate`) isolato dal resto dell'applicazione.
patches:
  - file: src/main.js
    content: |
      /**
       * @file main.js
       * The main entry point for the application.
       * Orchestrates all other modules.
       */
      import * as storage from './storage.js';
      import { initCalendar } from './calendar.js';

      /**
       * The main function to initialize the application.
       */
      function main() {
        console.log('Application Initialized.');
        console.log('Fetching all workouts from storage:', storage.getWorkouts());

        // Initialize all primary components
        initCalendar();
      }

      // Initialize the app once the DOM is fully loaded.
      document.addEventListener('DOMContentLoaded', main);
  - file: src/calendar.js
    content: |
      /**
       * @file calendar.js
       * Manages the state, rendering, and interactions of the calendar view.
       */
      import * as storage from './storage.js';

      // DOM Elements
      const calendarGrid = document.getElementById('calendar-grid');
      const currentMonthYear = document.getElementById('current-month-year');
      const prevWeekBtn = document.getElementById('prev-week-btn');
      const nextWeekBtn = document.getElementById('next-week-btn');

      // State
      let currentDate = new Date();

      /**
       * Formats a Date object into a 'YYYY-MM-DD' string.
       * @param {Date} date The date to format.
       * @returns {string} The formatted date string.
       */
      function formatDateKey(date) {
        return date.toISOString().split('T')[0];
      }

      /**
       * Renders the calendar for the week of the given date.
       * @param {Date} date A date within the week to be rendered.
       */
      function renderCalendar(date) {
        calendarGrid.innerHTML = '';
        const weekStart = new Date(date);
        weekStart.setDate(date.getDate() - date.getDay()); // Start of the week (Sunday)

        const monthNames = ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"];
        currentMonthYear.textContent = `${monthNames[date.getMonth()]} ${date.getFullYear()}`;

        for (let i = 0; i < 7; i++) {
          const day = new Date(weekStart);
          day.setDate(weekStart.getDate() + i);

          const dayCell = document.createElement('div');
          dayCell.className = 'day-cell';
          const dateKey = formatDateKey(day);
          dayCell.dataset.date = dateKey;

          const dayName = day.toLocaleDateString('it-IT', { weekday: 'long' });
          const dayNumber = day.getDate();

          const exercises = storage.getWorkoutsForDate(dateKey);
          const exerciseCount = exercises.length;

          let summaryText = 'Nessun esercizio';
          if (exerciseCount > 0) {
            summaryText = `${exerciseCount} ${exerciseCount > 1 ? 'esercizi' : 'esercizio'}`;
          }

          dayCell.innerHTML = `
            <div class="day-name">${dayName}</div>
            <div class="day-number">${dayNumber}</div>
            <div class="day-summary">${summaryText}</div>
            <button class="btn btn-secondary start-workout-btn" ${exerciseCount === 0 ? 'disabled' : ''}>START</button>
          `;

          calendarGrid.appendChild(dayCell);
        }
      }

      /**
       * Initializes the calendar, sets up event listeners, and performs the initial render.
       */
      export function initCalendar() {
        prevWeekBtn.addEventListener('click', () => {
          currentDate.setDate(currentDate.getDate() - 7);
          renderCalendar(currentDate);
        });

        nextWeekBtn.addEventListener('click', () => {
          currentDate.setDate(currentDate.getDate() + 7);
          renderCalendar(currentDate);
        });

        renderCalendar(currentDate);
        console.log('Calendar module initialized.');
      }
commands:
  - "echo 'Patch applicato. Il modulo del calendario è stato creato e integrato.'"
  - "echo 'Dovresti ora vedere il calendario settimanale renderizzato nella pagina.'"
  - "echo 'IMPORTANTE: Avvia sempre l''applicazione tramite un server locale.'"
  - "echo 'Comando suggerito: python3 -m http.server'"
  - "echo 'Apri http://localhost:8000 nel browser e verifica il risultato.'"