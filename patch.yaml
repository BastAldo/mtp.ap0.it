commit_message: "feat(trainer): Implementa stato 'preparing' e migliora UX modale"
rationale: |
  Questo commit accorpa diverse modifiche per migliorare l'UI e avanzare con la logica del trainer, come richiesto:

  1.  **Fix Layout Modale:** La struttura HTML/CSS della modale è stata refattorizzata. Il footer con i pulsanti di azione è ora un fratello del corpo scrollabile, non un figlio, garantendo che rimanga sempre visibile in fondo alla modale.
  2.  **Ottimizzazione Mobile:** L'altezza della modale è stata resa più contenuta e adattiva sui dispositivi mobili, migliorando l'usabilità su schermi piccoli.
  3.  **Stato 'Preparing' del Trainer:** È stata implementata la fase `preparing` del trainer, che mostra un conto alla rovescia di 3 secondi prima dell'inizio dell'esercizio, introducendo la prima logica a tempo nella state machine.
patches:
  - file: assets/css/style.css
    content: |
      /* --- GLOBAL STYLES & MOBILE FIRST --- */
      :root {
          --bg-color: #1a1a1d;
          --card-color: #2c2c34;
          --primary-color: #9575cd;
          --secondary-color: #4db6ac;
          --text-color: #f4f4f9;
          --text-color-muted: #aaa;
          --border-color: #40404a;
          --danger-color: #ef5350;
      }
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body {
          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          background-color: var(--bg-color);
          color: var(--text-color);
          scrollbar-width: thin;
          scrollbar-color: var(--primary-color) var(--bg-color);
      }
      /* Custom Scrollbar for Webkit Browsers */
      body::-webkit-scrollbar, .modal-body::-webkit-scrollbar { width: 8px; }
      body::-webkit-scrollbar-track, .modal-body::-webkit-scrollbar-track { background: var(--card-color); }
      body::-webkit-scrollbar-thumb, .modal-body::-webkit-scrollbar-thumb { background-color: var(--primary-color); border-radius: 10px; border: 2px solid var(--card-color); }
      #app-container { max-width: 1200px; margin: 0 auto; padding: 1rem; }
      .view { display: none; width: 100%; }
      .view--active { display: block; }

      /* --- CALENDAR VIEW STYLES --- */
      .calendar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
      .calendar-header h2 { font-size: 1.25rem; text-align: center; }
      .calendar-header button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: background-color 0.2s; }
      .calendar-header button:hover { background-color: var(--primary-color); }
      .calendar-grid { display: grid; grid-template-columns: 1fr; gap: 0.5rem; }
      .day-cell { background-color: var(--card-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 1rem; min-height: 150px; display: flex; flex-direction: column; cursor: pointer; transition: border-color 0.2s; }
      .day-cell:hover { border-color: var(--primary-color); }
      .day-cell__header { display: flex; justify-content: space-between; font-weight: bold; color: var(--text-color-muted); text-transform: uppercase; font-size: 0.8rem; pointer-events: none; }
      .day-cell__body { margin-top: 0.5rem; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between; align-items: flex-start; pointer-events: none; }
      .exercise-count { font-size: 0.9rem; color: var(--secondary-color); }
      .start-btn { background-color: var(--secondary-color); color: var(--bg-color); border: none; padding: 0.6rem; border-radius: 6px; cursor: pointer; font-weight: bold; text-transform: uppercase; width: 100%; margin-top: 1rem; transition: opacity 0.2s; pointer-events: all !important; }
      .start-btn:hover { opacity: 0.85; }

      /* --- MODAL STYLES --- */
      #modal-container { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: flex; justify-content: center; align-items: center; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; z-index: 1000; }
      #modal-container.active { opacity: 1; pointer-events: all; }
      .modal-content { background-color: var(--card-color); border-radius: 8px; border: 1px solid var(--border-color); width: 90%; max-width: 500px; transform: scale(0.95); transition: transform 0.3s ease; display: flex; flex-direction: column; max-height: 90vh; }
      #modal-container.active .modal-content { transform: scale(1); }
      .modal-header { padding: 1rem 1.5rem; border-bottom: 1px solid var(--border-color); flex-shrink: 0; display: flex; justify-content: space-between; align-items: center; }
      .modal-header h3 { color: var(--primary-color); }
      .modal-close-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; cursor: pointer; }
      .modal-body { overflow-y: auto; flex-grow: 1; padding: 0 1.5rem; }
      .modal-actions { margin-top: auto; padding: 1rem 1.5rem; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; gap: 1rem; flex-shrink: 0; }
      .add-rest-btn, .add-exercise-btn { background-color: transparent; border: 1px solid var(--secondary-color); color: var(--secondary-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: all 0.2s; }
      .add-rest-btn:hover, .add-exercise-btn:hover { background-color: var(--secondary-color); color: var(--card-color); }

      /* --- WORKOUT EDITOR & LIBRARY STYLES --- */
      .workout-item-list, .exercise-library-list { list-style: none; padding: 0; margin: 0; }
      .workout-item { display: flex; justify-content: space-between; align-items: center; padding: 1rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .workout-item:last-child { border-bottom: none; }
      .item-info { display: flex; align-items: baseline; gap: 0.75rem; flex-grow: 1; }
      .item-info .item-name { font-weight: bold; }
      .item-info .item-details { color: var(--secondary-color); }
      .workout-item--rest .item-info .item-name { color: var(--text-color-muted); font-style: italic; }
      .rest-duration-input { -moz-appearance: textfield; background-color: var(--bg-color); border: 1px solid var(--border-color); color: var(--text-color); border-radius: 4px; padding: 0.25rem; width: 60px; text-align: center; }
      .rest-duration-input::-webkit-outer-spin-button, .rest-duration-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
      .remove-item-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; font-weight: bold; cursor: pointer; padding: 0 0.5rem; border-radius: 50%; }
      .remove-item-btn:hover { color: var(--danger-color); background-color: rgba(239, 83, 80, 0.1); }
      .exercise-library-item { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .exercise-library-item:last-child { border-bottom: none; }
      .add-to-workout-btn { background-color: var(--primary-color); color: var(--text-color); border: none; padding: 0.4rem 0.8rem; border-radius: 4px; cursor: pointer; }

      /* --- TRAINER VIEW STYLES --- */
      .trainer-container { display: flex; flex-direction: column; align-items: center; justify-content: center; height: calc(100vh - 4rem); text-align: center; }
      .trainer-header { margin-bottom: 1rem; }
      .trainer-header h2 { font-size: 2rem; text-transform: uppercase; color: var(--primary-color); }
      .trainer-header p { color: var(--text-color-muted); }
      .progress-ring { position: relative; width: 250px; height: 250px; margin: 2rem 0; }
      .progress-ring svg { width: 100%; height: 100%; transform: rotate(-90deg); }
      .progress-ring circle { transition: stroke-dashoffset 0.3s; }
      .progress-ring__background { stroke: var(--card-color); fill: transparent; }
      .progress-ring__foreground { stroke: var(--secondary-color); fill: transparent; }
      .progress-ring__text { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }
      .progress-ring__phase { font-size: 2rem; font-weight: bold; }
      .progress-ring__timer { font-size: 3rem; color: var(--text-color); }
      .trainer-footer { margin-top: 1rem; }
      .trainer-footer p { font-size: 1.2rem; min-height: 2em; }
      .trainer-controls button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 1rem 2rem; border-radius: 8px; cursor: pointer; font-size: 1.2rem; text-transform: uppercase; }

      /* --- TABLET/DESKTOP OVERRIDES --- */
      @media (min-width: 768px) {
          .modal-content { max-width: 600px; height: 70vh; max-height: 70vh; }
          .progress-ring { width: 300px; height: 300px; }
      }
  - file: src/ui/Modal.js
    content: |
      import store from '../modules/store.js';
      import { render as renderWorkoutEditor } from '../views/WorkoutEditorView.js';
      import { render as renderExerciseLibrary } from '../views/ExerciseLibraryView.js';

      export function init(element) {
          let previousItemCount = 0;

          element.addEventListener('click', (event) => { /* ... (invariato, come precedente) ... */ });
          element.addEventListener('change', (event) => { /* ... (invariato, come precedente) ... */ });
          // ... (resto del codice invariato) ...
          element.addEventListener('click', (event) => {
              if (event.target === element) { store.dispatch({ type: 'CLOSE_MODAL' }); return; }
              const removeBtn = event.target.closest('.remove-item-btn');
              if (removeBtn) { const { itemId } = removeBtn.dataset; const { date } = store.getState().modalContext; store.dispatch({ type: 'REMOVE_WORKOUT_ITEM', payload: { date, itemId } }); return; }
              const addRestBtn = event.target.closest('.add-rest-btn');
              if (addRestBtn) { const { date } = store.getState().modalContext; store.dispatch({ type: 'ADD_REST_ITEM', payload: { date } }); return; }
              const addExerciseBtn = event.target.closest('.add-exercise-btn');
              if (addExerciseBtn) { const { date } = store.getState().modalContext; store.dispatch({ type: 'OPEN_MODAL', payload: { type: 'CHOOSE_EXERCISE', date } }); return; }
              const addToWorkoutBtn = event.target.closest('.add-to-workout-btn');
              if (addToWorkoutBtn) { const { exerciseId } = addToWorkoutBtn.dataset; const { date } = store.getState().modalContext; store.dispatch({ type: 'ADD_EXERCISE_ITEM', payload: { date, exerciseId } }); return; }
          });
          element.addEventListener('change', (event) => {
              const restInput = event.target.closest('.rest-duration-input');
              if (restInput) { const { itemId } = restInput.dataset; const { date } = store.getState().modalContext; const newDuration = parseInt(restInput.value, 10); if (itemId && date && !isNaN(newDuration)) { store.dispatch({ type: 'UPDATE_REST_DURATION', payload: { date, itemId, newDuration } }); } }
          });

          function render() {
              const { isModalOpen, modalContext, workouts } = store.getState();
              if (isModalOpen) {
                  const dateKey = `workout-${modalContext.date}`;
                  const currentItemCount = workouts[dateKey]?.length || 0;

                  element.classList.add('active');
                  let headerContent = '', bodyContent = '', actionsContent = '';

                  switch (modalContext?.type) {
                      case 'EDIT_WORKOUT':
                          headerContent = `<h3>Editor Workout - ${modalContext.date}</h3>`;
                          bodyContent = renderWorkoutEditor(modalContext);
                          actionsContent = `<button class="add-exercise-btn">+ Add Exercise</button><button class="add-rest-btn">+ Aggiungi Riposo</button>`;
                          break;
                      case 'CHOOSE_EXERCISE':
                          headerContent = `<h3>Libreria Esercizi</h3>`;
                          bodyContent = renderExerciseLibrary(modalContext);
                          break;
                      default:
                          headerContent = '<h3>Attenzione</h3>';
                          bodyContent = '<p>Contenuto della modale non specificato.</p>';
                  }
                  element.innerHTML = `
                      <div class="modal-content">
                          <div class="modal-header">${headerContent}<button class="modal-close-btn">&times;</button></div>
                          <div class="modal-body">${bodyContent}</div>
                          ${actionsContent ? `<footer class="modal-actions">${actionsContent}</footer>` : ''}
                      </div>
                  `;
                  const closeButton = element.querySelector('.modal-close-btn');
                  if (closeButton) { closeButton.addEventListener('click', () => { store.dispatch({ type: 'CLOSE_MODAL' }); }); }

                  if (currentItemCount > previousItemCount) {
                      const modalBody = element.querySelector('.modal-body');
                      if (modalBody) { modalBody.scrollTop = modalBody.scrollHeight; }
                  }
                  previousItemCount = currentItemCount;

              } else {
                  element.classList.remove('active');
                  element.innerHTML = '';
                  previousItemCount = 0;
              }
          }
          store.subscribe(render);
          render();
      }
  - file: src/views/WorkoutEditorView.js
    content: |
      import store from '../modules/store.js';

      export function render(context) {
          const { workouts } = store.getState();
          const dateKey = `workout-${context.date}`;
          const workoutItems = workouts[dateKey];

          if (!workoutItems || workoutItems.length === 0) {
              return '<div class="workout-editor-content"><p>Nessun allenamento programmato per questo giorno.</p></div>';
          }

          const itemsHtml = workoutItems.map(item => {
              let infoContent = '', detailsContent = '';
              if (item.type === 'exercise') {
                  infoContent = `<span class="item-name">${item.name}</span>`;
                  detailsContent = `<span class="item-details">${item.series}x${item.reps}</span>`;
              } else if (item.type === 'rest') {
                  infoContent = `<span class="item-name">Riposo</span>`;
                  detailsContent = `<input type="number" class="rest-duration-input" value="${item.duration}" data-item-id="${item.id}" /> s`;
              }
              return `
                  <li class="workout-item workout-item--${item.type}">
                      <div class="item-info">${infoContent}${detailsContent}</div>
                      <button class="remove-item-btn" data-item-id="${item.id}" title="Rimuovi item">&times;</button>
                  </li>`;
          }).join('');

          return `<div class="workout-editor-content"><ul class="workout-item-list">${itemsHtml}</ul></div>`;
      }
  - file: src/views/TrainerView.js
    content: |
      import store from '../modules/store.js';

      // Variabile per tenere traccia del timer
      let countdownTimer = null;

      export function init(element) {
          element.addEventListener('click', (event) => {
              const mainButton = event.target.closest('.trainer-main-btn');
              if (mainButton) {
                  const currentState = store.getState().trainerState;
                  if (currentState === 'ready') {
                      store.dispatch({ type: 'SET_TRAINER_STATE', payload: 'preparing' });
                  }
              }
          });

          function runStateLogic() {
              const { trainerState } = store.getState();
              // Pulisce sempre i timer precedenti quando lo stato cambia
              if (countdownTimer) clearInterval(countdownTimer);

              if (trainerState === 'preparing') {
                  let countdown = 3;
                  const timerEl = element.querySelector('.progress-ring__timer');
                  if(timerEl) timerEl.textContent = countdown;

                  countdownTimer = setInterval(() => {
                      countdown--;
                      if(timerEl) timerEl.textContent = countdown;
                      if (countdown === 0) {
                          clearInterval(countdownTimer);
                          store.dispatch({ type: 'SET_TRAINER_STATE', payload: 'announcing' });
                      }
                  }, 1000);
              }
          }

          function render() {
              const { activeWorkout, trainerState } = store.getState();
              if (!activeWorkout) {
                  element.innerHTML = '<h2>Nessun workout attivo.</h2>';
                  return;
              }

              const currentExercise = activeWorkout.items.find(item => item.type === 'exercise') || { name: 'Workout' };
              const radius = 90;
              const circumference = 2 * Math.PI * radius;

              let phaseText = '', instructionText = '', buttonText = '', timerText = '';

              switch (trainerState) {
                  case 'ready':
                      phaseText = 'READY';
                      instructionText = 'Premi INIZIA per cominciare';
                      buttonText = 'INIZIA';
                      break;
                  case 'preparing':
                      phaseText = 'PREP';
                      instructionText = 'Preparati...';
                      buttonText = 'PAUSA';
                      break;
                  case 'announcing':
                      phaseText = 'UP'; // Esempio
                      instructionText = 'Prossima fase: UP';
                      buttonText = 'PAUSA';
                      break;
                  default:
                      phaseText = 'IDLE';
                      instructionText = 'Stato non riconosciuto';
                      buttonText = 'RESET';
              }

              element.innerHTML = `
                  <div class="trainer-container">
                      <header class="trainer-header">
                          <h2>${currentExercise.name}</h2>
                          <p>SERIES 1 / ${currentExercise.series || 3}</p>
                      </header>
                      <div class="progress-ring">
                          <svg>
                              <circle class="progress-ring__background" stroke-width="10" r="${radius}" cx="50%" cy="50%"></circle>
                              <circle class="progress-ring__foreground" stroke-width="10" r="${radius}" cx="50%" cy="50%"
                                  stroke-dasharray="${circumference}"
                                  stroke-dashoffset="${circumference}"
                              ></circle>
                          </svg>
                          <div class="progress-ring__text">
                              <div class="progress-ring__phase">${phaseText}</div>
                              <div class="progress-ring__timer">${timerText}</div>
                          </div>
                      </div>
                      <footer class="trainer-footer">
                          <p class="trainer-instruction">${instructionText}</p>
                          <div class="trainer-controls">
                              <button class="trainer-main-btn">${buttonText}</button>
                          </div>
                      </footer>
                  </div>
              `;
              // Esegui la logica dello stato DOPO aver renderizzato il DOM
              runStateLogic();
          }
          store.subscribe(render);
          render();
      }
commands: []