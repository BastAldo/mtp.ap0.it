# This is a YAML file. Copy all content from here down
# and save it as 'patch.yaml'.
commit_message: "feat: Enable week navigation in calendar view"
rationale: |
  Questo commit introduce la funzionalità di navigazione tra le settimane nella vista Calendario, rendendo l'applicazione interattiva.

  1.  **Logica di Navigazione**: La logica è stata implementata in `src/main.js`, il nostro orchestratore. È stato aggiunto un gestore di eventi `click` direttamente sull'elemento `calendarView`.

  2.  **Event Delegation**: Si è scelto di usare la tecnica dell'event delegation. Invece di aggiungere un listener per ogni pulsante, ne usiamo uno solo sul contenitore padre. Questo è più performante e robusto, poiché funziona anche quando i pulsanti vengono ricreati dinamicamente dalla funzione `renderCalendar`.

  3.  **Flusso di Esecuzione**:
      - Quando un utente clicca all'interno della vista calendario, il listener si attiva.
      - Controlla se l'elemento cliccato ha l'ID `prev-week-btn` o `next-week-btn`.
      - Se c'è una corrispondenza, **modifica lo stato centrale** (`state.currentDate`), aggiungendo o sottraendo 7 giorni.
      - Infine, invoca `appCycle()`.

  4.  **Architettura Reattiva**: Questo passo dimostra la potenza del nostro approccio. Non dobbiamo manipolare manualmente la UI per aggiornare le date. Semplicemente modifichiamo lo stato, e la chiamata a `appCycle` si occupa di ridisegnare l'intera vista del calendario in base al nuovo stato. Questo rende il codice più semplice e prevedibile.
patches:
  - file: src/main.js
    content: |
      /**
       * @file main.js
       *
       * Punto di ingresso principale dell'applicazione "Mio Trainer Personale".
       * Orchestra i vari moduli (UI, stato, logica, etc.).
       */
      import * as ui from './ui.js';
      import * as store from './store.js';
      import { EXERCISES } from './config.js';
      import { state } from './state.js';

      /**
       * Il ciclo di rendering principale dell'applicazione.
       * Viene chiamato ogni volta che lo stato cambia per aggiornare la UI.
       */
      function appCycle() {
          const schedule = store.getSchedule();
          ui.renderCalendar(state.currentDate, schedule);
      }

      /**
       * Gestisce gli eventi di click per la navigazione del calendario.
       * @param {Event} event
       */
      function handleCalendarNavigation(event) {
          const targetId = event.target.id;

          if (targetId === 'prev-week-btn') {
              state.currentDate.setDate(state.currentDate.getDate() - 7);
              appCycle();
          }

          if (targetId === 'next-week-btn') {
              state.currentDate.setDate(state.currentDate.getDate() + 7);
              appCycle();
          }
      }

      function init() {
          console.log("MTP App Initialized.");

          // Aggiungi i listener degli eventi principali
          ui.calendarView.addEventListener('click', handleCalendarNavigation);

          // Carica i dati salvati e loggali per verifica
          const schedule = store.getSchedule();
          console.log("Loaded schedule from store:", schedule);
          console.log("Available exercises from config:", EXERCISES);

          // Mostra la vista iniziale ed esegui il primo rendering
          ui.showView('calendar-view');
          appCycle();
      }

      // Assicurati che il DOM sia completamente caricato prima di eseguire la logica
      document.addEventListener('DOMContentLoaded', init);
commands:
  - "echo 'Patch applicato. La logica di navigazione è stata aggiunta.'"
  - "echo \"Ora prova a cliccare sui pulsanti 'Precedente' e 'Successiva'. La vista del calendario dovrebbe aggiornarsi.\""
  - "git status"