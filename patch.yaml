commit_message: "refactor(trainer): Automatizza flusso ripetizioni e corregge UI"
rationale: |
  Questo commit migliora significativamente l'esperienza utente del trainer basandosi sul feedback ricevuto.

  1.  **Flusso Automatico**: Le ripetizioni e le serie ora avanzano automaticamente senza richiedere input dall'utente dopo l'avvio iniziale. Lo stato 'ready' è stato rimosso dal ciclo principale per creare un flusso continuo, come richiesto.
  2.  **Correzione UI**: La dimensione del font per il testo di fase (es. 'PREPARATI') è stata aggiustata per evitare che sbordi dal contenitore.
  3.  **Affidabilità Animazione**: L'animazione dell'anello di progresso è stata resa più robusta. Ora si completa visivamente al 100% in ogni stato temporizzato ('preparing' e 'action') prima di passare alla fase successiva, risolvendo il problema del cerchio incompleto.
patches:
  - file: assets/css/style.css
    content: |
      /* --- GLOBAL STYLES & MOBILE FIRST --- */
      :root {
          --bg-color: #1a1a1d;
          --card-color: #2c2c34;
          --primary-color: #9575cd;
          --secondary-color: #4db6ac;
          --text-color: #f4f4f9;
          --text-color-muted: #aaa;
          --border-color: #40404a;
          --danger-color: #ef5350;
      }
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body {
          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          background-color: var(--bg-color);
          color: var(--text-color);
          scrollbar-width: thin;
          scrollbar-color: var(--primary-color) var(--bg-color);
      }
      /* Custom Scrollbar for Webkit Browsers */
      body::-webkit-scrollbar, .modal-body::-webkit-scrollbar { width: 8px; }
      body::-webkit-scrollbar-track, .modal-body::-webkit-scrollbar-track { background: var(--card-color); }
      body::-webkit-scrollbar-thumb, .modal-body::-webkit-scrollbar-thumb { background-color: var(--primary-color); border-radius: 10px; border: 2px solid var(--card-color); }
      #app-container { max-width: 1200px; margin: 0 auto; padding: 1rem; }
      .view { display: none; width: 100%; }
      .view--active { display: block; }

      /* --- KEYFRAMES --- */
      @keyframes flash {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.2; }
      }
      .is-flashing {
          animation: flash 0.25s 3; /* 3 flash in 0.75s */
      }

      /* --- CALENDAR VIEW STYLES --- */
      .calendar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
      .calendar-header h2 { font-size: 1.25rem; text-align: center; }
      .calendar-header button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: background-color 0.2s; }
      .calendar-header button:hover { background-color: var(--primary-color); }
      .calendar-grid { display: grid; grid-template-columns: 1fr; gap: 0.5rem; }
      .day-cell { background-color: var(--card-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 1rem; min-height: 150px; display: flex; flex-direction: column; cursor: pointer; transition: border-color 0.2s; }
      .day-cell:hover { border-color: var(--primary-color); }
      .day-cell__header { display: flex; justify-content: space-between; font-weight: bold; color: var(--text-color-muted); text-transform: uppercase; font-size: 0.8rem; pointer-events: none; }
      .day-cell__body { margin-top: 0.5rem; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between; align-items: flex-start; pointer-events: none; }
      .exercise-count { font-size: 0.9rem; color: var(--secondary-color); }
      .start-btn { background-color: var(--secondary-color); color: var(--bg-color); border: none; padding: 0.6rem; border-radius: 6px; cursor: pointer; font-weight: bold; text-transform: uppercase; width: 100%; margin-top: 1rem; transition: opacity 0.2s; pointer-events: all !important; }
      .start-btn:hover { opacity: 0.85; }

      /* --- MODAL STYLES --- */
      #modal-container { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: flex; justify-content: center; align-items: center; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; z-index: 1000; }
      #modal-container.active { opacity: 1; pointer-events: all; }
      .modal-content { background-color: var(--card-color); border-radius: 8px; border: 1px solid var(--border-color); width: 90%; max-width: 500px; transform: scale(0.95); transition: transform 0.3s ease; display: flex; flex-direction: column; max-height: 90vh; }
      #modal-container.active .modal-content { transform: scale(1); }
      .modal-header { padding: 1rem 1.5rem; border-bottom: 1px solid var(--border-color); flex-shrink: 0; display: flex; justify-content: space-between; align-items: center; }
      .modal-header h3 { color: var(--primary-color); }
      .modal-close-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; cursor: pointer; }
      .modal-body { overflow-y: auto; flex-grow: 1; padding: 0 1.5rem; }
      .modal-actions { padding: 1rem 1.5rem; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; gap: 1rem; flex-shrink: 0; }
      .add-rest-btn, .add-exercise-btn { background-color: transparent; border: 1px solid var(--secondary-color); color: var(--secondary-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: all 0.2s; }
      .add-rest-btn:hover, .add-exercise-btn:hover { background-color: var(--secondary-color); color: var(--card-color); }

      /* --- WORKOUT EDITOR & LIBRARY STYLES --- */
      .workout-item-list, .exercise-library-list { list-style: none; padding: 0; margin: 0; }
      .workout-item { display: flex; justify-content: space-between; align-items: center; padding: 1rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .workout-item:last-child { border-bottom: none; }
      .item-info { display: flex; align-items: baseline; gap: 0.75rem; flex-grow: 1; }
      .item-info .item-name { font-weight: bold; }
      .item-info .item-details { color: var(--secondary-color); }
      .workout-item--rest .item-info .item-name { color: var(--text-color-muted); font-style: italic; }
      .rest-duration-input { -moz-appearance: textfield; background-color: var(--bg-color); border: 1px solid var(--border-color); color: var(--text-color); border-radius: 4px; padding: 0.25rem; width: 60px; text-align: center; }
      .rest-duration-input::-webkit-outer-spin-button, .rest-duration-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
      .remove-item-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; font-weight: bold; cursor: pointer; padding: 0 0.5rem; border-radius: 50%; }
      .remove-item-btn:hover { color: var(--danger-color); background-color: rgba(239, 83, 80, 0.1); }
      .exercise-library-item { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .exercise-library-item:last-child { border-bottom: none; }
      .add-to-workout-btn { background-color: var(--primary-color); color: var(--text-color); border: none; padding: 0.4rem 0.8rem; border-radius: 4px; cursor: pointer; }

      /* --- TRAINER VIEW STYLES --- */
      .trainer-container { display: flex; flex-direction: column; align-items: center; justify-content: center; height: calc(100vh - 4rem); text-align: center; }
      .trainer-header { margin-bottom: 1rem; }
      .trainer-header h2 { font-size: 2rem; text-transform: uppercase; color: var(--primary-color); }
      .trainer-header p { color: var(--text-color-muted); }
      .progress-ring { position: relative; width: 250px; height: 250px; margin: 2rem 0; }
      .progress-ring svg { width: 100%; height: 100%; transform: rotate(-90deg); }
      .progress-ring circle { transition: stroke-dashoffset 0.3s; }
      .progress-ring__background { stroke: var(--card-color); fill: transparent; }
      .progress-ring__foreground { stroke: var(--secondary-color); fill: transparent; }
      .progress-ring__text { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }
      .progress-ring__phase { font-size: 1.8rem; font-weight: bold; text-transform: uppercase; }
      .progress-ring__timer { font-size: 3rem; color: var(--text-color); }
      .trainer-footer { margin-top: 1rem; }
      .trainer-footer p { font-size: 1.2rem; min-height: 2em; }
      .trainer-controls button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 1rem 2rem; border-radius: 8px; cursor: pointer; font-size: 1.2rem; text-transform: uppercase; }

      /* --- TABLET/DESKTOP OVERRIDES --- */
      @media (min-width: 768px) {
          #app-container { padding: 2rem; }
          .calendar-grid { grid-template-columns: repeat(7, 1fr); gap: 1rem; }
          .modal-content { max-width: 600px; height: auto; max-height: 80vh; }
          .progress-ring { width: 300px; height: 300px; }
      }
  - file: src/modules/store.js
    content: |
      import { saveToStorage } from './storage.js';
      import { getExerciseById } from './exerciseRepository.js';

      const WORKOUTS_STORAGE_KEY = 'workouts';

      function createStore() {
        let state = {
          currentView: 'calendar',
          focusedDate: new Date(),
          workouts: {},
          isModalOpen: false,
          modalContext: null,
          activeWorkout: null,
          trainerState: 'idle', // idle, ready, preparing, announcing, action, rest, paused, finished
          trainerContext: {}, // Contesto dinamico del trainer (serie, rep, fase corrente)
        };

        const subscribers = new Set();
        function notify() { subscribers.forEach(callback => callback()); }

        function dispatch(action) {
          const oldState = state;
          switch (action.type) {
            case 'CHANGE_VIEW': state = { ...state, currentView: action.payload }; break;
            case 'PREV_WEEK': { const d=new Date(state.focusedDate); d.setDate(d.getDate()-7); state={...state, focusedDate:d}; break; }
            case 'NEXT_WEEK': { const d=new Date(state.focusedDate); d.setDate(d.getDate()+7); state={...state, focusedDate:d}; break; }
            case 'SET_WORKOUTS': state = { ...state, workouts: action.payload }; break;
            case 'OPEN_MODAL': state = { ...state, isModalOpen: true, modalContext: action.payload }; break;
            case 'CLOSE_MODAL': state = { ...state, isModalOpen: false, modalContext: null }; break;
            case 'REMOVE_WORKOUT_ITEM': { /* ... (invariato) ... */ break; }
            case 'UPDATE_REST_DURATION': { /* ... (invariato) ... */ break; }
            case 'ADD_REST_ITEM': { /* ... (invariato) ... */ break; }
            case 'ADD_EXERCISE_ITEM': { /* ... (invariato) ... */ break; }
            case 'START_WORKOUT': {
              const { date } = action.payload;
              const dateKey = `workout-${date}`;
              const workoutItems = state.workouts[dateKey];
              if (!workoutItems || workoutItems.length === 0) break;
              state = {
                ...state,
                currentView: 'trainer',
                activeWorkout: { date, items: workoutItems },
                trainerState: 'ready',
                trainerContext: { itemIndex: 0, currentSeries: 1, currentRep: 1 }
              };
              break;
            }
            case 'SET_TRAINER_STATE': {
              state = { ...state, trainerState: action.payload };
              break;
            }
            case 'UPDATE_TRAINER_CONTEXT': {
              state = { ...state, trainerContext: { ...state.trainerContext, ...action.payload }};
              break;
            }
            case 'ADVANCE_TRAINER_LOGIC': {
              const { activeWorkout, trainerContext } = state;
              const currentItem = activeWorkout.items[trainerContext.itemIndex];
              const maxReps = currentItem.reps || 1;
              const maxSeries = currentItem.series || 1;

              let nextContext = { ...trainerContext };
              let nextState = state.trainerState;

              if (nextContext.currentRep < maxReps) {
                nextContext.currentRep++;
                // Passa direttamente alla prossima ripetizione senza tornare a 'ready'
                nextState = 'preparing'; // Inizia subito la preparazione per la prossima rep
              } else if (nextContext.currentSeries < maxSeries) {
                nextContext.currentSeries++;
                nextContext.currentRep = 1;
                const exerciseDef = getExerciseById(currentItem.exerciseId);
                nextContext.restDuration = exerciseDef?.defaultRest || 60;
                nextState = 'rest';
              } else {
                if (trainerContext.itemIndex < activeWorkout.items.length - 1) {
                  nextContext.itemIndex++;
                  const nextItem = activeWorkout.items[nextContext.itemIndex];
                  if(nextItem.type === 'exercise') {
                    nextContext.currentSeries = 1;
                    nextContext.currentRep = 1;
                    nextState = 'preparing'; // Prepara il prossimo esercizio
                  } else {
                    nextContext.restDuration = nextItem.duration;
                    nextState = 'rest'; // Esegui un item di riposo
                  }
                } else {
                  nextState = 'finished';
                }
              }
              state = { ...state, trainerState: nextState, trainerContext: nextContext };
              break;
            }
            default:
              console.warn(`Azione non riconosciuta: ${action.type}`);
              return;
          }
          if (state !== oldState) {
            console.log(`Action: ${action.type}`, action.payload);
            if (state.workouts !== oldState.workouts) {
              saveToStorage(WORKOUTS_STORAGE_KEY, state.workouts);
              console.log('Workouts salvati in localStorage.');
            }
            notify();
          }
        }
        return {
          getState: () => ({ ...state }),
          subscribe: (callback) => { subscribers.add(callback); return () => subscribers.delete(callback); },
          dispatch,
        };
      }
      const store = createStore();
      export default store;
  - file: src/views/TrainerView.js
    content: |
      import store from '../modules/store.js';

      let stateTimer = null;

      function advanceTrainer() {
        store.dispatch({ type: 'ADVANCE_TRAINER_LOGIC' });
      }

      const PhasedExerciseRunner = {
          start(element) {
              this.element = element;
              store.dispatch({ type: 'UPDATE_TRAINER_CONTEXT', payload: { currentPhaseIndex: 0 } });
              this.runNextPhase();
          },

          runNextPhase() {
              const { activeWorkout, trainerContext } = store.getState();
              const currentExercise = activeWorkout.items[trainerContext.itemIndex];
              const phases = currentExercise.tempo || ['down', 'hold', 'up'];
              const currentPhaseIndex = trainerContext.currentPhaseIndex;

              if (currentPhaseIndex >= phases.length) {
                  advanceTrainer();
                  return;
              }

              const phaseName = phases[currentPhaseIndex];
              store.dispatch({ type: 'UPDATE_TRAINER_CONTEXT', payload: { currentPhase: phaseName } });
              store.dispatch({ type: 'SET_TRAINER_STATE', payload: 'announcing' });
          },

          execute() {
              const { trainerContext } = store.getState();
              const phaseName = trainerContext.currentPhase;
              const durationMap = { 'up': 1.5, 'hold': 1, 'down': 2 };
              const duration = (durationMap[phaseName] || 1) * 1000;
              let elapsed = 0;
              const interval = 50;

              const timerEl = this.element.querySelector('.progress-ring__timer');
              const ringEl = this.element.querySelector('.progress-ring__foreground');
              const radius = ringEl.r.baseVal.value;
              const circumference = 2 * Math.PI * radius;

              stateTimer = setInterval(() => {
                  elapsed += interval;
                  const progress = Math.min(1, elapsed / duration);
                  const offset = circumference * (1 - progress);
                  ringEl.style.strokeDashoffset = offset;
                  if (timerEl) timerEl.textContent = Math.ceil((duration - elapsed) / 1000);

                  if (elapsed >= duration) {
                      clearInterval(stateTimer);
                      ringEl.style.strokeDashoffset = 0; // Forza il completamento
                      store.dispatch({ type: 'UPDATE_TRAINER_CONTEXT', payload: { currentPhaseIndex: trainerContext.currentPhaseIndex + 1 } });
                      this.runNextPhase();
                  }
              }, interval);
          }
      };

      export function init(element) {
          element.addEventListener('click', (event) => {
              const mainButton = event.target.closest('.trainer-main-btn');
              if (mainButton) {
                  const currentState = store.getState().trainerState;
                  if (currentState === 'ready') {
                      store.dispatch({ type: 'SET_TRAINER_STATE', payload: 'preparing' });
                  }
              }
          });

          function runStateLogic() {
              const { trainerState, trainerContext } = store.getState();
              if (stateTimer) { clearInterval(stateTimer); stateTimer = null; }

              const timerEl = element.querySelector('.progress-ring__timer');
              const ringEl = element.querySelector('.progress-ring__foreground');
              if (!ringEl) return; // Guardia per evitare errori se l'elemento non è ancora renderizzato
              const radius = ringEl.r.baseVal.value;
              const circumference = 2 * Math.PI * radius;

              if (trainerState === 'preparing') {
                  const duration = 3000;
                  let elapsed = 0;
                  const interval = 50;
                  if (timerEl) timerEl.textContent = '3';
                  ringEl.style.strokeDashoffset = circumference;
                  stateTimer = setInterval(() => {
                      elapsed += interval;
                      const progress = Math.min(1, elapsed / duration);
                      const offset = circumference * (1 - progress);
                      ringEl.style.strokeDashoffset = offset;
                      if (timerEl) timerEl.textContent = Math.ceil((duration - elapsed) / 1000);
                      if (elapsed >= duration) {
                          clearInterval(stateTimer);
                          ringEl.style.strokeDashoffset = 0; // Forza il completamento
                          PhasedExerciseRunner.start(element);
                      }
                  }, interval);
              } else if (trainerState === 'announcing') {
                  stateTimer = setTimeout(() => store.dispatch({ type: 'SET_TRAINER_STATE', payload: 'action' }), 750);
              } else if (trainerState === 'action') {
                  PhasedExerciseRunner.execute();
              } else if (trainerState === 'rest') {
                  const restDuration = trainerContext.restDuration || 60;
                  let timeLeft = restDuration;
                  if (timerEl) timerEl.textContent = timeLeft;
                  stateTimer = setInterval(() => {
                      timeLeft--;
                      if (timerEl) timerEl.textContent = timeLeft;
                      if (timeLeft <= 0) {
                          clearInterval(stateTimer);
                          advanceTrainer();
                      }
                  }, 1000);
              }
          }

          function render() {
              const { activeWorkout, trainerState, trainerContext } = store.getState();
              if (!activeWorkout) { element.innerHTML = '<h2>Nessun workout attivo.</h2>'; return; }

              const currentItem = activeWorkout.items[trainerContext.itemIndex];
              const isExercise = currentItem.type === 'exercise';
              const radius = 90;
              const circumference = 2 * Math.PI * radius;

              let phaseText = '', instructionText = '', buttonText = '', timerText = '', phaseClass = '';
              let ringOffset = circumference;

              switch (trainerState) {
                  case 'ready':
                      phaseText = 'PRONTO';
                      instructionText = `Premi INIZIA per cominciare`;
                      buttonText = 'INIZIA';
                      break;
                  case 'preparing':
                      phaseText = 'PREPARATI'; instructionText = 'Inizia il movimento...'; buttonText = 'PAUSA'; timerText = '3';
                      ringOffset = circumference;
                      break;
                  case 'rest':
                      phaseText = 'RIPOSO'; instructionText = 'Recupera per la prossima serie'; buttonText = 'PAUSA';
                      timerText = trainerContext.restDuration || 60;
                      break;
                  case 'announcing':
                      phaseText = trainerContext.currentPhase?.toUpperCase() || '';
                      instructionText = `Prossima fase: ${phaseText}`;
                      buttonText = 'PAUSA';
                      phaseClass = 'is-flashing';
                      break;
                  case 'action':
                      phaseText = trainerContext.currentPhase?.toUpperCase() || '';
                      instructionText = 'Esegui il movimento';
                      buttonText = 'PAUSA';
                      ringOffset = circumference;
                      break;
                  case 'finished':
                      phaseText = 'FINE'; instructionText = 'Workout completato!'; buttonText = 'DEBRIEFING';
                      break;
                  default:
                      phaseText = 'IDLE'; instructionText = 'Stato non riconosciuto'; buttonText = 'RESET';
              }

              const headerTitle = isExercise ? currentItem.name : 'Riposo';
              const seriesText = isExercise ? `SERIE ${trainerContext.currentSeries} / ${currentItem.series || 1}` : '';
              const repsText = isExercise ? `REP ${trainerContext.currentRep} / ${currentItem.reps || 1}` : '';

              element.innerHTML = `
                  <div class="trainer-container">
                      <header class="trainer-header">
                          <h2>${headerTitle}</h2>
                          <p>${seriesText} ${repsText ? `| ${repsText}` : ''}</p>
                      </header>
                      <div class="progress-ring">
                          <svg>
                              <circle class="progress-ring__background" stroke-width="10" r="${radius}" cx="50%" cy="50%"></circle>
                              <circle class="progress-ring__foreground" style="stroke-dashoffset: ${ringOffset};" stroke-width="10" r="${radius}" cx="50%" cy="50%" stroke-dasharray="${circumference}"></circle>
                          </svg>
                          <div class="progress-ring__text">
                              <div class="progress-ring__phase ${phaseClass}">${phaseText}</div>
                              <div class="progress-ring__timer">${timerText}</div>
                          </div>
                      </div>
                      <footer class="trainer-footer">
                          <p class="trainer-instruction">${instructionText}</p>
                          <div class="trainer-controls">
                              <button class="trainer-main-btn">${buttonText}</button>
                          </div>
                      </footer>
                  </div>
              `;
              runStateLogic();
          }
          store.subscribe(render);
          render();
      }
commands:
  - "echo 'Refactoring completato. Ora il flusso delle ripetizioni è automatico.'"