commit_message: "fix(trainer): Correct end-of-workout flow and implement UX feedback"
rationale: |
  Questo patch corregge un bug critico nel flusso di fine allenamento e implementa una serie di importanti miglioramenti all'interfaccia e all'usabilità basati sul feedback dell'utente.

  1.  **Correzione Flusso Finale:** È stato corretto un bug nella macchina a stati in `trainer.js` che impediva la corretta transizione allo stato `FINISHED` al termine dell'ultimo esercizio. L'applicazione ora naviga correttamente alla vista di Debriefing.

  2.  **Miglioramento Testo Tempo:** La funzione `getExerciseDetails` in `ui.js` è stata aggiornata per mostrare etichette esplicite (`up`, `hold`, `down`) per i valori del tempo, come richiesto.

  3.  **Aggiunta Descrizione Esercizio:** Il modello dati in `workouts.js` è stato esteso per includere una `description`. Questa viene ora visualizzata nella vista del trainer per fornire più contesto all'utente.

  4.  **Correzione Etichetta Pulsante:** Il pulsante "Termina" ora ha la sua etichetta testuale, correggendo una svista precedente.

  5.  **Miglioramento UX Modale:** Il pulsante "Aggiungi Tutti" è stato rimosso e sostituito con un più utile "Inizia Allenamento". Questo permette all'utente di avviare un workout direttamente dal modale, snellendo significativamente il flusso operativo.
patches:
  - file: index.html
    content: |
      <!DOCTYPE html>
      <html lang="it">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Mio Trainer Personale</title>
          <link rel="stylesheet" href="style.css" />
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link
            href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:ital,wght@0,400;0,700;1,400&family=Teko:wght@400;600;700&display=swap"
            rel="stylesheet"
          />
        </head>
        <body>
          <div id="app-container">
            <div id="calendar-view" class="view view--active">
              <header id="calendar-header">
                <button id="prev-week-btn" class="btn">&lt;</button>
                <h1 id="current-month-year"></h1>
                <button id="next-week-btn" class="btn">&gt;</button>
              </header>
              <div id="calendar-grid"></div>
            </div>

            <div id="trainer-view" class="view">
              <h1 id="trainer-exercise-title"></h1>
              <div id="trainer-series-counter"></div>
              <div id="trainer-main-display">
                <svg id="trainer-progress-ring-svg" viewBox="0 0 100 100">
                  <circle class="progress-ring-bg" cx="50" cy="50" r="45"></circle>
                  <circle id="progress-ring-foreground" class="progress-ring-fg" cx="50" cy="50" r="45" pathLength="100"></circle>
                </svg>
                <span id="trainer-main-text"></span>
              </div>
              <div id="trainer-description"></div>
              <div id="trainer-controls">
                <button id="start-session-btn" class="btn btn-success">Inizia</button>
                <button id="pause-resume-btn" class="btn"></button>
                <button id="terminate-btn" class="btn btn-danger"></button>
              </div>
              <div id="trainer-full-description"></div>
            </div>

            <div id="debriefing-view" class="view">
              <h1>Workout Concluso</h1>
              <ul id="debriefing-summary"></ul>
              <div id="debriefing-report-container">
                <h2>Report da Condividere:</h2>
                <textarea id="debriefing-text-report" readonly></textarea>
                <button id="copy-report-btn" class="btn btn-primary">
                  Copia Report
                </button>
              </div>
              <div class="debriefing-actions">
                <a href="https://gemini.google.com/gem/3ddd32ed1a1a/644b02d78c11a9ed" target="_blank" id="gemini-btn" class="btn btn-primary">Incolla su Gemini</a>
                <button id="return-to-calendar-btn" class="btn btn-secondary">
                  Torna al Calendario
                </button>
              </div>
            </div>
          </div>

          <div id="day-modal" class="modal-overlay" style="display: none">
            <div class="modal-content">
              <h2 id="modal-date-title"></h2>
              <ul id="modal-exercise-list"></ul>
              <div class="modal-actions">
                <button id="start-from-modal-btn" class="btn btn-success">Inizia Allenamento</button>
                <button id="add-exercise-btn" class="btn btn-secondary">
                  Aggiungi Esercizio
                </button>
                <button id="close-day-modal-btn" class="btn">Chiudi</button>
              </div>
            </div>
          </div>

          <div id="library-modal" class="modal-overlay" style="display: none">
            <div class="modal-content">
              <h2>Libreria Esercizi</h2>
              <ul id="library-exercise-list"></ul>
              <div class="modal-actions">
                <button id="close-library-modal-btn" class="btn">Chiudi</button>
              </div>
            </div>
          </div>

          <script type="module" src="src/main.js"></script>
        </body>
      </html>
  - file: src/workouts.js
    content: |
      /**
       * @file workouts.js
       * Contains the master list of all available exercises in the application.
       */

      export const ALL_EXERCISES = [
        {
          id: 'pushup',
          name: 'Push Up',
          type: 'reps',
          series: 3,
          reps: 10,
          rest: 60, // seconds
          tempo: { up: 1, hold: 1, down: 2 }, // seconds
          description: "Esercizio a corpo libero per pettorali, tricipiti e spalle. Mantenere il corpo in linea retta dalla testa ai talloni."
        },
        {
          id: 'squat',
          name: 'Squat a corpo libero',
          type: 'reps',
          series: 3,
          reps: 12,
          rest: 60,
          tempo: { up: 1, hold: 0, down: 2 },
          description: "Esercizio fondamentale per gambe e glutei. Scendere come per sedersi su una sedia, mantenendo la schiena dritta."
        },
        {
          id: 'plank',
          name: 'Plank',
          type: 'time',
          series: 3,
          duration: 45, // seconds
          rest: 45,
          description: "Esercizio isometrico per il core. Mantenere una linea retta e contrarre gli addominali per tutta la durata."
        },
        {
          id: 'burpees',
          name: 'Burpees',
          type: 'reps',
          series: 4,
          reps: 8,
          rest: 90,
          tempo: { up: 1, hold: 0, down: 1 },
          description: "Esercizio total body ad alta intensità. Combina un push-up, uno squat e un salto verticale in un unico movimento fluido."
        },
        {
          id: 'jumping_jacks',
          name: 'Jumping Jacks',
          type: 'time',
          series: 2,
          duration: 60,
          rest: 30,
          description: "Esercizio cardiovascolare classico per riscaldamento o per aumentare la frequenza cardiaca."
        },
        {
          id: 'calf_raises',
          name: 'Calf Raises',
          type: 'reps',
          series: 3,
          reps: 15,
          rest: 45,
          tempo: { up: 1, hold: 1, down: 2 },
          description: "Esercizio di isolamento per i polpacci. Sollevarsi sulla punta dei piedi, mantenere la contrazione e scendere lentamente."
        }
      ];
  - file: src/ui.js
    content: |
      /**
       * @file ui.js
       * Responsible for all direct DOM manipulations and user feedback (visual/audio).
       */

      // --- Elements ---
      const views = {
        calendar: document.getElementById('calendar-view'),
        trainer: document.getElementById('trainer-view'),
        debriefing: document.getElementById('debriefing-view')
      };
      const trainerExerciseTitle = document.getElementById('trainer-exercise-title');
      const trainerSeriesCounter = document.getElementById('trainer-series-counter');
      const trainerMainText = document.getElementById('trainer-main-text');
      const trainerMainDisplay = document.getElementById('trainer-main-display');
      const trainerDescription = document.getElementById('trainer-description');
      const trainerFullDescription = document.getElementById('trainer-full-description');
      const startSessionBtn = document.getElementById('start-session-btn');
      const pauseResumeBtn = document.getElementById('pause-resume-btn');
      const terminateBtn = document.getElementById('terminate-btn');
      const progressRingFg = document.getElementById('progress-ring-foreground');

      export function updateProgressOnly(percentage) {
        if (isNaN(percentage)) return;
        const offset = 100 - percentage;
        progressRingFg.style.strokeDashoffset = Math.max(0, Math.min(100, offset));
      }

      export function showView(viewName) {
        Object.values(views).forEach(view => view.classList.remove('view--active'));
        if (views[viewName]) views[viewName].classList.add('view--active');
      }

      function getExerciseDetails(exercise) {
        if (!exercise) return '';
        if (exercise.type === 'reps') {
          const tempo = exercise.tempo;
          return `${exercise.series} serie × ${exercise.reps} rip. | Tempo: up ${tempo.up}s - hold ${tempo.hold}s - down ${tempo.down}s`;
        } else { // time
          return `${exercise.series} serie × ${exercise.duration} secondi`;
        }
      }

      export function updateTrainerUI(state) {
        const { exercise, currentSeries, currentRep, phase, totalDuration, currentState, pausedState } = state;
        const displayState = currentState === 'paused' ? pausedState : state;

        trainerExerciseTitle.textContent = displayState.exercise ? displayState.exercise.name : 'Workout';
        trainerDescription.textContent = getExerciseDetails(displayState.exercise);
        trainerFullDescription.textContent = displayState.exercise ? displayState.exercise.description : '';
        
        if (displayState.exercise) {
          let seriesText = `Serie ${displayState.currentSeries} / ${displayState.exercise.series}`;
          const isAction = currentState === 'action' || (currentState === 'paused' && pausedState?.currentState === 'action');
          if (displayState.exercise.type === 'reps' && isAction) {
            seriesText += `  |  Rip. ${displayState.currentRep} / ${displayState.exercise.reps}`;
          }
          trainerSeriesCounter.textContent = seriesText;
        } else {
          trainerSeriesCounter.textContent = '';
        }

        if (currentState === 'paused') {
            const interruptedPhase = pausedState?.phase || '';
            trainerMainText.innerHTML = `PAUSA<br><small style="text-transform: capitalize;">${interruptedPhase.toLowerCase()}</small>`;
        } else if (displayState.totalDuration > 0) {
            trainerMainText.innerHTML = `${displayState.phase}<br><small>${displayState.totalDuration}s</small>`;
        } else {
            trainerMainText.textContent = displayState.phase;
        }

        if (currentState === 'announcing') {
            trainerMainDisplay.classList.add('is-flashing');
        } else {
            trainerMainDisplay.classList.remove('is-flashing');
        }
        
        startSessionBtn.style.display = currentState === 'ready' ? 'block' : 'none';
        const inProgress = currentState !== 'ready' && currentState !== 'idle' && currentState !== 'finished';
        pauseResumeBtn.style.display = inProgress ? 'block' : 'none';
        terminateBtn.style.display = inProgress ? 'block' : 'none';
        
        const canBeInterrupted = currentState === 'action' || currentState === 'announcing' || currentState === 'paused';
        pauseResumeBtn.disabled = !canBeInterrupted;
        terminateBtn.textContent = 'Termina';
        pauseResumeBtn.textContent = currentState === 'paused' ? 'Riprendi' : 'Pausa';
      }

      export function initTrainerControls(handlers) {
          startSessionBtn.addEventListener('click', () => handlers.onConfirmStart());
          pauseResumeBtn.addEventListener('click', () => handlers.onPauseResume());
          terminateBtn.addEventListener('click', () => handlers.onTerminate());
      }
  - file: src/trainer.js
    content: |
      /**
       * @file trainer.js
       * Contains the entire state machine logic for the training session.
       */
      import * as ui from './ui.js';
      import { showDebriefing } from './debriefing.js';

      const STATES = {
        IDLE: 'idle',
        READY: 'ready',
        ANNOUNCING: 'announcing',
        ACTION: 'action',
        PAUSED: 'paused',
        FINISHED: 'finished',
      };

      let state = {
        currentState: STATES.IDLE,
        workout: [],
        exercise: null,
        currentExerciseIndex: 0,
        currentSeries: 0,
        currentRep: 0,
        phase: '',
        totalDuration: 0,
        animationFrameId: null,
        timerStartTime: 0,
        timeOffsetMs: 0,
        onTimerComplete: null,
        pausedState: null,
      };

      function clearTimers() {
        cancelAnimationFrame(state.animationFrameId);
        state.animationFrameId = null;
      }

      function setState(newState, payload = {}) {
        clearTimers();
        state = { ...state, ...payload, currentState: newState };
        if (newState !== STATES.PAUSED) {
            ui.updateTrainerUI(state);
        }
      }

      function transitionTo(phaseText, duration, onCompleteAction) {
        setState(STATES.ANNOUNCING, { phase: phaseText, totalDuration: duration });
        setTimeout(() => {
          if (state.currentState === STATES.ANNOUNCING) {
             if (onCompleteAction) onCompleteAction();
          }
        }, 750);
      }

      function runCountdown(duration, phaseText, onComplete, timeOffsetMs = 0) {
          setState(STATES.ACTION, { phase: phaseText, totalDuration: duration });
          state.onTimerComplete = onComplete;
          state.timeOffsetMs = timeOffsetMs;
          state.timerStartTime = Date.now();
          const tick = () => {
              const elapsedMs = (Date.now() - state.timerStartTime) + state.timeOffsetMs;
              const progress = Math.min(100, (elapsedMs / (duration * 1000)) * 100);
              ui.updateProgressOnly(progress);
              if (elapsedMs >= duration * 1000) {
                  clearTimers();
                  if (state.onTimerComplete) state.onTimerComplete();
              } else {
                  state.animationFrameId = requestAnimationFrame(tick);
              }
          };
          tick();
      }
      
      function runTempoCycle() {
          const tempo = state.exercise.tempo;
          const executePhase = (phaseName, duration, nextPhase) => {
              if (duration > 0) transitionTo(phaseName.toUpperCase(), duration, () => runCountdown(duration, phaseName.toUpperCase(), nextPhase));
              else nextPhase();
          };
          const doDown = () => executePhase('down', tempo.down, doUp);
          const doHold = () => executePhase('hold', tempo.hold, doDown);
          const doUp = () => {
              if (state.currentRep < state.exercise.reps) {
                  state.currentRep++;
                  ui.updateTrainerUI(state);
                  executePhase('up', tempo.up, doHold);
              } else {
                  handleRest();
              }
          };
          doUp();
      }

      function handleRest() {
        const isLastSeries = state.currentSeries >= state.exercise.series;
        if (isLastSeries) {
          const isLastExercise = state.currentExerciseIndex >= state.workout.length - 1;
          if (isLastExercise) {
            setState(STATES.FINISHED);
            const result = { ...state, wasTerminated: false };
            showDebriefing(result);
            return;
          }
        }
        
        const onRestComplete = () => {
            if (state.currentSeries < state.exercise.series) {
                state.currentSeries++;
                startExercise();
            } else {
                state.currentExerciseIndex++;
                state.currentSeries = 1;
                startExercise();
            }
        };
        transitionTo('Riposo', state.exercise.rest, () => runCountdown(state.exercise.rest, 'Riposo', onRestComplete));
      }

      function startExercise() {
        state.exercise = state.workout[state.currentExerciseIndex];
        transitionTo("Pronti?", 3, () => {
            runCountdown(3, 'VIA!', () => {
                if (state.exercise.type === 'reps') {
                    runTempoCycle();
                } else {
                    transitionTo("Azione", state.exercise.duration, () => runCountdown(state.exercise.duration, "Azione", handleRest));
                }
            });
        });
      }

      export function startTrainer(exercises) {
        if (!exercises || exercises.length === 0) return;
        const freshState = { workout: JSON.parse(JSON.stringify(exercises)), currentExerciseIndex: 0, currentSeries: 0, currentRep: 0 };
        state = { ...state, ...freshState };
        ui.showView('trainer');
        setState(STATES.READY, {phase: "Pronto?"});
      }

      export function confirmStart() {
        if (state.currentState === STATES.READY) startExercise();
      }

      export function pauseOrResumeTrainer() {
        if (state.currentState === STATES.PAUSED) {
            const ps = state.pausedState;
            runCountdown(ps.totalDuration, ps.phase, ps.onTimerComplete, ps.timeOffsetMs);
        } else {
            clearTimers();
            const elapsed = (Date.now() - state.timerStartTime) + state.timeOffsetMs;
            const pausedContext = {
                totalDuration: state.totalDuration,
                phase: state.phase,
                onTimerComplete: state.onTimerComplete,
                timeOffsetMs: elapsed,
                exercise: state.exercise,
                currentSeries: state.currentSeries,
                currentRep: state.currentRep,
                currentState: state.currentState
            };
            setState(STATES.PAUSED, { pausedState: pausedContext });
            ui.updateTrainerUI(state);
        }
      }

      export function terminateTrainer() {
          clearTimers();
          const result = { ...state, wasTerminated: true };
          showDebriefing(result);
          setState(STATES.IDLE, { phase: '' });
      }
  - file: src/modal.js
    content: |
      /**
       * @file modal.js
       * Handles all logic for the workout editor and exercise library modals.
       */
      import * as storage from './storage.js';
      import { ALL_EXERCISES } from './workouts.js';
      import { renderCalendar } from './calendar.js';
      import { startTrainer } from './trainer.js';

      // DOM Elements
      const dayModal = document.getElementById('day-modal');
      const libraryModal = document.getElementById('library-modal');
      const modalDateTitle = document.getElementById('modal-date-title');
      const modalExerciseList = document.getElementById('modal-exercise-list');
      const libraryExerciseList = document.getElementById('library-exercise-list');
      const addExerciseBtn = document.getElementById('add-exercise-btn');
      const startFromModalBtn = document.getElementById('start-from-modal-btn');
      const closeDayModalBtn = document.getElementById('close-day-modal-btn');
      const closeLibraryModalBtn = document.getElementById('close-library-modal-btn');

      // State
      let currentEditingDateKey = null;

      function renderDayExercises() {
        modalExerciseList.innerHTML = '';
        const exercises = storage.getWorkoutsForDate(currentEditingDateKey);
        
        startFromModalBtn.disabled = exercises.length === 0;

        if (exercises.length === 0) {
          modalExerciseList.innerHTML = `<li class="empty-list-item">Aggiungi un esercizio per iniziare.</li>`;
          return;
        }

        exercises.forEach((exercise, index) => {
          const li = document.createElement('li');
          li.className = 'modal-list-item';
          li.innerHTML = `
            <span>${exercise.name}</span>
            <button class="btn btn-danger remove-exercise-btn" data-index="${index}">Rimuovi</button>
          `;
          modalExerciseList.appendChild(li);
        });
      }

      function renderLibrary() {
        libraryExerciseList.innerHTML = '';
        ALL_EXERCISES.forEach(exercise => {
          const li = document.createElement('li');
          li.className = 'modal-list-item';
          li.innerHTML = `
            <span>${exercise.name}</span>
            <button class="btn btn-success add-from-library-btn" data-id="${exercise.id}">Aggiungi</button>
          `;
          libraryExerciseList.appendChild(li);
        });
      }

      export function openDayModal(dateKey) {
        currentEditingDateKey = dateKey;
        const date = new Date(dateKey + 'T00:00:00');
        modalDateTitle.textContent = `Allenamento per ${date.toLocaleDateString('it-IT', { weekday: 'long', day: 'numeric', month: 'long' })}`;
        renderDayExercises();
        dayModal.style.display = 'flex';
      }

      function closeDayModal() {
        dayModal.style.display = 'none';
        renderCalendar();
      }

      function openLibraryModal() {
        renderLibrary();
        libraryModal.style.display = 'flex';
      }

      function closeLibraryModal() {
        libraryModal.style.display = 'none';
      }

      export function initModals() {
        closeDayModalBtn.addEventListener('click', closeDayModal);
        closeLibraryModalBtn.addEventListener('click', closeLibraryModal);
        addExerciseBtn.addEventListener('click', openLibraryModal);

        startFromModalBtn.addEventListener('click', () => {
            const exercises = storage.getWorkoutsForDate(currentEditingDateKey);
            if(exercises.length > 0) {
                closeDayModal();
                startTrainer(exercises);
            }
        });

        modalExerciseList.addEventListener('click', (event) => {
          if (event.target.matches('.remove-exercise-btn')) {
            const indexToRemove = parseInt(event.target.dataset.index, 10);
            const exercises = storage.getWorkoutsForDate(currentEditingDateKey);
            exercises.splice(indexToRemove, 1);
            storage.saveWorkoutsForDate(currentEditingDateKey, exercises);
            renderDayExercises();
          }
        });

        libraryExerciseList.addEventListener('click', (event) => {
          if (event.target.matches('.add-from-library-btn')) {
            const exerciseId = event.target.dataset.id;
            const exerciseToAdd = ALL_EXERCISES.find(ex => ex.id === exerciseId);
            if (exerciseToAdd) {
              const currentExercises = storage.getWorkoutsForDate(currentEditingDateKey);
              if (!currentExercises.some(ex => ex.id === exerciseId)) {
                currentExercises.push(exerciseToAdd);
                storage.saveWorkoutsForDate(currentEditingDateKey, currentExercises);
              }
            }
            renderDayExercises();
            closeLibraryModal();
          }
        });
      }
  - file: style.css
    content: |
      :root {
        --bg-color: #1a1a1d;
        --card-color: #2c2c34;
        --primary-color: #9575cd;
        --secondary-color: #4db6ac;
        --text-color: #f4f4f9;
        --text-secondary: #b3b3b3;
        --danger-color: #ef5350;
        --success-color: #66bb6a;
        --border-color: #4a4a52;
      }
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body { font-family: "Roboto Condensed", sans-serif; background-color: var(--bg-color); color: var(--text-color); display: flex; justify-content: center; align-items: flex-start; min-height: 100vh; padding: 1rem; }
      #app-container { width: 100%; max-width: 1200px; position: relative; }
      h1, h2 { font-family: "Teko", sans-serif; font-weight: 600; color: var(--primary-color); text-align: center; margin-bottom: 1.5rem; }
      .view { display: none; }
      .view--active { display: flex; flex-direction: column; align-items: center; }
      #calendar-view { display: none; }
      #calendar-view.view--active { display: block; }
      #calendar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; }
      #calendar-header h1 { margin: 0; }
      #calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); gap: 1rem; }
      .day-cell { background-color: var(--card-color); border-radius: 8px; padding: 1rem; display: flex; flex-direction: column; justify-content: space-between; border-left: 4px solid transparent; transition: transform 0.2s ease-out, border-color 0.2s ease-out; cursor: pointer; }
      .day-cell:hover { transform: translateY(-4px); border-left-color: var(--primary-color); }
      .day-name { font-weight: bold; text-transform: capitalize; font-size: 1.1rem; color: var(--text-secondary); }
      .day-number { font-family: "Teko", sans-serif; font-size: 3rem; font-weight: 700; text-align: center; margin: 0.5rem 0; }
      .day-summary { font-size: 0.9rem; color: var(--text-secondary); min-height: 2.5em; text-align: center; }
      .btn { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.75rem 1.5rem; border-radius: 6px; font-family: "Roboto Condensed", sans-serif; font-weight: bold; text-transform: uppercase; cursor: pointer; transition: background-color 0.2s, transform 0.2s; display: block; width: 100%; text-align: center; margin-top: 1rem; }
      .btn:hover:not(:disabled) { transform: scale(1.02); }
      .btn:disabled { opacity: 0.5; cursor: not-allowed; }
      .btn.btn-primary { background-color: var(--primary-color); border-color: var(--primary-color); }
      .btn.btn-secondary { background-color: var(--secondary-color); border-color: var(--secondary-color); color: var(--bg-color); }
      .btn.btn-danger { background-color: var(--danger-color); border-color: var(--danger-color); }
      .btn.btn-success { background-color: var(--success-color); border-color: var(--success-color); }
      .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: none; justify-content: center; align-items: center; z-index: 1000; }
      .modal-content { background-color: var(--card-color); padding: 2rem; border-radius: 8px; width: 90%; max-width: 500px; max-height: 80vh; display: flex; flex-direction: column; }
      .modal-content h2 { margin-top: 0; }
      .modal-content ul { list-style: none; padding: 0; overflow-y: auto; flex-grow: 1; margin: 1rem 0; }
      .modal-list-item { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; border-bottom: 1px solid var(--border-color); }
      .modal-list-item:last-child { border-bottom: none; }
      .modal-list-item .btn { width: auto; max-width: 120px; margin-top: 0; }
      .empty-list-item { color: var(--text-secondary); text-align: center; padding: 2rem; }
      .modal-actions { display: flex; flex-wrap: wrap; gap: 1rem; justify-content: flex-end; margin-top: 1.5rem; }
      .modal-actions .btn { width: auto; margin-top: 0; flex-shrink: 0; }
      #trainer-view, #debriefing-view { gap: 1rem; }
      #trainer-exercise-title { font-size: 2.5rem; text-align: center; }
      #trainer-series-counter { font-size: 1.5rem; color: var(--text-secondary); min-height: 1.5rem; }
      #trainer-description { color: var(--text-secondary); text-align: center; padding: 0 1rem; }
      #trainer-full-description { font-size: 0.9rem; max-width: 400px; text-align: center; color: var(--text-secondary); margin-top: 1rem; }
      #trainer-main-display { width: 300px; height: 300px; margin: 1rem 0; position: relative; display: flex; justify-content: center; align-items: center; }
      #trainer-main-text { font-family: 'Teko', sans-serif; font-size: 5.5rem; line-height: 1; text-align: center; }
      #trainer-main-text small { font-size: 2.5rem; color: var(--text-secondary); }
      #trainer-progress-ring-svg { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }
      .progress-ring-bg { fill: transparent; stroke: var(--card-color); stroke-width: 8; }
      .progress-ring-fg { fill: transparent; stroke: var(--primary-color); stroke-width: 8; stroke-linecap: round; transform: rotate(-90deg); transform-origin: 50% 50%; stroke-dasharray: 100; stroke-dashoffset: 100; }
      #trainer-controls { display: flex; gap: 1rem; }
      #trainer-controls .btn { width: 150px; }
      #debriefing-summary { list-style: none; padding: 0; width: 100%; max-width: 500px; background-color: var(--card-color); border-radius: 8px; }
      .debrief-exercise-name small { color: var(--text-secondary); display: block; font-size: 0.8rem; }
      #debriefing-report-container { width: 100%; max-width: 500px; }
      #debriefing-report-container textarea { width: 100%; min-height: 150px; background-color: var(--bg-color); color: var(--text-color); border: 1px solid var(--border-color); border-radius: 6px; padding: 0.5rem; font-family: monospace; }
      .debriefing-actions { display: flex; gap: 1rem; width: 100%; max-width: 500px; }
      .debriefing-actions .btn { flex-grow: 1; margin-top: 0; }
      @keyframes flash { 0%, 100% { opacity: 1; } 50% { opacity: 0.3; } }
      .is-flashing { animation: flash 0.75s infinite; }
      @media (max-width: 768px) {
        body { padding: 1rem; }
        #calendar-grid { grid-template-columns: 1fr; gap: 0.5rem; }
        #calendar-header { margin-bottom: 1rem; }
        #trainer-main-display { width: 250px; height: 250px; }
        #trainer-main-text { font-size: 4.5rem; }
      }