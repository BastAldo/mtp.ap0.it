commit_message: "fix(ui): Adjust trainer font size and refactor progress ring to use pathLength"
rationale: |
  Questo patch corregge due problemi di visualizzazione critici nella vista trainer per migliorare l'usabilità e l'affidabilità dell'interfaccia.

  1.  **Correzione Testo Troncato:** È stata ridotta la `font-size` dell'elemento `#trainer-main-text` nel CSS. Questo assicura che etichette come "Preparati!" siano visualizzate per intero all'interno del cerchio, risolvendo il problema di leggibilità.

  2.  **Refactoring Anello di Progresso con `pathLength`:** Per risolvere in modo definitivo il bug dell'animazione che partiva da una posizione errata, l'implementazione è stata modificata utilizzando l'attributo SVG `pathLength="100"`. Questo approccio è superiore perché:
      - Semplifica drasticamente il codice JavaScript in `ui.js`, eliminando la necessità di calcolare la circonferenza.
      - Crea una mappatura diretta 1:1 tra la percentuale di progresso (0-100) e l'offset del tratto SVG, eliminando la fonte degli errori di calcolo precedenti.
      - Rende il componente UI più robusto, dichiarativo e manutenibile.
patches:
  - file: index.html
    content: |
      <!DOCTYPE html>
      <html lang="it">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Mio Trainer Personale</title>
          <link rel="stylesheet" href="style.css" />
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link
            href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:ital,wght@0,400;0,700;1,400&family=Teko:wght@400;600;700&display=swap"
            rel="stylesheet"
          />
        </head>
        <body>
          <div id="app-container">
            <div id="calendar-view" class="view view--active">
              <header id="calendar-header">
                <button id="prev-week-btn" class="btn">&lt;</button>
                <h1 id="current-month-year"></h1>
                <button id="next-week-btn" class="btn">&gt;</button>
              </header>
              <div id="calendar-grid"></div>
            </div>

            <div id="trainer-view" class="view">
              <h1 id="trainer-exercise-title"></h1>
              <div id="trainer-series-counter"></div>
              <div id="trainer-main-display">
                <svg id="trainer-progress-ring-svg" viewBox="0 0 100 100">
                  <circle class="progress-ring-bg" cx="50" cy="50" r="45"></circle>
                  <circle id="progress-ring-foreground" class="progress-ring-fg" cx="50" cy="50" r="45" pathLength="100"></circle>
                </svg>
                <span id="trainer-main-text"></span>
              </div>
              <div id="trainer-description"></div>
              <div id="trainer-controls">
                <button id="start-session-btn" class="btn btn-success">Inizia</button>
                <button id="pause-resume-btn" class="btn"></button>
                <button id="terminate-btn" class="btn btn-danger"></button>
              </div>
            </div>

            <div id="debriefing-view" class="view">
              <h1>Workout Completato!</h1>
              <div id="debriefing-summary"></div>
              <div id="debriefing-report-container">
                <h2>Copia per il tuo coach:</h2>
                <textarea id="debriefing-text-report" readonly></textarea>
                <button id="copy-report-btn" class="btn btn-primary">
                  Copia Report
                </button>
              </div>
              <button id="return-to-calendar-btn" class="btn btn-secondary">
                Torna al Calendario
              </button>
            </div>
          </div>

          <div id="day-modal" class="modal-overlay" style="display: none">
            <div class="modal-content">
              <h2 id="modal-date-title"></h2>
              <ul id="modal-exercise-list"></ul>
              <div class="modal-actions">
                <button id="add-exercise-btn" class="btn btn-secondary">
                  Aggiungi Esercizio
                </button>
                <button id="close-day-modal-btn" class="btn">Chiudi</button>
              </div>
            </div>
          </div>

          <div id="library-modal" class="modal-overlay" style="display: none">
            <div class="modal-content">
              <h2>Libreria Esercizi</h2>
              <ul id="library-exercise-list"></ul>
              <div class="modal-actions">
                <button id="close-library-modal-btn" class="btn">Chiudi</button>
              </div>
            </div>
          </div>

          <script type="module" src="src/main.js"></script>
        </body>
      </html>
  - file: src/ui.js
    content: |
      /**
       * @file ui.js
       * Responsible for all direct DOM manipulations and user feedback (visual/audio).
       */

      // --- Elements ---
      const views = {
        calendar: document.getElementById('calendar-view'),
        trainer: document.getElementById('trainer-view'),
        debriefing: document.getElementById('debriefing-view')
      };
      const trainerExerciseTitle = document.getElementById('trainer-exercise-title');
      const trainerSeriesCounter = document.getElementById('trainer-series-counter');
      const trainerMainText = document.getElementById('trainer-main-text');
      const startSessionBtn = document.getElementById('start-session-btn');
      const pauseResumeBtn = document.getElementById('pause-resume-btn');
      const terminateBtn = document.getElementById('terminate-btn');
      const progressRingFg = document.getElementById('progress-ring-foreground');


      export function updateProgressOnly(percentage) {
        if (isNaN(percentage)) return;
        // With pathLength=100, the offset is simply 100 - percentage.
        const offset = 100 - percentage;
        progressRingFg.style.strokeDashoffset = Math.max(0, Math.min(100, offset));
      }

      export function showView(viewName) {
        Object.values(views).forEach(view => view.classList.remove('view--active'));
        if (views[viewName]) views[viewName].classList.add('view--active');
      }

      export function updateTrainerUI(state) {
        const { exercise, currentSeries, currentRep, phase, totalDuration, currentState, prevState } = state;

        trainerExerciseTitle.textContent = exercise ? exercise.name : 'Workout';
        
        if (exercise) {
          let seriesText = `Serie ${currentSeries} / ${exercise.series}`;
          // Show reps only during action state (or if paused during action)
          const isAction = currentState === 'action' || (currentState === 'paused' && prevState?.currentState === 'action');
          if (exercise.type === 'reps' && isAction) {
            seriesText += `  |  Rip. ${currentRep} / ${exercise.reps}`;
          }
          trainerSeriesCounter.textContent = seriesText;
        } else {
          trainerSeriesCounter.textContent = '';
        }

        if (currentState === 'paused') {
            trainerMainText.textContent = "PAUSA";
        } else if (totalDuration > 0 && currentState !== 'ready') {
            trainerMainText.innerHTML = `${phase}<br><small>${totalDuration}s</small>`;
        } else {
            trainerMainText.textContent = phase;
        }
        
        startSessionBtn.style.display = currentState === 'ready' ? 'block' : 'none';
        const inProgress = currentState !== 'ready' && currentState !== 'idle' && currentState !== 'finished';
        pauseResumeBtn.style.display = inProgress ? 'block' : 'none';
        terminateBtn.style.display = inProgress ? 'block' : 'none';
        
        const canPause = currentState !== 'ready' && currentState !== 'paused' && currentState !== 'idle' && currentState !== 'finished';
        pauseResumeBtn.disabled = !canPause;
        pauseResumeBtn.textContent = currentState === 'paused' ? 'Riprendi' : 'Pausa';
      }

      export function initTrainerControls(handlers) {
          startSessionBtn.addEventListener('click', () => handlers.onConfirmStart());
          pauseResumeBtn.addEventListener('click', () => handlers.onPauseResume());
          terminateBtn.addEventListener('click', () => handlers.onTerminate());
      }

      let audioCtx;
      export function playTick() {
        if (!audioCtx) audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioCtx.createOscillator();
        const gainNode = audioCtx.createGain();
        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); // A4 note
        gainNode.gain.setValueAtTime(0.1, audioCtx.currentTime);
        oscillator.start(audioCtx.currentTime);
        oscillator.stop(audioCtx.currentTime + 0.05);
      }
  - file: style.css
    content: |
      :root {
        --bg-color: #1a1a1d;
        --card-color: #2c2c34;
        --primary-color: #9575cd;
        --secondary-color: #4db6ac;
        --text-color: #f4f4f9;
        --text-secondary: #b3b3b3;
        --danger-color: #ef5350;
        --success-color: #66bb6a;
        --border-color: #4a4a52;
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: "Roboto Condensed", sans-serif;
        background-color: var(--bg-color);
        color: var(--text-color);
        display: flex;
        justify-content: center;
        align-items: flex-start;
        min-height: 100vh;
        padding: 2rem;
      }

      #app-container {
        width: 100%;
        max-width: 1200px;
        position: relative;
      }

      h1, h2 {
        font-family: "Teko", sans-serif;
        font-weight: 600;
        color: var(--primary-color);
        text-align: center;
        margin-bottom: 1.5rem;
      }

      .view {
        display: none;
      }

      .view--active {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      #calendar-view { display: none; }
      #calendar-view.view--active { display: block; }
      #calendar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; }
      #calendar-header h1 { margin: 0; }
      #calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); gap: 1rem; }
      .day-cell { background-color: var(--card-color); border-radius: 8px; padding: 1rem; display: flex; flex-direction: column; justify-content: space-between; border-left: 4px solid transparent; transition: transform 0.2s ease-out, border-color 0.2s ease-out; cursor: pointer; }
      .day-cell:hover { transform: translateY(-4px); border-left-color: var(--primary-color); }
      .day-name { font-weight: bold; text-transform: capitalize; font-size: 1.1rem; color: var(--text-secondary); }
      .day-number { font-family: "Teko", sans-serif; font-size: 3rem; font-weight: 700; text-align: center; margin: 0.5rem 0; }
      .day-summary { font-size: 0.9rem; color: var(--text-secondary); min-height: 2.5em; text-align: center; }

      .btn { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.75rem 1.5rem; border-radius: 6px; font-family: "Roboto Condensed", sans-serif; font-weight: bold; text-transform: uppercase; cursor: pointer; transition: background-color 0.2s, transform 0.2s; display: block; width: 100%; text-align: center; margin-top: 1rem; }
      .btn:hover:not(:disabled) { transform: scale(1.02); }
      .btn:disabled { opacity: 0.5; cursor: not-allowed; }
      .btn.btn-primary { background-color: var(--primary-color); border-color: var(--primary-color); }
      .btn.btn-secondary { background-color: var(--secondary-color); border-color: var(--secondary-color); color: var(--bg-color); }
      .btn.btn-secondary:disabled { background-color: var(--secondary-color); border-color: var(--secondary-color); color: var(--bg-color); opacity: 0.4; }
      .btn.btn-danger { background-color: var(--danger-color); border-color: var(--danger-color); }
      .btn.btn-success { background-color: var(--success-color); border-color: var(--success-color); }

      .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: none; justify-content: center; align-items: center; z-index: 1000; }
      .modal-content { background-color: var(--card-color); padding: 2rem; border-radius: 8px; width: 90%; max-width: 500px; max-height: 80vh; display: flex; flex-direction: column; }
      .modal-content h2 { margin-top: 0; }
      .modal-content ul { list-style: none; padding: 0; overflow-y: auto; flex-grow: 1; margin: 1rem 0; }
      .modal-list-item { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; border-bottom: 1px solid var(--border-color); }
      .modal-list-item:last-child { border-bottom: none; }
      .modal-list-item .btn { width: auto; padding: 0.5rem 1rem; margin-top: 0; }
      .empty-list-item { color: var(--text-secondary); text-align: center; padding: 2rem; }
      .modal-actions { display: flex; gap: 1rem; justify-content: flex-end; margin-top: 1.5rem; }
      .modal-actions .btn { width: auto; margin-top: 0; }

      /* Trainer View Styles */
      #trainer-view { gap: 1rem; }
      #trainer-exercise-title { font-size: 2.5rem; text-align: center; }
      #trainer-series-counter { font-size: 1.5rem; color: var(--text-secondary); min-height: 1.5rem; }
      #trainer-main-display { width: 300px; height: 300px; margin: 1rem 0; position: relative; display: flex; justify-content: center; align-items: center; }
      #trainer-main-text {
        font-family: 'Teko', sans-serif;
        font-size: 5.5rem; /* Reduced from 6rem */
        line-height: 1;
        text-align: center;
      }
      #trainer-main-text small { font-size: 2.5rem; color: var(--text-secondary); }
      #trainer-progress-ring-svg { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }
      .progress-ring-bg { fill: transparent; stroke: var(--card-color); stroke-width: 8; }
      .progress-ring-fg {
        fill: transparent;
        stroke: var(--primary-color);
        stroke-width: 8;
        stroke-linecap: round;
        transform: rotate(-90deg);
        transform-origin: 50% 50%;
        stroke-dasharray: 100; /* Set based on pathLength=100 */
        stroke-dashoffset: 100; /* Start empty */
      }
      #trainer-controls { display: flex; gap: 1rem; }
      #trainer-controls .btn { width: 150px; }
      @keyframes flash { 0%, 100% { opacity: 1; } 50% { opacity: 0.3; } }
      .is-flashing { animation: flash 0.75s infinite; }

      @media (max-width: 768px) {
        body { padding: 1rem; }
        #calendar-grid { grid-template-columns: 1fr; gap: 0.5rem; }
        #calendar-header { margin-bottom: 1rem; }
        #trainer-main-display { width: 250px; height: 250px; }
        #trainer-main-text { font-size: 4.5rem; }
      }