commit_message: "refactor(ui): Major aesthetic overhaul of header, buttons, and debriefing"
rationale: |
  This commit implements a significant visual upgrade based on user feedback to create a more polished and professional user interface. The focus was on elevating the design beyond pure functionality.

  1.  **Header Redesign**: The header is now a "floating glass" element. It uses a semi-transparent background, a blur effect, and a subtle shadow to create a sense of depth. An SVG logo has been embedded directly into the HTML to give the application a unique identity, and the title text now has a dynamic gradient.

  2.  **"Terminate" Button**: The previous text link has been replaced with a fully-styled outline button. It features a sophisticated animated background that wipes in on hover, providing clear and elegant user feedback without using alarming colors.

  3.  **Debriefing View Polish**: The debriefing summary list now has a staggered fade-in animation. This adds a touch of class and makes the presentation of the summary more dynamic and engaging.

  4.  **YAML Fix**: The `commands` key has been correctly included in this YAML structure.
patches:
  - file: assets/css/style.css
    content: |
      /* --- GLOBAL STYLES & MOBILE FIRST --- */
      :root {
          --bg-color: #1a1a1d;
          --card-color: #2c2c34;
          --primary-color: #9575cd;
          --secondary-color: #4db6ac;
          --text-color: #f4f4f9;
          --text-color-muted: #aaa;
          --border-color: #40404a;
          --danger-color: #ef5350;
          --success-color: #66bb6a;
      }
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body {
          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          background-color: var(--bg-color);
          color: var(--text-color);
          padding-top: 80px; /* Adjusted Space for the fixed header */
          scrollbar-width: thin;
          scrollbar-color: var(--primary-color) var(--bg-color);
      }
      /* Custom Scrollbar for Webkit Browsers */
      body::-webkit-scrollbar, .modal-body::-webkit-scrollbar { width: 8px; }
      body::-webkit-scrollbar-track, .modal-body::-webkit-scrollbar-track { background: var(--card-color); }
      body::-webkit-scrollbar-thumb, .modal-body::-webkit-scrollbar-thumb { background-color: var(--primary-color); border-radius: 10px; border: 2px solid var(--card-color); }
      
      /* --- PERSISTENT HEADER (REDESIGNED) --- */
      .app-header {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 60px;
          background-color: rgba(44, 44, 52, 0.85);
          backdrop-filter: blur(10px);
          -webkit-backdrop-filter: blur(10px);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      }
      .app-title {
          display: flex;
          align-items: center;
          gap: 0.75rem;
      }
      .app-title svg {
          width: 24px;
          height: 24px;
      }
      .app-title h1 {
          font-size: 1.4rem;
          background: -webkit-linear-gradient(45deg, var(--primary-color), var(--secondary-color));
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
      }

      #app-container { max-width: 1200px; margin: 0 auto; padding: 1rem; }
      .view { display: none; width: 100%; }
      .view--active { display: block; }

      /* --- KEYFRAMES --- */
      @keyframes flash {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.2; }
      }
      .is-flashing {
          animation: flash 0.25s 3;
      }
      @keyframes fade-slide-up {
          from {
              opacity: 0;
              transform: translateY(10px);
          }
          to {
              opacity: 1;
              transform: translateY(0);
          }
      }

      /* --- CALENDAR VIEW STYLES --- */
      .calendar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
      .calendar-header h2 { font-size: 1.25rem; text-align: center; }
      .calendar-header button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: background-color 0.2s; }
      .calendar-header button:hover { background-color: var(--primary-color); }
      .calendar-grid { display: grid; grid-template-columns: 1fr; gap: 0.5rem; }
      .day-cell { background-color: var(--card-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 1rem; min-height: 150px; display: flex; flex-direction: column; cursor: pointer; transition: border-color 0.2s; }
      .day-cell:hover { border-color: var(--primary-color); }
      .day-cell__header { display: flex; justify-content: space-between; font-weight: bold; color: var(--text-color-muted); text-transform: uppercase; font-size: 0.8rem; pointer-events: none; }
      .day-cell__body { margin-top: 0.5rem; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between; align-items: flex-start; pointer-events: none; }
      .exercise-count { font-size: 0.9rem; color: var(--secondary-color); }
      .start-btn { background-color: var(--secondary-color); color: var(--bg-color); border: none; padding: 0.6rem; border-radius: 6px; cursor: pointer; font-weight: bold; text-transform: uppercase; width: 100%; margin-top: 1rem; transition: opacity 0.2s; pointer-events: all !important; }
      .start-btn:hover { opacity: 0.85; }

      /* --- MODAL STYLES --- */
      #modal-container { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: flex; justify-content: center; align-items: center; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; z-index: 1001; }
      #modal-container.active { opacity: 1; pointer-events: all; }
      .modal-content { background-color: var(--card-color); border-radius: 8px; border: 1px solid var(--border-color); width: 90%; max-width: 500px; transform: scale(0.95); transition: transform 0.3s ease; display: flex; flex-direction: column; max-height: 90vh; }
      #modal-container.active .modal-content { transform: scale(1); }
      .modal-header { padding: 1rem 1.5rem; border-bottom: 1px solid var(--border-color); flex-shrink: 0; display: flex; justify-content: space-between; align-items: center; }
      .modal-header h3 { color: var(--primary-color); }
      .modal-close-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; cursor: pointer; }
      .modal-body { overflow-y: auto; flex-grow: 1; padding: 0 1.5rem; }
      .modal-actions { padding: 1rem 1.5rem; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; gap: 1rem; flex-shrink: 0; }
      .add-rest-btn, .add-exercise-btn { background-color: transparent; border: 1px solid var(--secondary-color); color: var(--secondary-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: all 0.2s; }
      .add-rest-btn:hover, .add-exercise-btn:hover { background-color: var(--secondary-color); color: var(--card-color); }

      /* --- WORKOUT EDITOR & LIBRARY STYLES --- */
      .workout-item-list, .exercise-library-list { list-style: none; padding: 0; margin: 0; }
      .workout-item { display: flex; justify-content: space-between; align-items: center; padding: 1rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .workout-item:last-child { border-bottom: none; }
      .item-info { display: flex; align-items: baseline; gap: 0.75rem; flex-grow: 1; }
      .item-info .item-name { font-weight: bold; }
      .item-info .item-details { color: var(--secondary-color); }
      .workout-item--rest .item-info .item-name { color: var(--text-color-muted); font-style: italic; }
      .rest-duration-input { -moz-appearance: textfield; background-color: var(--bg-color); border: 1px solid var(--border-color); color: var(--text-color); border-radius: 4px; padding: 0.25rem; width: 60px; text-align: center; }
      .rest-duration-input::-webkit-outer-spin-button, .rest-duration-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
      .remove-item-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; font-weight: bold; cursor: pointer; padding: 0 0.5rem; border-radius: 50%; }
      .remove-item-btn:hover { color: var(--danger-color); background-color: rgba(239, 83, 80, 0.1); }
      .exercise-library-item { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .exercise-library-item:last-child { border-bottom: none; }
      .add-to-workout-btn { background-color: var(--primary-color); color: var(--text-color); border: none; padding: 0.4rem 0.8rem; border-radius: 4px; cursor: pointer; }

      /* --- TRAINER VIEW STYLES --- */
      .trainer-container { display: flex; flex-direction: column; align-items: center; justify-content: center; height: calc(100vh - 4rem - 60px); text-align: center; }
      .trainer-header { margin-bottom: 1rem; }
      .trainer-header h2 { font-size: 2rem; text-transform: uppercase; color: var(--primary-color); }
      .trainer-header p { color: var(--text-color-muted); }
      .progress-ring { position: relative; width: 250px; height: 250px; margin: 2rem 0; }
      .progress-ring svg { width: 100%; height: 100%; transform: rotate(-90deg); }
      .progress-ring__background { stroke: var(--card-color); fill: transparent; }
      .progress-ring__foreground { stroke: var(--secondary-color); fill: transparent; }
      .progress-ring__text { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }
      .progress-ring__phase { font-size: 1.6rem; font-weight: bold; text-transform: uppercase; }
      .progress-ring__timer { font-size: 3rem; color: var(--text-color); }
      .trainer-footer { margin-top: 1rem; }
      .trainer-footer p { font-size: 1.2rem; min-height: 2em; }
      .trainer-controls { display: flex; flex-direction: column; align-items: center; gap: 1rem; margin-top: 1rem; }
      .trainer-main-btn { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 1rem 2rem; border-radius: 8px; cursor: pointer; font-size: 1.2rem; text-transform: uppercase; }
      .trainer-terminate-btn {
          background-color: transparent;
          border: 1px solid var(--border-color);
          color: var(--text-color-muted);
          padding: 0.5rem 1rem;
          border-radius: 6px;
          cursor: pointer;
          font-size: 0.9rem;
          transition: all 0.2s ease;
      }
      .trainer-terminate-btn:hover {
          background-color: var(--border-color);
          color: var(--text-color);
      }
      
      /* --- DEBRIEFING VIEW STYLES --- */
      .debriefing-container { max-width: 700px; margin: 0 auto; padding: 1rem; }
      .debriefing-container h2 { text-align: center; color: var(--primary-color); margin-bottom: 2rem; }
      .debrief-list { list-style: none; padding: 0; margin: 0 0 2rem 0; }
      .debrief-item {
          background-color: var(--card-color);
          border: 1px solid var(--border-color);
          border-left: 5px solid var(--border-color);
          padding: 1rem;
          border-radius: 6px;
          margin-bottom: 0.75rem;
          opacity: 0; /* Start hidden for animation */
          animation: fade-slide-up 0.5s ease-out forwards;
      }
      .debrief-item--completed { border-left-color: var(--success-color); }
      .debrief-item--terminated { border-left-color: var(--danger-color); font-weight: bold; }
      .debrief-item--skipped { border-left-color: var(--text-color-muted); opacity: 0.6; animation: none; /* Don't animate skipped items that are already transparent */}
      .debriefing-actions { display: flex; justify-content: center; gap: 1rem; }
      .debriefing-actions button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.8rem 1.5rem; border-radius: 6px; cursor: pointer; transition: all 0.2s; }
      .debriefing-actions button:hover { border-color: var(--primary-color); color: var(--primary-color); }

      /* --- TABLET/DESKTOP OVERRIDES --- */
      @media (min-width: 768px) {
          #app-container { padding: 2rem; }
          .calendar-grid { grid-template-columns: repeat(7, 1fr); gap: 1rem; }
          .modal-content { max-width: 600px; height: auto; max-height: 80vh; }
          .progress-ring { width: 300px; height: 300px; }
      }
  - file: index.html
    content: |
      <!DOCTYPE html>
      <html lang="it">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Mio Trainer Personale</title>
          <link rel="stylesheet" href="assets/css/style.css">
      </head>
      <body>

          <header class="app-header">
              <div class="app-title">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zM8.293 16.707l1.414-1.414L12 17.586l2.293-2.293 1.414 1.414L12 20.414l-3.707-3.707zM12 3.586l2.293 2.293-1.414 1.414L12 5l-2.293 2.293-1.414-1.414L12 3.586z"></path></svg>
                  <h1>Mio Trainer Personale</h1>
              </div>
          </header>

          <div id="app-container">
              <div id="calendar-view" class="view view--active">
                  </div>
              <div id="trainer-view" class="view">
                  </div>
              <div id="debriefing-view" class="view">
                  </div>
          </div>

          <div id="modal-container">
              </div>

          <script src="src/main.js" type="module"></script>
      </body>
      </html>
  - file: src/views/DebriefingView.js
    content: |
      import store from '../modules/store.js';

      function generateSummaryHtml(completedWorkout) {
          if (!completedWorkout) return '<p>Nessun dato di allenamento disponibile.</p>';

          const title = completedWorkout.completed
              ? '<h2>Workout Completato!</h2>'
              : '<h2>Workout Interrotto</h2>';

          const termPoint = completedWorkout.terminationPoint;

          const itemsHtml = completedWorkout.fullPlan.map((item, index) => {
              let itemClass = 'debrief-item';
              let statusText = '';
              let animationDelay = `style="animation-delay: ${index * 50}ms;"`;

              if (completedWorkout.completed) {
                  itemClass += ' debrief-item--completed';
              } else {
                  if (index < termPoint.itemIndex) {
                      itemClass += ' debrief-item--completed';
                  } else if (index === termPoint.itemIndex) {
                      itemClass += ' debrief-item--terminated';
                      const currentSeries = termPoint.currentSeries || 1;
                      statusText = `(interrotto alla serie ${currentSeries})`;
                  } else {
                      itemClass += ' debrief-item--skipped';
                      animationDelay = ''; // Don't animate skipped items
                  }
              }

              let mainText = '';
              if (item.type === 'rest') {
                  mainText = `Riposo: ${item.duration}s`;
              } else {
                  const series = item.series || 1;
                  const reps = item.reps ? `${item.reps} reps` : `${item.duration}s`;
                  mainText = `${item.name}: ${series}x${reps} ${statusText}`;
              }

              return `<li class="${itemClass}" ${animationDelay}>${mainText}</li>`;
          }).join('');

          return `${title}<ul class="debrief-list">${itemsHtml}</ul>`;
      }

      function generateTextForCoach(completedWorkout) {
          if (!completedWorkout) return 'Nessun dato disponibile.';
          const date = new Date(completedWorkout.date).toLocaleDateString('it-IT');
          const status = completedWorkout.completed ? 'Completato' : 'Interrotto';
          let report = `Report Allenamento - ${date} (${status})\n====================\n\n`;

          const termPoint = completedWorkout.terminationPoint;

          completedWorkout.fullPlan.forEach((item, index) => {
              let statusTag = '';
              if (!completedWorkout.completed) {
                  if (index < termPoint.itemIndex) statusTag = '[✓]';
                  else if (index === termPoint.itemIndex) statusTag = '[✗]';
                  else statusTag = '[-]';
              } else {
                  statusTag = '[✓]';
              }

              if (item.type === 'rest') {
                  report += `${statusTag} Riposo: ${item.duration}s\n`;
              } else {
                  const series = item.series || 1;
                  const reps = item.reps ? `${item.reps} reps` : `${item.duration}s`;
                  let terminationInfo = '';
                  if (statusTag === '[✗]') {
                      terminationInfo = ` (interrotto alla serie ${termPoint.currentSeries}/${series})`;
                  }
                  report += `${statusTag} ${item.name}: ${series}x${reps}${terminationInfo}\n`;
              }
          });
          return report;
      }


      function render(element) {
          const { completedWorkout } = store.getState();
          const summaryHtml = generateSummaryHtml(completedWorkout);
          const actionsHtml = `
              <div class="debriefing-actions">
                  <button class="copy-btn">Copia per il Coach</button>
                  <button class="return-btn">Torna al Calendario</button>
              </div>
          `;
          element.innerHTML = `
              <div class="debriefing-container">
                  ${summaryHtml}
                  ${actionsHtml}
              </div>
          `;
      }

      export function init(element) {
          element.addEventListener('click', (event) => {
              if (event.target.closest('.return-btn')) {
                  store.dispatch({ type: 'CHANGE_VIEW', payload: 'calendar' });
              }
              if (event.target.closest('.copy-btn')) {
                  const { completedWorkout } = store.getState();
                  const textToCopy = generateTextForCoach(completedWorkout);
                  navigator.clipboard.writeText(textToCopy).then(() => {
                      alert('Riepilogo copiato negli appunti!');
                  }).catch(err => {
                      console.error('Errore nella copia:', err);
                      alert('Impossibile copiare il testo.');
                  });
              }
          });

          store.subscribe(() => render(element));
          // Initial render can be empty as the subscription will populate it
          // when the view becomes active and completedWorkout is set.
          element.innerHTML = '';
      }
commands:
  - "echo 'UI Overhaul complete. Header and buttons redesigned.'"