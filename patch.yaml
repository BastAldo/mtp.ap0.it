commit_message: "feat: Implement workout editor modal system"
rationale: |
  Questo patch introduce una delle funzionalità cardine dell'applicazione: la possibilità per l'utente di aggiungere e rimuovere esercizi per un dato giorno.

  1.  **Nuovo Modulo `modal.js`:** Tutta la logica per la gestione dei modali è stata incapsulata nel nuovo file `src/modal.js`. Questo modulo gestisce la visibilità, il rendering del contenuto e le interazioni utente (aggiungi/rimuovi esercizio) per entrambi i modali, aderendo al Principio di Singola Responsabilità.

  2.  **Isolamento dei Dati Statici:** La lista di tutti gli esercizi disponibili è stata spostata in un file dedicato, `src/workouts.js`. Questo separa la configurazione (i dati degli esercizi) dalla logica applicativa, rendendo più semplice la manutenzione e l'aggiornamento degli esercizi in futuro.

  3.  **Delegazione degli Eventi:** Il modulo `calendar.js` è stato aggiornato per gestire i click sulle celle del giorno. Utilizzando la delegazione degli eventi per efficienza, ora cattura un click, ne estrae la data e invoca `modal.js` per aprire il modale corrispondente. Il calendario non sa *come* funziona il modale, sa solo *quando* aprirlo.

  4.  **Stilizzazione dei Componenti:** Il file `style.css` è stato esteso per includere gli stili per i componenti modali (`.modal-overlay`, `.modal-content`), assicurando che la nuova funzionalità sia visivamente coerente con il resto del design system.
patches:
  - file: src/main.js
    content: |
      /**
       * @file main.js
       * The main entry point for the application.
       * Orchestrates all other modules.
       */
      import * as storage from './storage.js';
      import { initCalendar } from './calendar.js';
      import { initModals } from './modal.js';

      /**
       * The main function to initialize the application.
       */
      function main() {
        console.log('Application Initialized.');
        console.log('Fetching all workouts from storage:', storage.getWorkouts());

        // Initialize all primary components
        initCalendar();
        initModals();
      }

      // Initialize the app once the DOM is fully loaded.
      document.addEventListener('DOMContentLoaded', main);
  - file: src/calendar.js
    content: |
      /**
       * @file calendar.js
       * Manages the state, rendering, and interactions of the calendar view.
       */
      import * as storage from './storage.js';
      import { openDayModal } from './modal.js';

      // DOM Elements
      const calendarGrid = document.getElementById('calendar-grid');
      const currentMonthYear = document.getElementById('current-month-year');
      const prevWeekBtn = document.getElementById('prev-week-btn');
      const nextWeekBtn = document.getElementById('next-week-btn');

      // State
      let currentDate = new Date();

      /**
       * Formats a Date object into a 'YYYY-MM-DD' string.
       * @param {Date} date The date to format.
       * @returns {string} The formatted date string.
       */
      function formatDateKey(date) {
        return date.toISOString().split('T')[0];
      }

      /**
       * Renders the calendar for the week of the given date.
       * @param {Date} date A date within the week to be rendered.
       */
      export function renderCalendar(date = currentDate) {
        const weekStart = new Date(date);
        weekStart.setDate(date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1)); // Start of the week (Monday)

        const monthNames = ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"];
        currentMonthYear.textContent = `${monthNames[date.getMonth()]} ${date.getFullYear()}`;

        calendarGrid.innerHTML = '';
        for (let i = 0; i < 7; i++) {
          const day = new Date(weekStart);
          day.setDate(weekStart.getDate() + i);

          const dayCell = document.createElement('div');
          const dateKey = formatDateKey(day);
          dayCell.className = 'day-cell';
          dayCell.dataset.date = dateKey;

          const dayName = day.toLocaleDateString('it-IT', { weekday: 'long' });
          const dayNumber = day.getDate();

          const exercises = storage.getWorkoutsForDate(dateKey);
          const exerciseCount = exercises.length;

          let summaryText = 'Nessun esercizio';
          if (exerciseCount > 0) {
            summaryText = `${exerciseCount} ${exerciseCount > 1 ? 'esercizi' : 'esercizio'}`;
          }

          dayCell.innerHTML = `
            <div class="day-name">${dayName}</div>
            <div class="day-number">${dayNumber}</div>
            <div class="day-summary">${summaryText}</div>
            <button class="btn btn-secondary start-workout-btn" ${exerciseCount === 0 ? 'disabled' : ''}>START</button>
          `;

          calendarGrid.appendChild(dayCell);
        }
      }

      /**
       * Initializes the calendar, sets up event listeners, and performs the initial render.
       */
      export function initCalendar() {
        prevWeekBtn.addEventListener('click', () => {
          currentDate.setDate(currentDate.getDate() - 7);
          renderCalendar(currentDate);
        });

        nextWeekBtn.addEventListener('click', () => {
          currentDate.setDate(currentDate.getDate() + 7);
          renderCalendar(currentDate);
        });

        // Event delegation for opening the modal
        calendarGrid.addEventListener('click', (event) => {
          const dayCell = event.target.closest('.day-cell');
          // Open modal only if a day-cell is clicked, but not the start button inside it
          if (dayCell && !event.target.matches('.start-workout-btn')) {
            const dateKey = dayCell.dataset.date;
            openDayModal(dateKey);
          }
        });

        renderCalendar(currentDate);
        console.log('Calendar module initialized.');
      }
  - file: src/modal.js
    content: |
      /**
       * @file modal.js
       * Handles all logic for the workout editor and exercise library modals.
       */
      import * as storage from './storage.js';
      import { ALL_EXERCISES } from './workouts.js';
      import { renderCalendar } from './calendar.js';

      // DOM Elements
      const dayModal = document.getElementById('day-modal');
      const libraryModal = document.getElementById('library-modal');
      const modalDateTitle = document.getElementById('modal-date-title');
      const modalExerciseList = document.getElementById('modal-exercise-list');
      const libraryExerciseList = document.getElementById('library-exercise-list');
      const addExerciseBtn = document.getElementById('add-exercise-btn');
      const closeDayModalBtn = document.getElementById('close-day-modal-btn');
      const closeLibraryModalBtn = document.getElementById('close-library-modal-btn');

      // State
      let currentEditingDateKey = null;

      function renderDayExercises() {
        modalExerciseList.innerHTML = '';
        const exercises = storage.getWorkoutsForDate(currentEditingDateKey);
        if (exercises.length === 0) {
          modalExerciseList.innerHTML = `<li class="empty-list-item">Aggiungi un esercizio per iniziare.</li>`;
          return;
        }

        exercises.forEach((exercise, index) => {
          const li = document.createElement('li');
          li.className = 'modal-list-item';
          li.innerHTML = `
            <span>${exercise.name}</span>
            <button class="btn btn-danger remove-exercise-btn" data-index="${index}">Rimuovi</button>
          `;
          modalExerciseList.appendChild(li);
        });
      }

      function renderLibrary() {
        libraryExerciseList.innerHTML = '';
        ALL_EXERCISES.forEach(exercise => {
          const li = document.createElement('li');
          li.className = 'modal-list-item';
          li.innerHTML = `
            <span>${exercise.name}</span>
            <button class="btn btn-success add-from-library-btn" data-id="${exercise.id}">Aggiungi</button>
          `;
          libraryExerciseList.appendChild(li);
        });
      }

      export function openDayModal(dateKey) {
        currentEditingDateKey = dateKey;
        const date = new Date(dateKey + 'T00:00:00'); // Ensure correct date object
        modalDateTitle.textContent = `Allenamento per ${date.toLocaleDateString('it-IT', { weekday: 'long', day: 'numeric', month: 'long' })}`;
        renderDayExercises();
        dayModal.style.display = 'flex';
      }

      function closeDayModal() {
        dayModal.style.display = 'none';
        renderCalendar(); // Re-render calendar to reflect changes
      }

      function openLibraryModal() {
        renderLibrary();
        libraryModal.style.display = 'flex';
      }

      function closeLibraryModal() {
        libraryModal.style.display = 'none';
      }

      export function initModals() {
        closeDayModalBtn.addEventListener('click', closeDayModal);
        closeLibraryModalBtn.addEventListener('click', closeLibraryModal);
        addExerciseBtn.addEventListener('click', openLibraryModal);

        // Event delegation for removing exercises
        modalExerciseList.addEventListener('click', (event) => {
          if (event.target.matches('.remove-exercise-btn')) {
            const indexToRemove = parseInt(event.target.dataset.index, 10);
            const exercises = storage.getWorkoutsForDate(currentEditingDateKey);
            exercises.splice(indexToRemove, 1);
            storage.saveWorkoutsForDate(currentEditingDateKey, exercises);
            renderDayExercises(); // Re-render the list
          }
        });

        // Event delegation for adding exercises from the library
        libraryExerciseList.addEventListener('click', (event) => {
          if (event.target.matches('.add-from-library-btn')) {
            const exerciseId = event.target.dataset.id;
            const exerciseToAdd = ALL_EXERCISES.find(ex => ex.id === exerciseId);
            if (exerciseToAdd) {
              const exercises = storage.getWorkoutsForDate(currentEditingDateKey);
              exercises.push(exerciseToAdd);
              storage.saveWorkoutsForDate(currentEditingDateKey, exercises);
              renderDayExercises(); // Re-render the day's list
            }
            closeLibraryModal();
          }
        });

        console.log('Modal module initialized.');
      }
  - file: src/workouts.js
    content: |
      /**
       * @file workouts.js
       * Contains the master list of all available exercises in the application.
       */

      export const ALL_EXERCISES = [
        {
          id: 'pushup',
          name: 'Push Up',
          type: 'reps',
          series: 3,
          reps: 10,
          rest: 60, // seconds
          tempo: { up: 1, hold: 1, down: 2 } // seconds
        },
        {
          id: 'squat',
          name: 'Squat a corpo libero',
          type: 'reps',
          series: 3,
          reps: 12,
          rest: 60,
          tempo: { up: 1, hold: 0, down: 2 }
        },
        {
          id: 'plank',
          name: 'Plank',
          type: 'time',
          series: 3,
          duration: 45, // seconds
          rest: 45
        },
        {
          id: 'burpees',
          name: 'Burpees',
          type: 'reps',
          series: 4,
          reps: 8,
          rest: 90,
          tempo: { up: 1, hold: 0, down: 1 }
        },
        {
          id: 'jumping_jacks',
          name: 'Jumping Jacks',
          type: 'time',
          series: 2,
          duration: 60,
          rest: 30
        }
      ];
  - file: style.css
    content: |
      :root {
        --bg-color: #1a1a1d;
        --card-color: #2c2c34;
        --primary-color: #9575cd;
        --secondary-color: #4db6ac;
        --text-color: #f4f4f9;
        --text-secondary: #b3b3b3;
        --danger-color: #ef5350;
        --success-color: #66bb6a;
        --border-color: #4a4a52;
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: "Roboto Condensed", sans-serif;
        background-color: var(--bg-color);
        color: var(--text-color);
        display: flex;
        justify-content: center;
        align-items: flex-start;
        min-height: 100vh;
        padding: 2rem;
      }

      #app-container {
        width: 100%;
        max-width: 1200px;
        position: relative;
      }

      h1, h2 {
        font-family: "Teko", sans-serif;
        font-weight: 600;
        color: var(--primary-color);
        text-align: center;
        margin-bottom: 1.5rem;
      }

      .view {
        display: none;
      }

      .view--active {
        display: block;
      }

      /* Calendar Styles */
      #calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
      }

      #calendar-header h1 {
        margin: 0;
      }

      #calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 1rem;
      }

      .day-cell {
        background-color: var(--card-color);
        border-radius: 8px;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border-left: 4px solid transparent;
        transition: transform 0.2s ease-out, border-color 0.2s ease-out;
        cursor: pointer;
      }

      .day-cell:hover {
        transform: translateY(-4px);
        border-left-color: var(--primary-color);
      }

      .day-name {
        font-weight: bold;
        text-transform: capitalize;
        font-size: 1.1rem;
        color: var(--text-secondary);
      }

      .day-number {
        font-family: "Teko", sans-serif;
        font-size: 3rem;
        font-weight: 700;
        text-align: center;
        margin: 0.5rem 0;
      }

      .day-summary {
        font-size: 0.9rem;
        color: var(--text-secondary);
        min-height: 2.5em; /* Ensures consistent alignment */
        text-align: center;
      }

      /* Button Styles */
      .btn {
        background-color: var(--card-color);
        color: var(--text-color);
        border: 1px solid var(--border-color);
        padding: 0.75rem 1.5rem;
        border-radius: 6px;
        font-family: "Roboto Condensed", sans-serif;
        font-weight: bold;
        text-transform: uppercase;
        cursor: pointer;
        transition: background-color 0.2s, transform 0.2s;
        display: block;
        width: 100%;
        text-align: center;
        margin-top: 1rem;
      }

      .btn:hover:not(:disabled) {
        transform: scale(1.02);
      }

      .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }

      .btn.btn-primary { background-color: var(--primary-color); border-color: var(--primary-color); }
      .btn.btn-secondary { background-color: var(--secondary-color); border-color: var(--secondary-color); color: var(--bg-color); }
      .btn.btn-danger { background-color: var(--danger-color); border-color: var(--danger-color); }
      .btn.btn-success { background-color: var(--success-color); border-color: var(--success-color); }

      .btn.btn-secondary:disabled {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
        color: var(--bg-color);
        opacity: 0.4;
      }

      /* Modal Styles */
      .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: none; /* Initially hidden */
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }

      .modal-content {
        background-color: var(--card-color);
        padding: 2rem;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        max-height: 80vh;
        display: flex;
        flex-direction: column;
      }

      .modal-content h2 {
        margin-top: 0;
      }

      .modal-content ul {
        list-style: none;
        padding: 0;
        overflow-y: auto;
        flex-grow: 1;
        margin: 1rem 0;
      }

      .modal-list-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-bottom: 1px solid var(--border-color);
      }

      .modal-list-item:last-child {
        border-bottom: none;
      }

      .modal-list-item .btn {
        width: auto;
        padding: 0.5rem 1rem;
        margin-top: 0;
      }
      
      .empty-list-item {
        color: var(--text-secondary);
        text-align: center;
        padding: 2rem;
      }

      .modal-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 1.5rem;
      }
      
      .modal-actions .btn {
        width: auto;
        margin-top: 0;
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        body {
          padding: 1rem;
        }
        #calendar-grid {
          grid-template-columns: 1fr;
          gap: 0.5rem;
        }
        #calendar-header {
            margin-bottom: 1rem;
        }
      }
commands:
  - "echo 'Patch applicato. Introdotti i moduli per la gestione dei modali e dei dati degli esercizi.'"
  - "echo 'Ricarica la pagina e prova la nuova funzionalità: clicca su una cella del giorno.'"
  - "echo 'Dovresti poter aprire il modale, aggiungere esercizi dalla libreria e rimuoverli.'"
  - "echo 'Comando server suggerito: python3 -m http.server'"