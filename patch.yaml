commit_message: "fix(ui): Enable resume button in paused state"
rationale: |
  Questo patch corregge un bug critico che impediva all'utente di riprendere un workout dopo averlo messo in pausa.

  1.  **Causa del Bug:** Il problema era localizzato nel file `ui.js`, all'interno della funzione `updateTrainerUI`. La condizione logica che gestiva lo stato `disabled` del pulsante "Pausa/Riprendi" era errata: disabilitava il pulsante quando lo stato era `PAUSED`, impedendo di fatto la ripresa.

  2.  **Soluzione:** La logica è stata corretta per garantire che il pulsante sia attivo (non disabilitato) quando lo stato è `PAUSED`. Il pulsante ora viene disabilitato solo negli stati in cui un'azione di pausa o ripresa non ha senso (es. `READY`, `FINISHED`).

  3.  **Impatto:** Questa modifica mirata ripristina la funzionalità completa del ciclo di pausa e ripresa. La logica sottostante in `trainer.js` era già corretta, ma ora è accessibile all'utente attraverso l'interfaccia.
patches:
  - file: src/ui.js
    content: |
      /**
       * @file ui.js
       * Responsible for all direct DOM manipulations and user feedback (visual/audio).
       */

      // --- Elements ---
      const views = {
        calendar: document.getElementById('calendar-view'),
        trainer: document.getElementById('trainer-view'),
        debriefing: document.getElementById('debriefing-view')
      };
      const trainerExerciseTitle = document.getElementById('trainer-exercise-title');
      const trainerSeriesCounter = document.getElementById('trainer-series-counter');
      const trainerMainText = document.getElementById('trainer-main-text');
      const startSessionBtn = document.getElementById('start-session-btn');
      const pauseResumeBtn = document.getElementById('pause-resume-btn');
      const terminateBtn = document.getElementById('terminate-btn');
      const progressRingFg = document.getElementById('progress-ring-foreground');


      export function updateProgressOnly(percentage) {
        if (isNaN(percentage)) return;
        // With pathLength=100, the offset is simply 100 - percentage.
        const offset = 100 - percentage;
        progressRingFg.style.strokeDashoffset = Math.max(0, Math.min(100, offset));
      }

      export function showView(viewName) {
        Object.values(views).forEach(view => view.classList.remove('view--active'));
        if (views[viewName]) views[viewName].classList.add('view--active');
      }

      export function updateTrainerUI(state) {
        const { exercise, currentSeries, currentRep, phase, totalDuration, currentState, prevState } = state;

        trainerExerciseTitle.textContent = exercise ? exercise.name : 'Workout';
        
        if (exercise) {
          let seriesText = `Serie ${currentSeries} / ${exercise.series}`;
          // Show reps only during action state (or if paused during action)
          const isAction = currentState === 'action' || (currentState === 'paused' && prevState?.currentState === 'action');
          if (exercise.type === 'reps' && isAction) {
            seriesText += `  |  Rip. ${currentRep} / ${exercise.reps}`;
          }
          trainerSeriesCounter.textContent = seriesText;
        } else {
          trainerSeriesCounter.textContent = '';
        }

        if (currentState === 'paused') {
            trainerMainText.textContent = "PAUSA";
        } else if (totalDuration > 0 && currentState !== 'ready') {
            trainerMainText.innerHTML = `${phase}<br><small>${totalDuration}s</small>`;
        } else {
            trainerMainText.textContent = phase;
        }
        
        startSessionBtn.style.display = currentState === 'ready' ? 'block' : 'none';
        const inProgress = currentState !== 'ready' && currentState !== 'idle' && currentState !== 'finished';
        pauseResumeBtn.style.display = inProgress ? 'block' : 'none';
        terminateBtn.style.display = inProgress ? 'block' : 'none';
        
        // The button should be ENABLED if the state is pausable OR if it's already paused (to allow resume).
        // It should be DISABLED only in terminal/initial states.
        const canBeInterrupted = currentState === 'action' || currentState === 'rest_countdown' || currentState === 'announcing' || currentState === 'paused';
        pauseResumeBtn.disabled = !canBeInterrupted;
        pauseResumeBtn.textContent = currentState === 'paused' ? 'Riprendi' : 'Pausa';
      }

      export function initTrainerControls(handlers) {
          startSessionBtn.addEventListener('click', () => handlers.onConfirmStart());
          pauseResumeBtn.addEventListener('click', () => handlers.onPauseResume());
          terminateBtn.addEventListener('click', () => handlers.onTerminate());
      }

      let audioCtx;
      export function playTick() {
        if (!audioCtx) audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioCtx.createOscillator();
        const gainNode = audioCtx.createGain();
        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); // A4 note
        gainNode.gain.setValueAtTime(0.1, audioCtx.currentTime);
        oscillator.start(audioCtx.currentTime);
        oscillator.stop(audioCtx.currentTime + 0.05);
      }
commands:
  - "echo 'Patch applicato. La logica del pulsante Pausa/Riprendi è stata corretta.'"
  - "echo 'Ora, quando metti in pausa l''allenamento, il pulsante \"Riprendi\" dovrebbe rimanere attivo e cliccabile.'"
  - "echo 'Comando server suggerito: python3 -m http.server'"