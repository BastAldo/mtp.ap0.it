commit_message: "refactor(store): Riprogettazione architetturale della macchina a stati del trainer"
rationale: |
  Questa è una riscrittura completa della macchina a stati del trainer per risolvere in modo definitivo tutti i bug di loop e di pausa, basandosi su un'architettura più robusta e prevedibile.

  1.  **Eliminazione dei Loop**: La causa principale dei loop (azioni `dispatch` nidificate e una logica di transizione ambigua) è stata rimossa. È stato introdotto un flusso di azioni esplicito e lineare:
      * `TIMER_TICK`: Ora ha il solo compito di decrementare il tempo.
      * `TIMER_EXPIRED`: Nuova azione che viene inviata alla scadenza del timer. Contiene la logica, ora chiara e senza ambiguità, per **decidere** quale sarà lo stato successivo.
      * `SET_TRAINER_PHASE`: Nuova azione che ha il solo compito di **impostare** il nuovo stato e avviare il timer.
      Questa separazione netta tra "contare", "decidere" e "impostare" elimina la possibilità di race condition.

  2.  **Pausa Affidabile**: Grazie alla nuova architettura stabile, le azioni `PAUSE_TRAINER` e `RESUME_TRAINER` ora funzionano in modo affidabile, limitandosi a fermare e riavviare un timer che non è più soggetto a loop.

  3.  **Animazione Migliorata**: L'animazione in `assets/css/style.css` è stata modificata per fornire un singolo impulso visivo ("flash") morbido e non fastidioso, migliorando l'esperienza utente.
patches:
  - file: src/modules/store.js
    content: |
      import { saveToStorage } from './storage.js';
      import { getExerciseById } from './exerciseRepository.js';

      const WORKOUTS_STORAGE_KEY = 'workouts';
      const TICK_INTERVAL = 100;

      const cloneWorkouts = (workouts) => JSON.parse(JSON.stringify(workouts));

      function createStore() {
        let timerInterval = null;

        let state = {
          currentView: 'calendar',
          focusedDate: new Date(),
          workouts: {},
          isModalOpen: false,
          modalContext: null,
          notice: null,
          activeWorkout: null,
          completedWorkout: null,
          trainerState: 'idle',
          trainerContext: {},
        };

        const subscribers = new Set();
        function notify() { subscribers.forEach(callback => callback()); }

        function logState(actionType, state) {
            if (actionType.startsWith('@@')) return;
            const { activeWorkout, trainerState, trainerContext } = state;
            if (!activeWorkout) return;
            const currentItem = activeWorkout.items[trainerContext.itemIndex];
            const exerciseName = currentItem?.name || 'Riposo';
            const series = `${trainerContext.currentSeries || '-'}/${currentItem?.series || '-'}`;
            const reps = `${trainerContext.currentRep || '-'}/${currentItem?.reps || '-'}`;
            let status = trainerState.toUpperCase();
            if (trainerState === 'announcing' || trainerState === 'action') { status += ` (${trainerContext.currentPhase || 'N/A'})`; }
            const logString = `Esercizio: ${exerciseName} | Serie: ${series} | Rep: ${reps} | Stato: ${status}`;
            console.log(`%c[${actionType}]`, 'color: #88aaff; font-weight: bold;', logString);
        }

        const stopTimer = () => {
          if (timerInterval) {
            clearInterval(timerInterval);
            timerInterval = null;
          }
        };

        const startTimer = () => {
          stopTimer();
          timerInterval = setInterval(() => {
            dispatch({ type: 'TIMER_TICK' });
          }, TICK_INTERVAL);
        };

        const dispatch = (action) => {
          const oldState = { ...state };
          let newState = { ...state };
          let shouldNotify = true;

          switch (action.type) {
            case 'CHANGE_VIEW': newState = { ...state, currentView: action.payload }; break;
            case 'PREV_WEEK': { const d = new Date(state.focusedDate); d.setDate(d.getDate() - 7); newState = { ...state, focusedDate: d }; break; }
            case 'NEXT_WEEK': { const d = new Date(state.focusedDate); d.setDate(d.getDate() + 7); newState = { ...state, focusedDate: d }; break; }
            case 'SET_WORKOUTS': newState = { ...state, workouts: action.payload }; break;
            case 'OPEN_MODAL': newState = { ...state, isModalOpen: true, modalContext: action.payload }; break;
            case 'CLOSE_MODAL': newState = { ...state, isModalOpen: false, modalContext: null }; break;
            case 'SHOW_NOTICE': newState = { ...state, notice: { message: action.payload.message, id: Date.now() } }; break;
            case 'ADD_EXERCISE_ITEM': {
                const { date, exerciseId } = action.payload;
                const dateKey = `workout-${date}`;
                const exercise = getExerciseById(exerciseId);
                if (!exercise) break;
                const newItem = { ...exercise, id: `item-${Date.now()}`, type: exercise.type || 'exercise', exerciseId: exercise.id };
                const newWorkouts = cloneWorkouts(state.workouts);
                const dayWorkout = newWorkouts[dateKey] || [];
                dayWorkout.push(newItem);
                newWorkouts[dateKey] = dayWorkout;
                newState = { ...state, workouts: newWorkouts, modalContext: { type: 'EDIT_WORKOUT', date } };
                break;
            }
            case 'ADD_REST_ITEM': {
                const { date } = action.payload;
                const dateKey = `workout-${date}`;
                const newItem = { id: `item-${Date.now()}`, type: 'rest', duration: 60 };
                const newWorkouts = cloneWorkouts(state.workouts);
                const dayWorkout = newWorkouts[dateKey] || [];
                dayWorkout.push(newItem);
                newWorkouts[dateKey] = dayWorkout;
                newState = { ...state, workouts: newWorkouts };
                break;
            }
            case 'REMOVE_WORKOUT_ITEM': {
                const { date, itemId } = action.payload;
                const dateKey = `workout-${date}`;
                const newWorkouts = cloneWorkouts(state.workouts);
                newWorkouts[dateKey] = (newWorkouts[dateKey] || []).filter(item => item.id !== itemId);
                newState = { ...state, workouts: newWorkouts };
                break;
            }
            case 'UPDATE_REST_DURATION': {
                const { date, itemId, newDuration } = action.payload;
                const dateKey = `workout-${date}`;
                const newWorkouts = cloneWorkouts(state.workouts);
                const dayWorkout = newWorkouts[dateKey] || [];
                const itemIndex = dayWorkout.findIndex(item => item.id === itemId);
                if (itemIndex > -1 && dayWorkout[itemIndex].type === 'rest') {
                    dayWorkout[itemIndex].duration = newDuration;
                    newWorkouts[dateKey] = dayWorkout;
                    newState = { ...state, workouts: newWorkouts };
                }
                break;
            }
            case 'REORDER_WORKOUT_ITEMS': {
                const { date, draggedItemId, targetItemId } = action.payload;
                const dateKey = `workout-${date}`;
                const newWorkouts = cloneWorkouts(state.workouts);
                const items = newWorkouts[dateKey] || [];
                const draggedIndex = items.findIndex(item => item.id === draggedItemId);
                const targetIndex = items.findIndex(item => item.id === targetItemId);
                if (draggedIndex > -1 && targetIndex > -1) {
                    const [draggedItem] = items.splice(draggedIndex, 1);
                    items.splice(targetIndex, 0, draggedItem);
                    newWorkouts[dateKey] = items;
                    newState = { ...state, workouts: newWorkouts };
                }
                break;
            }
            case 'START_WORKOUT': {
              const { date } = action.payload;
              const dateKey = `workout-${date}`;
              const workoutItems = state.workouts[dateKey];
              if (!workoutItems || workoutItems.length === 0) break;
              stopTimer();
              newState = {
                ...state,
                currentView: 'trainer',
                activeWorkout: { date, items: workoutItems, completed: false, fullPlan: workoutItems },
                completedWorkout: null,
                trainerState: 'ready',
                trainerContext: { itemIndex: 0, currentSeries: 1, currentRep: 1, currentPhaseIndex: 0, duration: 0, remaining: 0 }
              };
              break;
            }
            case 'FINISH_WORKOUT': {
              stopTimer();
              newState = { ...state, currentView: 'debriefing', completedWorkout: { ...state.activeWorkout, completed: true }, activeWorkout: null, trainerState: 'idle', trainerContext: {} };
              break;
            }
            case 'TERMINATE_WORKOUT': {
              stopTimer();
              const { activeWorkout, trainerContext } = state;
              const partialWorkout = { date: activeWorkout.date, fullPlan: activeWorkout.fullPlan, completed: false, terminationPoint: trainerContext };
              newState = { ...state, currentView: 'debriefing', completedWorkout: partialWorkout, activeWorkout: null, trainerState: 'idle', trainerContext: {} };
              break;
            }
            case 'PAUSE_TRAINER': {
              if (state.trainerState === 'paused' || state.trainerState === 'ready' || state.trainerState === 'finished') break;
              stopTimer();
              newState = { ...state, trainerState: 'paused', trainerContext: { ...state.trainerContext, stateBeforePause: state.trainerState } };
              break;
            }
            case 'RESUME_TRAINER': {
              if (state.trainerState !== 'paused') break;
              newState = { ...state, trainerState: state.trainerContext.stateBeforePause };
              startTimer();
              break;
            }
            case 'TIMER_TICK': {
              if (state.trainerState === 'paused' || !state.activeWorkout) { shouldNotify = false; break; }
              const newRemaining = state.trainerContext.remaining - TICK_INTERVAL;
              if (newRemaining <= 0) {
                dispatch({ type: 'TIMER_EXPIRED' });
                shouldNotify = false;
              } else {
                newState = { ...state, trainerContext: { ...state.trainerContext, remaining: newRemaining } };
              }
              break;
            }
            case 'TIMER_EXPIRED': {
                stopTimer();
                const { trainerState, activeWorkout, trainerContext } = state;
                if (!activeWorkout) break;
                
                const currentItem = activeWorkout.items[trainerContext.itemIndex];
                let nextState = trainerState;
                let nextContext = { ...trainerContext };

                if (trainerState === 'preparing') {
                    const firstItem = activeWorkout.items[0];
                    nextState = firstItem.type === 'rest' ? 'rest' : 'announcing';
                    if (nextState === 'announcing') {
                        nextContext.currentPhase = firstItem.type === 'time' ? 'Esegui' : (Object.keys(firstItem.tempo || {})[0] || 'up');
                    }
                } else if (trainerState === 'announcing') {
                    nextState = 'action';
                } else if (trainerState === 'action') {
                    if (currentItem.type === 'exercise') {
                        const tempo = currentItem.tempo || {};
                        const phases = Object.keys(tempo);
                        if (nextContext.currentPhaseIndex < phases.length - 1) {
                            nextState = 'announcing';
                            nextContext.currentPhaseIndex++;
                            nextContext.currentPhase = phases[nextContext.currentPhaseIndex];
                        } else {
                            nextContext.currentPhaseIndex = 0;
                            if (nextContext.currentRep < currentItem.reps) {
                                nextState = 'announcing';
                                nextContext.currentRep++;
                                nextContext.currentPhase = phases[0] || 'up';
                            } else if (nextContext.currentSeries < currentItem.series) {
                                nextState = 'announcing';
                                nextContext.currentSeries++;
                                nextContext.currentRep = 1;
                                nextContext.currentPhase = phases[0] || 'up';
                            } else {
                                // Exercise complete, advance to next item
                                if (trainerContext.itemIndex < activeWorkout.items.length - 1) {
                                    const nextItemIndex = trainerContext.itemIndex + 1;
                                    const nextItem = activeWorkout.items[nextItemIndex];
                                    nextState = nextItem.type === 'rest' ? 'rest' : 'announcing';
                                    nextContext = { itemIndex: nextItemIndex, currentSeries: 1, currentRep: 1, currentPhaseIndex: 0 };
                                    if (nextState === 'announcing') {
                                        nextContext.currentPhase = nextItem.type === 'time' ? 'Esegui' : (Object.keys(nextItem.tempo || {})[0] || 'up');
                                    }
                                } else {
                                    nextState = 'finished';
                                }
                            }
                        }
                    } else if (currentItem.type === 'time') {
                        if (nextContext.currentSeries < currentItem.series) {
                            nextState = 'announcing';
                            nextContext.currentSeries++;
                        } else {
                            if (trainerContext.itemIndex < activeWorkout.items.length - 1) {
                                const nextItemIndex = trainerContext.itemIndex + 1;
                                const nextItem = activeWorkout.items[nextItemIndex];
                                nextState = nextItem.type === 'rest' ? 'rest' : 'announcing';
                                nextContext = { itemIndex: nextItemIndex, currentSeries: 1, currentRep: 1, currentPhaseIndex: 0 };
                                if (nextState === 'announcing') {
                                    nextContext.currentPhase = nextItem.type === 'time' ? 'Esegui' : (Object.keys(nextItem.tempo || {})[0] || 'up');
                                }
                            } else {
                                nextState = 'finished';
                            }
                        }
                    }
                } else if (trainerState === 'rest') {
                    if (trainerContext.itemIndex < activeWorkout.items.length - 1) {
                        const nextItemIndex = trainerContext.itemIndex + 1;
                        const nextItem = activeWorkout.items[nextItemIndex];
                        nextState = nextItem.type === 'rest' ? 'rest' : 'announcing';
                        nextContext = { itemIndex: nextItemIndex, currentSeries: 1, currentRep: 1, currentPhaseIndex: 0 };
                        if (nextState === 'announcing') {
                           nextContext.currentPhase = nextItem.type === 'time' ? 'Esegui' : (Object.keys(nextItem.tempo || {})[0] || 'up');
                        }
                    } else {
                        nextState = 'finished';
                    }
                }
                dispatch({ type: 'SET_TRAINER_PHASE', payload: { nextState, nextContext } });
                shouldNotify = false;
                break;
            }
            case 'START_TRAINING_PREPARATION': {
                dispatch({ type: 'SET_TRAINER_PHASE', payload: { nextState: 'preparing', nextContext: state.trainerContext } });
                shouldNotify = false;
                break;
            }
            case 'SET_TRAINER_PHASE': {
                const { nextState, nextContext } = action.payload;
                let duration = 0;
                if (nextState !== 'finished') {
                    const itemForDuration = state.activeWorkout.items[nextContext.itemIndex];
                    switch(nextState) {
                        case 'preparing': duration = 3000; break;
                        case 'announcing': duration = 750; break;
                        case 'action':
                            if (itemForDuration.type === 'time') { duration = (itemForDuration.duration || 10) * 1000; }
                            else { const tempo = itemForDuration.tempo || {}; duration = (tempo[nextContext.currentPhase] || 1) * 1000; }
                            break;
                        case 'rest':
                            duration = (itemForDuration.duration || 60) * 1000;
                            break;
                    }
                }
                newState = { ...state, trainerState: nextState, trainerContext: { ...nextContext, duration, remaining: duration } };
                if (duration > 0) startTimer();
                break;
            }
            default:
              action.type = '@@UNKNOWN';
              shouldNotify = false;
              break;
          }

          state = newState;
          if (shouldNotify && state !== oldState) {
            logState(action.type, state);
            if (state.workouts !== oldState.workouts) {
              saveToStorage(WORKOUTS_STORAGE_KEY, state.workouts);
            }
            notify();
          }
        };

        return {
          getState: () => ({ ...state }),
          subscribe: (callback) => { subscribers.add(callback); return () => subscribers.delete(callback); },
          dispatch,
        };
      }
      const store = createStore();
      export default store;
  - file: src/views/TrainerView.js
    content: |
      import store from '../modules/store.js';

      function render(element) {
          const { activeWorkout, trainerState, trainerContext } = store.getState();
          if (!activeWorkout) {
              element.innerHTML = '<h2>Nessun workout attivo.</h2>';
              return;
          }

          const currentItem = activeWorkout.items[trainerContext.itemIndex];
          const radius = 90;
          const circumference = 2 * Math.PI * radius;

          let phaseText = '', instructionText = '', buttonText = '', timerText = '', phaseClass = '';
          let ringOffset = circumference;
          const isExercise = currentItem.type === 'exercise' || currentItem.type === 'time';
          let terminateButtonHidden = trainerState === 'finished' || trainerState === 'ready';

          const { duration, remaining } = trainerContext;
          if (duration > 0) {
              const progress = (duration - remaining) / duration;
              ringOffset = circumference * (1 - progress);
          }

          switch (trainerState) {
              case 'ready':
                  phaseText = 'PRONTO'; instructionText = `Premi INIZIA per cominciare`; buttonText = 'INIZIA';
                  break;
              case 'preparing':
                  phaseText = 'PREPARATI'; instructionText = 'Inizia il movimento...'; buttonText = 'PAUSA'; timerText = Math.ceil(remaining / 1000);
                  break;
              case 'rest':
                  phaseText = 'RIPOSO'; instructionText = 'Recupera'; buttonText = 'PAUSA'; timerText = Math.ceil(remaining / 1000);
                  break;
              case 'announcing':
                  phaseText = trainerContext.currentPhase?.toUpperCase() || ''; instructionText = `Prossima fase: ${phaseText}`; buttonText = 'PAUSA'; phaseClass = 'is-flashing';
                  break;
              case 'action':
                  phaseText = trainerContext.currentPhase?.toUpperCase() || ''; instructionText = 'Esegui il movimento'; buttonText = 'PAUSA'; timerText = Math.ceil(remaining / 1000);
                  break;
              case 'paused':
                  const prevState = trainerContext.stateBeforePause;
                  if(prevState === 'preparing') { phaseText = 'PREPARATI'; }
                  else if(prevState === 'rest') { phaseText = 'RIPOSO'; }
                  else if(prevState === 'announcing' || prevState === 'action') {
                      phaseText = trainerContext.currentPhase?.toUpperCase() || '';
                      if (prevState === 'announcing') { phaseClass = 'is-flashing'; }
                  }
                  instructionText = 'Pausa'; buttonText = 'RIPRENDI';
                  if(prevState !== 'announcing') { timerText = Math.ceil(remaining / 1000); }
                  break;
              case 'finished':
                  phaseText = 'FINE'; instructionText = 'Workout completato!'; buttonText = 'DEBRIEFING';
                  break;
              default:
                  phaseText = 'IDLE'; instructionText = 'Stato non riconosciuto'; buttonText = 'RESET';
          }

          const headerTitle = currentItem.name || 'Riposo';
          const seriesText = isExercise ? `SERIE ${trainerContext.currentSeries} / ${currentItem.series || 1}` : '';
          const repsText = currentItem.type === 'exercise' ? `REP ${trainerContext.currentRep} / ${currentItem.reps || 1}` : '';

          element.innerHTML = `
              <div class="trainer-container">
                  <header class="trainer-header">
                      <h2>${headerTitle}</h2>
                      <p>${seriesText} ${repsText ? `| ${repsText}` : ''}</p>
                  </header>
                  <div class="progress-ring">
                      <svg>
                          <circle class="progress-ring__background" stroke-width="10" r="${radius}" cx="50%" cy="50%"></circle>
                          <circle class="progress-ring__foreground" style="stroke-dashoffset: ${ringOffset};" stroke-width="10" r="${radius}" cx="50%" cy="50%" stroke-dasharray="${circumference}"></circle>
                      </svg>
                      <div class="progress-ring__text">
                          <div class="progress-ring__phase ${phaseClass}">${phaseText}</div>
                          <div class="progress-ring__timer">${timerText}</div>
                      </div>
                  </div>
                  <footer class="trainer-footer">
                      <p class="trainer-instruction">${instructionText}</p>
                      <div class="trainer-controls">
                          <button class="trainer-main-btn">${buttonText}</button>
                          <button class="trainer-terminate-btn" ${terminateButtonHidden ? 'hidden' : ''}>Termina</button>
                      </div>
                  </footer>
              </div>
          `;
      }

      export function init(element) {
          element.addEventListener('click', (event) => {
              const mainButton = event.target.closest('.trainer-main-btn');
              const terminateButton = event.target.closest('.trainer-terminate-btn');

              if (terminateButton) {
                  store.dispatch({ type: 'PAUSE_TRAINER' });
                  store.dispatch({ type: 'OPEN_MODAL', payload: { type: 'CONFIRM_TERMINATION' } });
                  return;
              }

              if (!mainButton) return;

              const { trainerState } = store.getState();
              switch (trainerState) {
                  case 'ready':
                      store.dispatch({ type: 'START_TRAINING_PREPARATION' });
                      break;
                  case 'paused':
                      store.dispatch({ type: 'RESUME_TRAINER' });
                      break;
                  case 'finished':
                      store.dispatch({ type: 'FINISH_WORKOUT' });
                      break;
                  case 'preparing':
                  case 'action':
                  case 'rest':
                  case 'announcing':
                      store.dispatch({ type: 'PAUSE_TRAINER' });
                      break;
              }
          });

          store.subscribe(() => {
              if(element.classList.contains('view--active')) {
                  render(element);
              }
          });
          render(element);
      }
  - file: assets/css/style.css
    content: |
      /* --- GLOBAL STYLES & MOBILE FIRST --- */
      :root {
          --bg-color: #1a1a1d;
          --card-color: #2c2c34;
          --primary-color: #9575cd;
          --secondary-color: #4db6ac;
          --text-color: #f4f4f9;
          --text-color-muted: #aaa;
          --border-color: #40404a;
          --danger-color: #ef5350;
          --success-color: #66bb6a;
      }
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body {
          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          background-color: var(--bg-color);
          color: var(--text-color);
          padding-top: 80px; /* Adjusted Space for the fixed header */
          scrollbar-width: thin;
          scrollbar-color: var(--primary-color) var(--bg-color);
      }
      /* Custom Scrollbar for Webkit Browsers */
      body::-webkit-scrollbar, .modal-body::-webkit-scrollbar { width: 8px; }
      body::-webkit-scrollbar-track, .modal-body::-webkit-scrollbar-track { background: var(--card-color); }
      body::-webkit-scrollbar-thumb, .modal-body::-webkit-scrollbar-thumb { background-color: var(--primary-color); border-radius: 10px; border: 2px solid var(--card-color); }

      /* --- PERSISTENT HEADER (REDESIGNED) --- */
      .app-header {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 60px;
          background-color: rgba(44, 44, 52, 0.85);
          backdrop-filter: blur(10px);
          -webkit-backdrop-filter: blur(10px);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      }
      .app-title {
          display: flex;
          align-items: center;
          gap: 0.75rem;
      }
      .app-title svg {
          width: 24px;
          height: 24px;
      }
      .app-title h1 {
          font-size: 1.4rem;
          background: -webkit-linear-gradient(45deg, var(--primary-color), var(--secondary-color));
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
      }

      #app-container { max-width: 1200px; margin: 0 auto; padding: 1rem; }
      .view { display: none; width: 100%; }
      .view--active { display: block; }

      /* --- KEYFRAMES --- */
      @keyframes soft-flash {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.2; }
      }
      .is-flashing {
        animation: soft-flash 0.75s ease-in-out;
      }
      @keyframes fade-slide-up {
          from {
              opacity: 0;
              transform: translateY(10px);
          }
          to {
              opacity: 1;
              transform: translateY(0);
          }
      }
      @keyframes fade-in-out {
        0%, 100% { opacity: 0; transform: translateY(-20px); }
        10%, 90% { opacity: 1; transform: translateY(0); }
      }

      /* --- NOTICE / TOAST STYLES --- */
      #notice-container {
          position: fixed;
          top: 80px; /* Below header */
          left: 50%;
          transform: translateX(-50%);
          z-index: 2000;
          display: flex;
          justify-content: center;
      }
      .notice {
          background-color: var(--secondary-color);
          color: var(--bg-color);
          padding: 0.8rem 1.5rem;
          border-radius: 6px;
          font-weight: bold;
          box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
          animation: fade-in-out 3s ease-in-out forwards;
      }

      /* --- CALENDAR VIEW STYLES --- */
      .calendar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
      .calendar-header h2 { font-size: 1.25rem; text-align: center; }
      .calendar-header button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: background-color 0.2s; }
      .calendar-header button:hover { background-color: var(--primary-color); }
      .calendar-grid { display: grid; grid-template-columns: 1fr; gap: 0.5rem; }
      .day-cell { background-color: var(--card-color); border: 1px solid var(--border-color); border-radius: 8px; padding: 1rem; min-height: 150px; display: flex; flex-direction: column; cursor: pointer; transition: border-color 0.2s; }
      .day-cell:hover { border-color: var(--primary-color); }
      .day-cell__header { display: flex; justify-content: space-between; font-weight: bold; color: var(--text-color-muted); text-transform: uppercase; font-size: 0.8rem; pointer-events: none; }
      .day-cell__body { margin-top: 0.5rem; flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between; align-items: flex-start; pointer-events: none; }
      .exercise-count { font-size: 0.9rem; color: var(--secondary-color); }
      .start-btn { background-color: var(--secondary-color); color: var(--bg-color); border: none; padding: 0.6rem; border-radius: 6px; cursor: pointer; font-weight: bold; text-transform: uppercase; width: 100%; margin-top: 1rem; transition: opacity 0.2s; pointer-events: all !important; }
      .start-btn:hover { opacity: 0.85; }

      /* --- MODAL STYLES --- */
      #modal-container { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: flex; justify-content: center; align-items: center; opacity: 0; pointer-events: none; transition: opacity 0.3s ease; z-index: 1001; }
      #modal-container.active { opacity: 1; pointer-events: all; }
      .modal-content { background-color: var(--card-color); border-radius: 8px; border: 1px solid var(--border-color); width: 90%; max-width: 500px; transform: scale(0.95); transition: transform 0.3s ease; display: flex; flex-direction: column; max-height: 90vh; }
      #modal-container.active .modal-content { transform: scale(1); }
      .modal-header { padding: 1rem 1.5rem; border-bottom: 1px solid var(--border-color); flex-shrink: 0; display: flex; justify-content: space-between; align-items: center; }
      .modal-header h3 { color: var(--primary-color); }
      .modal-close-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; cursor: pointer; }
      .modal-body { overflow-y: auto; flex-grow: 1; padding: 1rem 1.5rem; }
      .modal-actions { padding: 1rem 1.5rem; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; gap: 1rem; flex-shrink: 0; }
      .modal-actions button {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s;
        font-weight: bold;
      }
      .modal-actions .btn-confirm {
          background-color: var(--danger-color);
          border: 1px solid var(--danger-color);
          color: var(--text-color);
      }
      .modal-actions .btn-cancel {
          background-color: transparent;
          border: 1px solid var(--border-color);
          color: var(--text-color-muted);
      }
      .add-rest-btn, .add-exercise-btn { background-color: transparent; border: 1px solid var(--secondary-color); color: var(--secondary-color); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: all 0.2s; }
      .add-rest-btn:hover, .add-exercise-btn:hover { background-color: var(--secondary-color); color: var(--card-color); }

      /* --- WORKOUT EDITOR & LIBRARY STYLES --- */
      .workout-item-list, .exercise-library-list { list-style: none; padding: 0; margin: 0; }
      .workout-item { display: flex; align-items: center; padding: 1rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .workout-item:last-child { border-bottom: none; }
      .workout-item.dragging { opacity: 0.4; background-color: var(--border-color); }
      .workout-item.drag-over-target { border-top: 2px solid var(--primary-color); }
      .drag-handle { cursor: grab; padding-right: 1rem; color: var(--text-color-muted); }
      .item-info { display: flex; align-items: baseline; gap: 0.75rem; flex-grow: 1; }
      .item-info .item-name { font-weight: bold; }
      .item-info .item-details { color: var(--secondary-color); }
      .workout-item--rest .item-info .item-name { color: var(--text-color-muted); font-style: italic; }
      .rest-duration-input { -moz-appearance: textfield; background-color: var(--bg-color); border: 1px solid var(--border-color); color: var(--text-color); border-radius: 4px; padding: 0.25rem; width: 60px; text-align: center; }
      .rest-duration-input::-webkit-outer-spin-button, .rest-duration-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
      .remove-item-btn { background: none; border: none; color: var(--text-color-muted); font-size: 1.5rem; font-weight: bold; cursor: pointer; padding: 0 0.5rem; border-radius: 50%; }
      .remove-item-btn:hover { color: var(--danger-color); background-color: rgba(239, 83, 80, 0.1); }
      .exercise-library-item { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 0.5rem; border-bottom: 1px solid var(--border-color); }
      .exercise-library-item:last-child { border-bottom: none; }
      .add-to-workout-btn { background-color: var(--primary-color); color: var(--text-color); border: none; padding: 0.4rem 0.8rem; border-radius: 4px; cursor: pointer; }

      /* --- TRAINER VIEW STYLES --- */
      .trainer-container { display: flex; flex-direction: column; align-items: center; justify-content: center; height: calc(100vh - 4rem - 60px); text-align: center; }
      .trainer-header { margin-bottom: 1rem; }
      .trainer-header h2 { font-size: 2rem; text-transform: uppercase; color: var(--primary-color); }
      .trainer-header p { color: var(--text-color-muted); }
      .progress-ring { position: relative; width: 250px; height: 250px; margin: 2rem 0; }
      .progress-ring svg { width: 100%; height: 100%; transform: rotate(-90deg); }
      .progress-ring__background { stroke: var(--card-color); fill: transparent; }
      .progress-ring__foreground { stroke: var(--secondary-color); fill: transparent; }
      .progress-ring__text { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }
      .progress-ring__phase { font-size: 1.6rem; font-weight: bold; text-transform: uppercase; }
      .progress-ring__timer { font-size: 3rem; color: var(--text-color); }
      .trainer-footer { margin-top: 1rem; }
      .trainer-footer p { font-size: 1.2rem; min-height: 2em; }
      .trainer-controls { display: flex; flex-direction: column; align-items: center; gap: 1rem; margin-top: 1rem; }
      .trainer-main-btn { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 1rem 2rem; border-radius: 8px; cursor: pointer; font-size: 1.2rem; text-transform: uppercase; }
      .trainer-terminate-btn {
          background-color: transparent;
          border: 1px solid var(--border-color);
          color: var(--text-color-muted);
          padding: 0.5rem 1rem;
          border-radius: 6px;
          cursor: pointer;
          font-size: 0.9rem;
          transition: all 0.2s ease;
      }
      .trainer-terminate-btn:hover {
          background-color: var(--border-color);
          color: var(--text-color);
      }

      /* --- DEBRIEFING VIEW STYLES --- */
      .debriefing-container { max-width: 700px; margin: 0 auto; padding: 1rem; }
      .debriefing-container h2 { text-align: center; color: var(--primary-color); margin-bottom: 2rem; }
      .debrief-list { list-style: none; padding: 0; margin: 0 0 2rem 0; }
      .debrief-item {
          background-color: var(--card-color);
          border: 1px solid var(--border-color);
          border-left: 5px solid var(--border-color);
          padding: 1rem;
          border-radius: 6px;
          margin-bottom: 0.75rem;
          opacity: 0; /* Start hidden for animation */
          animation: fade-slide-up 0.5s ease-out forwards;
      }
      .debrief-item--completed { border-left-color: var(--success-color); }
      .debrief-item--terminated { border-left-color: var(--danger-color); font-weight: bold; }
      .debrief-item--skipped { opacity: 0.6; animation: none; }
      .debriefing-actions { display: flex; justify-content: center; gap: 1rem; }
      .debriefing-actions button { background-color: var(--card-color); color: var(--text-color); border: 1px solid var(--border-color); padding: 0.8rem 1.5rem; border-radius: 6px; cursor: pointer; transition: all 0.2s; }
      .debriefing-actions button:hover { border-color: var(--primary-color); color: var(--primary-color); }

      /* --- TABLET/DESKTOP OVERRIDES --- */
      @media (min-width: 768px) {
          #app-container { padding: 2rem; }
          .calendar-grid { grid-template-columns: repeat(7, 1fr); gap: 1rem; }
          .modal-content { max-width: 600px; height: auto; max-height: 80vh; }
          .progress-ring { width: 300px; height: 300px; }
      }
commands:
  - "echo 'Riprogettazione architetturale completata. Il trainer è ora stabile e l'animazione migliorata.'"