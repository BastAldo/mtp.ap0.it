commit_message: "docs: Aggiungere documenti core e fornire comandi di pulizia"
rationale: |
  Questo commit adotta l'approccio corretto basato sull'analisi completa dello script patcher.
  1. Crea i documenti architetturali fondamentali (`api_contract.md`, `frontend_trainer_statemachine.md`) usando l'azione `CREATE`.
  2. Utilizza la sezione `informational_messages` per istruire l'utente su come rimuovere in modo pulito e definitivo tutto il codice sorgente legacy. Questo metodo è più pulito ed efficiente rispetto al precedente workaround di svuotamento dei file.
patches:
  - file: "docs/api_contract.md"
    actions:
      - type: "CREATE"
        content: |
          # Contratto API e Dati Mock

          Questo documento definisce il contratto dati tra il frontend e il backend. Il frontend svilupperà basandosi su queste strutture. Il backend dovrà implementare API che restituiscano dati conformi a questo contratto.

          ## 1. Oggetto Workout

          ```json
          {
            "id": "workout-uuid-001",
            "date": "2025-07-21",
            "name": "Spinta A - Petto e Tricipiti",
            "items": [
              {
                "exerciseId": "ex-001",
                "exerciseName": "Panca Piana Bilanciere",
                "sets": 3,
                "reps": 8
              },
              {
                "exerciseId": "ex-002",
                "exerciseName": "Dip alle Parallele",
                "sets": 3,
                "reps": 10
              },
              {
                "exerciseId": "ex-003",
                "exerciseName": "Plank",
                "sets": 2,
                "durationSeconds": 60
              }
            ]
          }
          ```

          ## 2. Oggetto ExecutionPlan

          ```json
          [
            { "type": "PREPARE", "durationSeconds": 5 },
            { "type": "ANNOUNCE", "exerciseName": "Panca Piana Bilanciere" },
            { "type": "EXERCISE", "set": 1, "reps": 8 },
            { "type": "REST", "durationSeconds": 90 },
            { "type": "EXERCISE", "set": 2, "reps": 8 },
            { "type": "REST", "durationSeconds": 90 },
            { "type": "EXERCISE", "set": 3, "reps": 8 },
            { "type": "FINISHED" }
          ]
          ```
  - file: "docs/flowcharts/frontend_trainer_statemachine.md"
    actions:
      - type: "CREATE"
        content: |
          # Flowchart: Macchina a Stati del TrainerView

          Questo flowchart descrive la logica di stato del componente `TrainerView`.

          ```mermaid
          graph TD
              subgraph Inizio
                  A[Idle] -->|Avvia Allenamento| B(Inizializzazione)
              end

              subgraph "Ciclo di Esecuzione"
                  B --> C{Step Corrente?}
                  C -->|PREPARE| D[Stato: Preparazione]
                  D --> C

                  C -->|ANNOUNCE| E[Stato: Annuncio]
                  E --> C

                  C -->|EXERCISE / EXERCISE_TIMED| F[Stato: Esecuzione]
                  F --> C

                  C -->|REST| G[Stato: Riposo]
                  G --> C
              end

              subgraph Fine
                  C -->|FINISHED| H[Stato: Completato]
                  H -->|Torna al Calendario| I(Reset Stato)
                  I --> A
              end
          ```
informational_messages:
  - "echo 'Documentazione creata. Eseguire i seguenti comandi per rimuovere il codice legacy:'"
  - "rm index.html"
  - "rm workouts.js"
  - "rm -rf src/"