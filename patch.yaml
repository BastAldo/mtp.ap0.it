commit_message: "fix(trainer): Corregge bug riposo, migliora UI e animazioni"
rationale: |
  Questo commit risolve diversi problemi segnalati dall'utente relativi alla Trainer View:

  1.  **Correzione Bug Riposo**: La logica per avviare il riposo tra le serie è stata corretta. Ora la durata viene letta correttamente dalla definizione dell'esercizio, e un valore di `defaultRest` è stato aggiunto alla libreria statica per robustezza.
  2.  **Miglioramento Stato 'preparing'**: Il testo è stato cambiato in 'PREPARATI' e l'anello di progresso ora si anima correttamente durante il countdown iniziale di 3 secondi.
  3.  **Correzione Animazione Anello**: L'animazione dell'anello di progresso ora si completa sempre visivamente, forzando lo stato finale prima di passare alla fase successiva.
  4.  **Formattazione Timer**: Il timer del conto alla rovescia ora visualizza solo numeri interi, senza decimali, per una migliore leggibilità.
patches:
  - file: src/data/_staticExercises.js
    content: |
      // --- Libreria Statica degli Esercizi ---
      // Questa è una delle fonti dati per l'ExerciseRepository.

      export const staticExercises = [
        { id: 'bench-press', name: 'Bench Press', series: 3, reps: 8, defaultRest: 90 },
        { id: 'deadlift', name: 'Deadlift', series: 3, reps: 5, defaultRest: 120 },
        { id: 'squat', name: 'Squat', series: 3, reps: 10, defaultRest: 90 },
        { id: 'overhead-press', name: 'Overhead Press', series: 4, reps: 8, defaultRest: 75 },
        { id: 'pull-ups', name: 'Pull-ups', series: 3, reps: 'max', defaultRest: 60 },
        { id: 'push-ups', name: 'Push-ups', series: 3, reps: 12, defaultRest: 60 },
        { id: 'dips', name: 'Dips', series: 3, reps: 10, defaultRest: 60 },
        { id: 'plank', name: 'Plank', series: 3, duration: 60, type: 'time', defaultRest: 45 }, // Esempio esercizio a tempo
      ];
  - file: src/modules/store.js
    content: |
      import { saveToStorage } from './storage.js';
      import { getExerciseById } from './exerciseRepository.js';

      const WORKOUTS_STORAGE_KEY = 'workouts';

      function createStore() {
        let state = {
          currentView: 'calendar',
          focusedDate: new Date(),
          workouts: {},
          isModalOpen: false,
          modalContext: null,
          activeWorkout: null,
          trainerState: 'idle', // idle, ready, preparing, announcing, action, rest, paused, finished
          trainerContext: {}, // Contesto dinamico del trainer (serie, rep, fase corrente)
        };

        const subscribers = new Set();
        function notify() { subscribers.forEach(callback => callback()); }

        function dispatch(action) {
          const oldState = state;
          switch (action.type) {
            case 'CHANGE_VIEW': state = { ...state, currentView: action.payload }; break;
            case 'PREV_WEEK': { const d=new Date(state.focusedDate); d.setDate(d.getDate()-7); state={...state, focusedDate:d}; break; }
            case 'NEXT_WEEK': { const d=new Date(state.focusedDate); d.setDate(d.getDate()+7); state={...state, focusedDate:d}; break; }
            case 'SET_WORKOUTS': state = { ...state, workouts: action.payload }; break;
            case 'OPEN_MODAL': state = { ...state, isModalOpen: true, modalContext: action.payload }; break;
            case 'CLOSE_MODAL': state = { ...state, isModalOpen: false, modalContext: null }; break;
            case 'REMOVE_WORKOUT_ITEM': { /* ... (invariato) ... */ break; }
            case 'UPDATE_REST_DURATION': { /* ... (invariato) ... */ break; }
            case 'ADD_REST_ITEM': { /* ... (invariato) ... */ break; }
            case 'ADD_EXERCISE_ITEM': { /* ... (invariato) ... */ break; }
            case 'START_WORKOUT': {
              const { date } = action.payload;
              const dateKey = `workout-${date}`;
              const workoutItems = state.workouts[dateKey];
              if (!workoutItems || workoutItems.length === 0) break;
              state = {
                ...state,
                currentView: 'trainer',
                activeWorkout: { date, items: workoutItems },
                trainerState: 'ready',
                trainerContext: { itemIndex: 0, currentSeries: 1, currentRep: 1 }
              };
              break;
            }
            case 'SET_TRAINER_STATE': {
              state = { ...state, trainerState: action.payload };
              break;
            }
            case 'UPDATE_TRAINER_CONTEXT': {
              state = { ...state, trainerContext: { ...state.trainerContext, ...action.payload }};
              break;
            }
            case 'ADVANCE_TRAINER_LOGIC': {
              const { activeWorkout, trainerContext } = state;
              const currentItem = activeWorkout.items[trainerContext.itemIndex];
              const maxReps = currentItem.reps || 1;
              const maxSeries = currentItem.series || 1;

              let nextContext = { ...trainerContext };
              let nextState = state.trainerState;

              if (nextContext.currentRep < maxReps) {
                nextContext.currentRep++;
                nextState = 'ready';
              } else if (nextContext.currentSeries < maxSeries) {
                nextContext.currentSeries++;
                nextContext.currentRep = 1;
                const exerciseDef = getExerciseById(currentItem.exerciseId);
                nextContext.restDuration = exerciseDef?.defaultRest || 60;
                nextState = 'rest';
              } else {
                if (trainerContext.itemIndex < activeWorkout.items.length - 1) {
                  nextContext.itemIndex++;
                  const nextItem = activeWorkout.items[nextContext.itemIndex];
                  if(nextItem.type === 'exercise') {
                    nextContext.currentSeries = 1;
                    nextContext.currentRep = 1;
                    nextState = 'ready';
                  } else {
                    nextContext.restDuration = nextItem.duration;
                    nextState = 'rest';
                  }
                } else {
                  nextState = 'finished';
                }
              }
              state = { ...state, trainerState: nextState, trainerContext: nextContext };
              break;
            }
            default:
              console.warn(`Azione non riconosciuta: ${action.type}`);
              return;
          }
          if (state !== oldState) {
            console.log(`Action: ${action.type}`, action.payload);
            if (state.workouts !== oldState.workouts) {
              saveToStorage(WORKOUTS_STORAGE_KEY, state.workouts);
              console.log('Workouts salvati in localStorage.');
            }
            notify();
          }
        }
        return {
          getState: () => ({ ...state }),
          subscribe: (callback) => { subscribers.add(callback); return () => subscribers.delete(callback); },
          dispatch,
        };
      }
      const store = createStore();
      export default store;
  - file: src/views/TrainerView.js
    content: |
      import store from '../modules/store.js';

      let stateTimer = null;

      function advanceTrainer() {
        store.dispatch({ type: 'ADVANCE_TRAINER_LOGIC' });
      }

      const PhasedExerciseRunner = {
          start(element) {
              this.element = element;
              store.dispatch({ type: 'UPDATE_TRAINER_CONTEXT', payload: { currentPhaseIndex: 0 } });
              this.runNextPhase();
          },

          runNextPhase() {
              const { activeWorkout, trainerContext } = store.getState();
              const currentExercise = activeWorkout.items[trainerContext.itemIndex];
              const phases = currentExercise.tempo || ['down', 'hold', 'up'];
              const currentPhaseIndex = trainerContext.currentPhaseIndex;

              if (currentPhaseIndex >= phases.length) {
                  advanceTrainer();
                  return;
              }

              const phaseName = phases[currentPhaseIndex];
              store.dispatch({ type: 'UPDATE_TRAINER_CONTEXT', payload: { currentPhase: phaseName } });
              store.dispatch({ type: 'SET_TRAINER_STATE', payload: 'announcing' });
          },

          execute() {
              const { trainerContext } = store.getState();
              const phaseName = trainerContext.currentPhase;
              const durationMap = { 'up': 1.5, 'hold': 1, 'down': 2 };
              const duration = durationMap[phaseName] || 1;
              let elapsed = 0;
              const interval = 50;

              const timerEl = this.element.querySelector('.progress-ring__timer');
              const ringEl = this.element.querySelector('.progress-ring__foreground');
              const radius = ringEl.r.baseVal.value;
              const circumference = 2 * Math.PI * radius;

              stateTimer = setInterval(() => {
                  elapsed += interval;
                  const progress = Math.min(1, elapsed / (duration * 1000));
                  const offset = circumference * (1 - progress);
                  ringEl.style.strokeDashoffset = offset;
                  if (timerEl) timerEl.textContent = Math.ceil((duration * 1000 - elapsed) / 1000);

                  if (elapsed >= duration * 1000) {
                      clearInterval(stateTimer);
                      ringEl.style.strokeDashoffset = 0; // Forza il completamento
                      store.dispatch({ type: 'UPDATE_TRAINER_CONTEXT', payload: { currentPhaseIndex: trainerContext.currentPhaseIndex + 1 } });
                      this.runNextPhase();
                  }
              }, interval);
          }
      };

      export function init(element) {
          element.addEventListener('click', (event) => {
              const mainButton = event.target.closest('.trainer-main-btn');
              if (mainButton) {
                  const currentState = store.getState().trainerState;
                  if (currentState === 'ready') {
                      store.dispatch({ type: 'SET_TRAINER_STATE', payload: 'preparing' });
                  }
              }
          });

          function runStateLogic() {
              const { trainerState, trainerContext } = store.getState();
              if (stateTimer) { clearInterval(stateTimer); stateTimer = null; }

              const timerEl = element.querySelector('.progress-ring__timer');
              const ringEl = element.querySelector('.progress-ring__foreground');
              const radius = ringEl?.r.baseVal.value;
              const circumference = 2 * Math.PI * radius;

              if (trainerState === 'preparing') {
                  const duration = 3000;
                  let elapsed = 0;
                  const interval = 50;
                  if (timerEl) timerEl.textContent = '3';
                  stateTimer = setInterval(() => {
                      elapsed += interval;
                      const progress = Math.min(1, elapsed / duration);
                      const offset = circumference * (1 - progress);
                      if(ringEl) ringEl.style.strokeDashoffset = offset;
                      if (timerEl) timerEl.textContent = Math.ceil((duration - elapsed) / 1000);
                      if (elapsed >= duration) {
                          clearInterval(stateTimer);
                          PhasedExerciseRunner.start(element);
                      }
                  }, interval);
              } else if (trainerState === 'announcing') {
                  stateTimer = setTimeout(() => store.dispatch({ type: 'SET_TRAINER_STATE', payload: 'action' }), 750);
              } else if (trainerState === 'action') {
                  PhasedExerciseRunner.execute();
              } else if (trainerState === 'rest') {
                  const restDuration = trainerContext.restDuration || 60;
                  let timeLeft = restDuration;
                  if (timerEl) timerEl.textContent = timeLeft;
                  stateTimer = setInterval(() => {
                      timeLeft--;
                      if (timerEl) timerEl.textContent = timeLeft;
                      if (timeLeft <= 0) {
                          clearInterval(stateTimer);
                          advanceTrainer();
                      }
                  }, 1000);
              }
          }

          function render() {
              const { activeWorkout, trainerState, trainerContext } = store.getState();
              if (!activeWorkout) { element.innerHTML = '<h2>Nessun workout attivo.</h2>'; return; }

              const currentItem = activeWorkout.items[trainerContext.itemIndex];
              const isExercise = currentItem.type === 'exercise';
              const radius = 90;
              const circumference = 2 * Math.PI * radius;

              let phaseText = '', instructionText = '', buttonText = '', timerText = '', phaseClass = '';
              let ringOffset = circumference;

              switch (trainerState) {
                  case 'ready':
                      phaseText = 'PRONTO';
                      instructionText = `Premi INIZIA per cominciare`;
                      buttonText = 'INIZIA';
                      break;
                  case 'preparing':
                      phaseText = 'PREPARATI'; instructionText = 'Inizia il movimento...'; buttonText = 'PAUSA'; timerText = '3';
                      ringOffset = circumference;
                      break;
                  case 'rest':
                      phaseText = 'RIPOSO'; instructionText = 'Recupera per la prossima serie'; buttonText = 'PAUSA';
                      timerText = trainerContext.restDuration || 60;
                      break;
                  case 'announcing':
                      phaseText = trainerContext.currentPhase?.toUpperCase() || '';
                      instructionText = `Prossima fase: ${phaseText}`;
                      buttonText = 'PAUSA';
                      phaseClass = 'is-flashing';
                      break;
                  case 'action':
                      phaseText = trainerContext.currentPhase?.toUpperCase() || '';
                      instructionText = 'Esegui il movimento';
                      buttonText = 'PAUSA';
                      ringOffset = circumference;
                      break;
                  case 'finished':
                      phaseText = 'FINE'; instructionText = 'Workout completato!'; buttonText = 'DEBRIEFING';
                      break;
                  default:
                      phaseText = 'IDLE'; instructionText = 'Stato non riconosciuto'; buttonText = 'RESET';
              }

              const headerTitle = isExercise ? currentItem.name : 'Riposo';
              const seriesText = isExercise ? `SERIES ${trainerContext.currentSeries} / ${currentItem.series || 1}` : '';
              const repsText = isExercise ? `REP ${trainerContext.currentRep} / ${currentItem.reps || 1}` : '';

              element.innerHTML = `
                  <div class="trainer-container">
                      <header class="trainer-header">
                          <h2>${headerTitle}</h2>
                          <p>${seriesText} ${repsText ? `| ${repsText}` : ''}</p>
                      </header>
                      <div class="progress-ring">
                          <svg>
                              <circle class="progress-ring__background" stroke-width="10" r="${radius}" cx="50%" cy="50%"></circle>
                              <circle class="progress-ring__foreground" style="stroke-dashoffset: ${ringOffset};" stroke-width="10" r="${radius}" cx="50%" cy="50%" stroke-dasharray="${circumference}"></circle>
                          </svg>
                          <div class="progress-ring__text">
                              <div class="progress-ring__phase ${phaseClass}">${phaseText}</div>
                              <div class="progress-ring__timer">${timerText}</div>
                          </div>
                      </div>
                      <footer class="trainer-footer">
                          <p class="trainer-instruction">${instructionText}</p>
                          <div class="trainer-controls">
                              <button class="trainer-main-btn">${buttonText}</button>
                          </div>
                      </footer>
                  </div>
              `;
              runStateLogic();
          }
          store.subscribe(render);
          render();
      }
commands:
  - "echo 'Correzioni applicate. Ora puoi testare di nuovo il flusso del trainer.'"