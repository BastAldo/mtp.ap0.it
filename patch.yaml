commit_message: "feat: Inizializza la struttura del progetto SPA e i moduli core"
rationale: |
  Questo commit crea lo scheletro fondamentale della Single-Page Application come definito e approvato nel piano d'azione.
  L'implementazione è strettamente allineata ai documenti di architettura, funzionalità e stile.

  - Viene creata la struttura dei file (HTML, CSS, JS).
  - Viene implementata una prima versione funzionante dello store centralizzato (`store.js`), che è il cuore dell'architettura.
  - Viene impostato il foglio di stile con le variabili di colore e l'approccio mobile-first.
  - Vengono rimossi i file Python (`main.py`, `requirements.txt`) non pertinenti all'architettura SPA.
patches:
  - file: index.html
    content: |
      <!DOCTYPE html>
      <html lang="it">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Mio Trainer Personale</title>
          <link rel="stylesheet" href="assets/css/style.css">
      </head>
      <body>

          <div id="app-container">
              <div id="calendar-view" class="view view--active">
                  <h1>Calendar View</h1>
              </div>
              <div id="trainer-view" class="view">
                  <h1>Trainer View</h1>
              </div>
              <div id="debriefing-view" class="view">
                  <h1>Debriefing View</h1>
              </div>
          </div>

          <script src="src/main.js" type="module"></script>
      </body>
      </html>
  - file: assets/css/style.css
    content: |
      /* --- GLOBAL STYLES & MOBILE FIRST --- */

      :root {
          --bg-color: #1a1a1d;
          --card-color: #2c2c34;
          --primary-color: #9575cd;
          --secondary-color: #4db6ac;
          --text-color: #f4f4f9;
          /* Aggiungere altri colori dalla guida di stile se necessario */
      }

      * {
          box-sizing: border-box;
          margin: 0;
          padding: 0;
      }

      body {
          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          background-color: var(--bg-color);
          color: var(--text-color);
      }

      #app-container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 1rem;
      }

      .view {
          display: none;
          width: 100%;
      }

      .view--active {
          display: block;
      }


      /* --- TABLET/DESKTOP OVERRIDES --- */
      @media (min-width: 768px) {
          #app-container {
              padding: 2rem;
          }
      }
  - file: src/main.js
    content: |
      import store from './modules/store.js';

      // Cache delle viste per performance
      const views = {
          calendar: document.getElementById('calendar-view'),
          trainer: document.getElementById('trainer-view'),
          debriefing: document.getElementById('debriefing-view'),
      };

      let currentActiveView = null;

      function render() {
          const state = store.getState();
          const activeViewId = state.currentView;

          // Se la vista attiva è già quella giusta, non fare nulla
          if (currentActiveView === views[activeViewId]) {
              return;
          }

          // Nascondi la vista precedentemente attiva
          if (currentActiveView) {
              currentActiveView.classList.remove('view--active');
          }

          // Mostra la nuova vista attiva
          const newActiveView = views[activeViewId];
          if (newActiveView) {
              newActiveView.classList.add('view--active');
              currentActiveView = newActiveView;
          } else {
              console.error(`View "${activeViewId}" non trovata.`);
              currentActiveView = null;
          }
      }

      // Sottoscrivi la funzione di rendering ai cambiamenti dello store
      store.subscribe(render);

      // Renderizza lo stato iniziale all'avvio
      render();

      console.log('App "Mio Trainer Personale" inizializzata.');
  - file: src/modules/store.js
    content: |
      // --- Centralized State Store (Single Source of Truth) ---

      function createStore() {
          let state = {
              currentView: 'calendar', // 'calendar', 'trainer', 'debriefing'
              workouts: {},
              // Altri stati verranno aggiunti qui
          };

          const subscribers = new Set();

          function notify() {
              subscribers.forEach(callback => callback());
          }

          function dispatch(action) {
              // Le azioni sono oggetti con { type, payload }
              switch (action.type) {
                  case 'CHANGE_VIEW':
                      if (state.currentView !== action.payload) {
                          state = { ...state, currentView: action.payload };
                          console.log(`State changed: view is now "${action.payload}"`);
                          notify();
                      }
                      break;
                  // Altri tipi di azione verranno gestiti qui
                  default:
                      console.warn(`Azione non riconosciuta: ${action.type}`);
              }
          }

          return {
              // Ritorna una copia dello stato per impedire modifiche dirette
              getState: () => ({ ...state }),
              // Aggiunge un listener
              subscribe: (callback) => {
                  subscribers.add(callback);
                  // Ritorna una funzione per annullare l'iscrizione
                  return () => subscribers.delete(callback);
              },
              // Invia un'azione per modificare lo stato
              dispatch,
          };
      }

      const store = createStore();
      export default store;
  - file: src/modules/storage.js
    content: |
      // --- Modulo di Persistenza Dati per localStorage ---

      /**
       * Carica i dati dal localStorage e li valida contro uno schema.
       * @param {string} key La chiave da cui caricare.
       * @returns {object | null} I dati validati o null se non validi/presenti.
       */
      export function loadFromStorage(key) {
          // Logica futura:
          // 1. Leggere da localStorage.
          // 2. Parsare il JSON.
          // 3. Validare lo schema.
          // 4. Ritornare i dati o null.
          console.log(`Placeholder: caricamento da storage per la chiave "${key}"`);
          return null;
      }

      /**
       * Salva i dati nel localStorage.
       * @param {string} key La chiave con cui salvare.
       * @param {object} data I dati da salvare.
       */
      export function saveToStorage(key, data) {
          // Logica futura:
          // 1. Stringify dei dati.
          // 2. Salvare in localStorage.
          console.log(`Placeholder: salvataggio su storage per la chiave "${key}"`);
      }
commands:
  - "rm -f main.py"
  - "echo 'Struttura del progetto inizializzata. File obsoleti rimossi con successo.'"